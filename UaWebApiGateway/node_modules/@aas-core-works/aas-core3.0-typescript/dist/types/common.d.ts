/**
 * Provide common functions shared among the modules.
 */
/**
 * Create an iterator over the given range of numbers.
 *
 * @param start - inclusive start of the range
 * @param end - exclusive end of the range
 * @returns iterator over the range
 */
export declare function range(start: number, end: number): IterableIterator<number>;
/**
 * Retrieve the `index`-th item from the `array`.
 *
 * @remarks
 * This is a fill for `Array.prototype.at`.
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 *
 * @param array - to get the element from
 * @param index - zero-based index of the `array`. Negative index counts back.
 * @returns item, or `undefined` if `index` out-of-bound
 * @typeParam T - type of the array items
 */
export declare function at<T>(array: Array<T>, index: number): T;
/**
 * Check that all the values of the iterable are `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if all values in `iterable` are set
 */
export declare function every<T>(iterable: Iterable<T>): boolean;
/**
 * Check that at least one value of the iterable is `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if at least one value in `iterable` is set
 */
export declare function some<T>(iterable: Iterable<T>): boolean;
/**
 * Map the items of an iterable.
 *
 * @param iterable - to be mapped
 * @param mappingFunction - to be applied on `iterable`
 * @returns mapped items of `iterable`
 * @typeParam S - type of an item of the `iterable`
 * @typeParam T - type of the transformed item of the `iterable`
 */
export declare function map<S, T>(iterable: Iterable<S>, mappingFunction: (item: S) => T): IterableIterator<T>;
/**
 * Represent either a result, or an error.
 *
 * @typeParam ValueT - type of the resulting value
 * @typeParam ErrorT - type of the error
 */
export declare class Either<ValueT, ErrorT> {
    /**
     * value if something successful
     */
    readonly value: ValueT | null;
    /**
     * error if something failed
     */
    readonly error: ErrorT | null;
    /**
     * Assert that value is set and return it.
     *
     * @returns {@link value}, or throw if `null`
     */
    mustValue(): ValueT;
    constructor(value: ValueT | null, error: ErrorT | null);
}
/**
 * Encode a byte array in base64.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param bytes - to be encoded
 * @returns `bytes` encoded as base64 text
 */
export declare function base64Encode(bytes: Uint8Array): string;
/**
 * Decode a base64-encoded byte array.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param text - to be decoded
 * @returns either the array or an error, if `text` is not a valid base64 encoding
 */
export declare function base64Decode(text: string): Either<Uint8Array, string>;
//# sourceMappingURL=common.d.ts.map