/**
 * De/serialize enumerations from and to string representations.
 */
import * as AasTypes from "./types";
/**
 * Parse `text` as a string representation of {@link types!ModelType}.
 *
 * @param text - string representation of {@link types!ModelType}
 * @returns literal of {@link types!ModelType}, if valid, and `null` otherwise
 */
export declare function modelTypeFromString(text: string): AasTypes.ModelType | null;
/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType},
 * if `value` valid, and `null` otherwise
 */
export declare function modelTypeToString(value: AasTypes.ModelType): string | null;
/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustModelTypeToString(value: AasTypes.ModelType): string;
/**
 * Parse `text` as a string representation of {@link types!ModellingKind}.
 *
 * @param text - string representation of {@link types!ModellingKind}
 * @returns literal of {@link types!ModellingKind}, if valid, and `null` otherwise
 */
export declare function modellingKindFromString(text: string): AasTypes.ModellingKind | null;
/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}, if `value` valid, and `null` otherwise
 */
export declare function modellingKindToString(value: AasTypes.ModellingKind): string | null;
/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustModellingKindToString(value: AasTypes.ModellingKind): string;
/**
 * Parse `text` as a string representation of {@link types!QualifierKind}.
 *
 * @param text - string representation of {@link types!QualifierKind}
 * @returns literal of {@link types!QualifierKind}, if valid, and `null` otherwise
 */
export declare function qualifierKindFromString(text: string): AasTypes.QualifierKind | null;
/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}, if `value` valid, and `null` otherwise
 */
export declare function qualifierKindToString(value: AasTypes.QualifierKind): string | null;
/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustQualifierKindToString(value: AasTypes.QualifierKind): string;
/**
 * Parse `text` as a string representation of {@link types!AssetKind}.
 *
 * @param text - string representation of {@link types!AssetKind}
 * @returns literal of {@link types!AssetKind}, if valid, and `null` otherwise
 */
export declare function assetKindFromString(text: string): AasTypes.AssetKind | null;
/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}, if `value` valid, and `null` otherwise
 */
export declare function assetKindToString(value: AasTypes.AssetKind): string | null;
/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustAssetKindToString(value: AasTypes.AssetKind): string;
/**
 * Parse `text` as a string representation of {@link types!AasSubmodelElements}.
 *
 * @param text - string representation of {@link types!AasSubmodelElements}
 * @returns literal of {@link types!AasSubmodelElements}, if valid, and `null` otherwise
 */
export declare function aasSubmodelElementsFromString(text: string): AasTypes.AasSubmodelElements | null;
/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}, if `value` valid, and `null` otherwise
 */
export declare function aasSubmodelElementsToString(value: AasTypes.AasSubmodelElements): string | null;
/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustAasSubmodelElementsToString(value: AasTypes.AasSubmodelElements): string;
/**
 * Parse `text` as a string representation of {@link types!EntityType}.
 *
 * @param text - string representation of {@link types!EntityType}
 * @returns literal of {@link types!EntityType}, if valid, and `null` otherwise
 */
export declare function entityTypeFromString(text: string): AasTypes.EntityType | null;
/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}, if `value` valid, and `null` otherwise
 */
export declare function entityTypeToString(value: AasTypes.EntityType): string | null;
/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustEntityTypeToString(value: AasTypes.EntityType): string;
/**
 * Parse `text` as a string representation of {@link types!Direction}.
 *
 * @param text - string representation of {@link types!Direction}
 * @returns literal of {@link types!Direction}, if valid, and `null` otherwise
 */
export declare function directionFromString(text: string): AasTypes.Direction | null;
/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}, if `value` valid, and `null` otherwise
 */
export declare function directionToString(value: AasTypes.Direction): string | null;
/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustDirectionToString(value: AasTypes.Direction): string;
/**
 * Parse `text` as a string representation of {@link types!StateOfEvent}.
 *
 * @param text - string representation of {@link types!StateOfEvent}
 * @returns literal of {@link types!StateOfEvent}, if valid, and `null` otherwise
 */
export declare function stateOfEventFromString(text: string): AasTypes.StateOfEvent | null;
/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}, if `value` valid, and `null` otherwise
 */
export declare function stateOfEventToString(value: AasTypes.StateOfEvent): string | null;
/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustStateOfEventToString(value: AasTypes.StateOfEvent): string;
/**
 * Parse `text` as a string representation of {@link types!ReferenceTypes}.
 *
 * @param text - string representation of {@link types!ReferenceTypes}
 * @returns literal of {@link types!ReferenceTypes}, if valid, and `null` otherwise
 */
export declare function referenceTypesFromString(text: string): AasTypes.ReferenceTypes | null;
/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}, if `value` valid, and `null` otherwise
 */
export declare function referenceTypesToString(value: AasTypes.ReferenceTypes): string | null;
/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustReferenceTypesToString(value: AasTypes.ReferenceTypes): string;
/**
 * Parse `text` as a string representation of {@link types!KeyTypes}.
 *
 * @param text - string representation of {@link types!KeyTypes}
 * @returns literal of {@link types!KeyTypes}, if valid, and `null` otherwise
 */
export declare function keyTypesFromString(text: string): AasTypes.KeyTypes | null;
/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}, if `value` valid, and `null` otherwise
 */
export declare function keyTypesToString(value: AasTypes.KeyTypes): string | null;
/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustKeyTypesToString(value: AasTypes.KeyTypes): string;
/**
 * Parse `text` as a string representation of {@link types!DataTypeDefXsd}.
 *
 * @param text - string representation of {@link types!DataTypeDefXsd}
 * @returns literal of {@link types!DataTypeDefXsd}, if valid, and `null` otherwise
 */
export declare function dataTypeDefXsdFromString(text: string): AasTypes.DataTypeDefXsd | null;
/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}, if `value` valid, and `null` otherwise
 */
export declare function dataTypeDefXsdToString(value: AasTypes.DataTypeDefXsd): string | null;
/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustDataTypeDefXsdToString(value: AasTypes.DataTypeDefXsd): string;
/**
 * Parse `text` as a string representation of {@link types!DataTypeIec61360}.
 *
 * @param text - string representation of {@link types!DataTypeIec61360}
 * @returns literal of {@link types!DataTypeIec61360}, if valid, and `null` otherwise
 */
export declare function dataTypeIec61360FromString(text: string): AasTypes.DataTypeIec61360 | null;
/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}, if `value` valid, and `null` otherwise
 */
export declare function dataTypeIec61360ToString(value: AasTypes.DataTypeIec61360): string | null;
/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export declare function mustDataTypeIec61360ToString(value: AasTypes.DataTypeIec61360): string;
//# sourceMappingURL=stringification.d.ts.map