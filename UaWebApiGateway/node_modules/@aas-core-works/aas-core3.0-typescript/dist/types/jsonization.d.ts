/**
 * Provide de/serialization of AAS classes to/from JSON.
 *
 * We can not use one-pass deserialization for JSON since the object
 * properties do not have fixed order, and hence we can not read
 * `modelType` property ahead of the remaining properties.
 */
import * as AasCommon from "./common";
import * as AasTypes from "./types";
export type JsonValue = string | number | boolean | JsonObject | JsonArray;
export type JsonArray = Iterable<JsonValue>;
export type JsonObject = {
    [prop: string]: JsonValue;
};
/**
 * Represent a property on a path to the erroneous value.
 */
export declare class PropertySegment {
    /**
     * Instance that contains the property
     */
    readonly instance: JsonObject;
    /**
     * Name of the property
     */
    readonly name: string;
    constructor(instance: JsonObject, name: string);
}
/**
 * Represent an index access on a path to the erroneous value.
 */
export declare class IndexSegment {
    /**
     * Container that contains the item
     */
    readonly container: JsonArray;
    /**
     * Index of the item
     */
    readonly index: number;
    constructor(container: JsonArray, index: number);
}
export type Segment = PropertySegment | IndexSegment;
/**
 * Represent the relative path to the erroneous value.
 */
export declare class Path {
    private readonly _segments;
    /**
     * Get the segments of the path.
     */
    segments(): Array<Segment>;
    /**
     * Insert the `segment` in front of the {@link segments}.
     *
     * @param segment - segment to be prepended to {@link segments}
     */
    prepend(segment: Segment): void;
    toString(): string;
}
/**
 * Signal that the JSON de-serialization could not be performed.
 */
export declare class DeserializationError {
    /**
     * Human-readable explanation of the error
     */
    readonly message: string;
    /**
     * Relative path to the erroneous value
     */
    readonly path: Path;
    constructor(message: string, path?: Path | null);
}
/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasSemantics}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function hasSemanticsFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IHasSemantics, DeserializationError>;
/**
 * Parse an instance of {@link types!Extension} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Extension},
 * or an error if any
 */
export declare function extensionFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Extension, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasExtensions}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function hasExtensionsFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IHasExtensions, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IReferable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function referableFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IReferable, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IIdentifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function identifiableFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IIdentifiable, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ModellingKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function modellingKindFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ModellingKind, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function hasKindFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IHasKind, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasDataSpecification}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function hasDataSpecificationFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IHasDataSpecification, DeserializationError>;
/**
 * Parse an instance of {@link types!AdministrativeInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AdministrativeInformation},
 * or an error if any
 */
export declare function administrativeInformationFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AdministrativeInformation, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IQualifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function qualifiableFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IQualifiable, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!QualifierKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function qualifierKindFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.QualifierKind, DeserializationError>;
/**
 * Parse an instance of {@link types!Qualifier} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Qualifier},
 * or an error if any
 */
export declare function qualifierFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Qualifier, DeserializationError>;
/**
 * Parse an instance of {@link types!AssetAdministrationShell} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetAdministrationShell},
 * or an error if any
 */
export declare function assetAdministrationShellFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AssetAdministrationShell, DeserializationError>;
/**
 * Parse an instance of {@link types!AssetInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetInformation},
 * or an error if any
 */
export declare function assetInformationFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AssetInformation, DeserializationError>;
/**
 * Parse an instance of {@link types!Resource} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Resource},
 * or an error if any
 */
export declare function resourceFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Resource, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AssetKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function assetKindFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AssetKind, DeserializationError>;
/**
 * Parse an instance of {@link types!SpecificAssetId} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SpecificAssetId},
 * or an error if any
 */
export declare function specificAssetIdFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.SpecificAssetId, DeserializationError>;
/**
 * Parse an instance of {@link types!Submodel} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Submodel},
 * or an error if any
 */
export declare function submodelFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Submodel, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!ISubmodelElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function submodelElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ISubmodelElement, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IRelationshipElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function relationshipElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IRelationshipElement, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AasSubmodelElements}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function aasSubmodelElementsFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AasSubmodelElements, DeserializationError>;
/**
 * Parse an instance of {@link types!SubmodelElementList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementList},
 * or an error if any
 */
export declare function submodelElementListFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.SubmodelElementList, DeserializationError>;
/**
 * Parse an instance of {@link types!SubmodelElementCollection} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementCollection},
 * or an error if any
 */
export declare function submodelElementCollectionFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.SubmodelElementCollection, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function dataElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IDataElement, DeserializationError>;
/**
 * Parse an instance of {@link types!Property} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Property},
 * or an error if any
 */
export declare function propertyFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Property, DeserializationError>;
/**
 * Parse an instance of {@link types!MultiLanguageProperty} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!MultiLanguageProperty},
 * or an error if any
 */
export declare function multiLanguagePropertyFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.MultiLanguageProperty, DeserializationError>;
/**
 * Parse an instance of {@link types!Range} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Range},
 * or an error if any
 */
export declare function rangeFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Range, DeserializationError>;
/**
 * Parse an instance of {@link types!ReferenceElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ReferenceElement},
 * or an error if any
 */
export declare function referenceElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ReferenceElement, DeserializationError>;
/**
 * Parse an instance of {@link types!Blob} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Blob},
 * or an error if any
 */
export declare function blobFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Blob, DeserializationError>;
/**
 * Parse an instance of {@link types!File} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!File},
 * or an error if any
 */
export declare function fileFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.File, DeserializationError>;
/**
 * Parse an instance of {@link types!AnnotatedRelationshipElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AnnotatedRelationshipElement},
 * or an error if any
 */
export declare function annotatedRelationshipElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.AnnotatedRelationshipElement, DeserializationError>;
/**
 * Parse an instance of {@link types!Entity} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Entity},
 * or an error if any
 */
export declare function entityFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Entity, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!EntityType}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function entityTypeFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.EntityType, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!Direction}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function directionFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Direction, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!StateOfEvent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function stateOfEventFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.StateOfEvent, DeserializationError>;
/**
 * Parse an instance of {@link types!EventPayload} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EventPayload},
 * or an error if any
 */
export declare function eventPayloadFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.EventPayload, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IEventElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function eventElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IEventElement, DeserializationError>;
/**
 * Parse an instance of {@link types!BasicEventElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!BasicEventElement},
 * or an error if any
 */
export declare function basicEventElementFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.BasicEventElement, DeserializationError>;
/**
 * Parse an instance of {@link types!Operation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Operation},
 * or an error if any
 */
export declare function operationFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Operation, DeserializationError>;
/**
 * Parse an instance of {@link types!OperationVariable} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!OperationVariable},
 * or an error if any
 */
export declare function operationVariableFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.OperationVariable, DeserializationError>;
/**
 * Parse an instance of {@link types!Capability} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Capability},
 * or an error if any
 */
export declare function capabilityFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Capability, DeserializationError>;
/**
 * Parse an instance of {@link types!ConceptDescription} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ConceptDescription},
 * or an error if any
 */
export declare function conceptDescriptionFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ConceptDescription, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ReferenceTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function referenceTypesFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ReferenceTypes, DeserializationError>;
/**
 * Parse an instance of {@link types!Reference} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Reference},
 * or an error if any
 */
export declare function referenceFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Reference, DeserializationError>;
/**
 * Parse an instance of {@link types!Key} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Key},
 * or an error if any
 */
export declare function keyFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Key, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!KeyTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function keyTypesFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.KeyTypes, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeDefXsd}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function dataTypeDefXsdFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.DataTypeDefXsd, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IAbstractLangString}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function abstractLangStringFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IAbstractLangString, DeserializationError>;
/**
 * Parse an instance of {@link types!LangStringNameType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringNameType},
 * or an error if any
 */
export declare function langStringNameTypeFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LangStringNameType, DeserializationError>;
/**
 * Parse an instance of {@link types!LangStringTextType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringTextType},
 * or an error if any
 */
export declare function langStringTextTypeFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LangStringTextType, DeserializationError>;
/**
 * Parse an instance of {@link types!Environment} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Environment},
 * or an error if any
 */
export declare function environmentFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.Environment, DeserializationError>;
/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataSpecificationContent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
export declare function dataSpecificationContentFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.IDataSpecificationContent, DeserializationError>;
/**
 * Parse an instance of {@link types!EmbeddedDataSpecification} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EmbeddedDataSpecification},
 * or an error if any
 */
export declare function embeddedDataSpecificationFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.EmbeddedDataSpecification, DeserializationError>;
/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeIec61360}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
export declare function dataTypeIec61360FromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.DataTypeIec61360, DeserializationError>;
/**
 * Parse an instance of {@link types!LevelType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LevelType},
 * or an error if any
 */
export declare function levelTypeFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LevelType, DeserializationError>;
/**
 * Parse an instance of {@link types!ValueReferencePair} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueReferencePair},
 * or an error if any
 */
export declare function valueReferencePairFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ValueReferencePair, DeserializationError>;
/**
 * Parse an instance of {@link types!ValueList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueList},
 * or an error if any
 */
export declare function valueListFromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.ValueList, DeserializationError>;
/**
 * Parse an instance of {@link types!LangStringPreferredNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringPreferredNameTypeIec61360},
 * or an error if any
 */
export declare function langStringPreferredNameTypeIec61360FromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LangStringPreferredNameTypeIec61360, DeserializationError>;
/**
 * Parse an instance of {@link types!LangStringShortNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringShortNameTypeIec61360},
 * or an error if any
 */
export declare function langStringShortNameTypeIec61360FromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LangStringShortNameTypeIec61360, DeserializationError>;
/**
 * Parse an instance of {@link types!LangStringDefinitionTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringDefinitionTypeIec61360},
 * or an error if any
 */
export declare function langStringDefinitionTypeIec61360FromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.LangStringDefinitionTypeIec61360, DeserializationError>;
/**
 * Parse an instance of {@link types!DataSpecificationIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!DataSpecificationIec61360},
 * or an error if any
 */
export declare function dataSpecificationIec61360FromJsonable(jsonable: JsonValue): AasCommon.Either<AasTypes.DataSpecificationIec61360, DeserializationError>;
/**
 * Convert `that` to a JSON-able structure.
 *
 * @param that - AAS data to be recursively converted to a JSON-able structure
 * @returns
 * JSON-able structure which can be further processed with, say,
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify|JSON.stringify})
 */
export declare function toJsonable(that: AasTypes.Class): JsonObject;
//# sourceMappingURL=jsonization.d.ts.map