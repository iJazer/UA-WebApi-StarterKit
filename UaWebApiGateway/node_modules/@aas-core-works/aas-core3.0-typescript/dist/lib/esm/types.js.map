{"version":3,"file":"types.js","names":["ModelType","overModelType","Class","Extension","modelType","overSupplementalSemanticIdsOrEmpty","supplementalSemanticIds","overRefersToOrEmpty","refersTo","valueTypeOrDefault","valueType","DataTypeDefXsd","String","descendOnce","semanticId","descend","anItem","anotherItem","accept","visitor","visitExtension","acceptWithContext","context","visitExtensionWithContext","transform","transformer","transformExtension","transformWithContext","transformExtensionWithContext","constructor","name","value","ModellingKind","overModellingKind","AdministrativeInformation","overEmbeddedDataSpecificationsOrEmpty","embeddedDataSpecifications","creator","visitAdministrativeInformation","visitAdministrativeInformationWithContext","transformAdministrativeInformation","transformAdministrativeInformationWithContext","version","revision","templateId","QualifierKind","overQualifierKind","Qualifier","kindOrDefault","kind","ConceptQualifier","valueId","visitQualifier","visitQualifierWithContext","transformQualifier","transformQualifierWithContext","type","AssetAdministrationShell","overExtensionsOrEmpty","extensions","overDisplayNameOrEmpty","displayName","overDescriptionOrEmpty","description","overSubmodelsOrEmpty","submodels","administration","derivedFrom","assetInformation","yetAnotherItem","yetYetAnotherItem","yetYetYetAnotherItem","visitAssetAdministrationShell","visitAssetAdministrationShellWithContext","transformAssetAdministrationShell","transformAssetAdministrationShellWithContext","id","category","idShort","AssetInformation","overSpecificAssetIdsOrEmpty","specificAssetIds","defaultThumbnail","visitAssetInformation","visitAssetInformationWithContext","transformAssetInformation","transformAssetInformationWithContext","assetKind","globalAssetId","assetType","Resource","visitResource","visitResourceWithContext","transformResource","transformResourceWithContext","path","contentType","AssetKind","overAssetKind","SpecificAssetId","externalSubjectId","visitSpecificAssetId","visitSpecificAssetIdWithContext","transformSpecificAssetId","transformSpecificAssetIdWithContext","Submodel","overQualifiersOrEmpty","qualifiers","overSubmodelElementsOrEmpty","submodelElements","Instance","yetYetYetYetAnotherItem","yetYetYetYetYetAnotherItem","visitSubmodel","visitSubmodelWithContext","transformSubmodel","transformSubmodelWithContext","RelationshipElement","first","second","visitRelationshipElement","visitRelationshipElementWithContext","transformRelationshipElement","transformRelationshipElementWithContext","AasSubmodelElements","overAasSubmodelElements","SubmodelElementList","overValueOrEmpty","orderRelevantOrDefault","orderRelevant","semanticIdListElement","visitSubmodelElementList","visitSubmodelElementListWithContext","transformSubmodelElementList","transformSubmodelElementListWithContext","typeValueListElement","valueTypeListElement","SubmodelElementCollection","visitSubmodelElementCollection","visitSubmodelElementCollectionWithContext","transformSubmodelElementCollection","transformSubmodelElementCollectionWithContext","Property","categoryOrDefault","visitProperty","visitPropertyWithContext","transformProperty","transformPropertyWithContext","MultiLanguageProperty","visitMultiLanguageProperty","visitMultiLanguagePropertyWithContext","transformMultiLanguageProperty","transformMultiLanguagePropertyWithContext","Range","visitRange","visitRangeWithContext","transformRange","transformRangeWithContext","min","max","ReferenceElement","visitReferenceElement","visitReferenceElementWithContext","transformReferenceElement","transformReferenceElementWithContext","Blob","visitBlob","visitBlobWithContext","transformBlob","transformBlobWithContext","File","visitFile","visitFileWithContext","transformFile","transformFileWithContext","AnnotatedRelationshipElement","overAnnotationsOrEmpty","annotations","visitAnnotatedRelationshipElement","visitAnnotatedRelationshipElementWithContext","transformAnnotatedRelationshipElement","transformAnnotatedRelationshipElementWithContext","Entity","overStatementsOrEmpty","statements","yetYetYetYetYetYetAnotherItem","visitEntity","visitEntityWithContext","transformEntity","transformEntityWithContext","entityType","EntityType","overEntityType","Direction","overDirection","StateOfEvent","overStateOfEvent","EventPayload","source","sourceSemanticId","observableReference","observableSemanticId","subjectId","visitEventPayload","visitEventPayloadWithContext","transformEventPayload","transformEventPayloadWithContext","timeStamp","topic","payload","BasicEventElement","observed","messageBroker","visitBasicEventElement","visitBasicEventElementWithContext","transformBasicEventElement","transformBasicEventElementWithContext","direction","state","messageTopic","lastUpdate","minInterval","maxInterval","Operation","overInputVariablesOrEmpty","inputVariables","overOutputVariablesOrEmpty","outputVariables","overInoutputVariablesOrEmpty","inoutputVariables","yetYetYetYetYetYetYetAnotherItem","visitOperation","visitOperationWithContext","transformOperation","transformOperationWithContext","OperationVariable","visitOperationVariable","visitOperationVariableWithContext","transformOperationVariable","transformOperationVariableWithContext","Capability","visitCapability","visitCapabilityWithContext","transformCapability","transformCapabilityWithContext","ConceptDescription","overIsCaseOfOrEmpty","isCaseOf","visitConceptDescription","visitConceptDescriptionWithContext","transformConceptDescription","transformConceptDescriptionWithContext","ReferenceTypes","overReferenceTypes","Reference","referredSemanticId","keys","visitReference","visitReferenceWithContext","transformReference","transformReferenceWithContext","Key","visitKey","visitKeyWithContext","transformKey","transformKeyWithContext","KeyTypes","overKeyTypes","overDataTypeDefXsd","LangStringNameType","visitLangStringNameType","visitLangStringNameTypeWithContext","transformLangStringNameType","transformLangStringNameTypeWithContext","language","text","LangStringTextType","visitLangStringTextType","visitLangStringTextTypeWithContext","transformLangStringTextType","transformLangStringTextTypeWithContext","Environment","overAssetAdministrationShellsOrEmpty","assetAdministrationShells","overConceptDescriptionsOrEmpty","conceptDescriptions","visitEnvironment","visitEnvironmentWithContext","transformEnvironment","transformEnvironmentWithContext","EmbeddedDataSpecification","dataSpecificationContent","dataSpecification","visitEmbeddedDataSpecification","visitEmbeddedDataSpecificationWithContext","transformEmbeddedDataSpecification","transformEmbeddedDataSpecificationWithContext","DataTypeIec61360","overDataTypeIec61360","LevelType","visitLevelType","visitLevelTypeWithContext","transformLevelType","transformLevelTypeWithContext","nom","typ","ValueReferencePair","visitValueReferencePair","visitValueReferencePairWithContext","transformValueReferencePair","transformValueReferencePairWithContext","ValueList","valueReferencePairs","visitValueList","visitValueListWithContext","transformValueList","transformValueListWithContext","LangStringPreferredNameTypeIec61360","visitLangStringPreferredNameTypeIec61360","visitLangStringPreferredNameTypeIec61360WithContext","transformLangStringPreferredNameTypeIec61360","transformLangStringPreferredNameTypeIec61360WithContext","LangStringShortNameTypeIec61360","visitLangStringShortNameTypeIec61360","visitLangStringShortNameTypeIec61360WithContext","transformLangStringShortNameTypeIec61360","transformLangStringShortNameTypeIec61360WithContext","LangStringDefinitionTypeIec61360","visitLangStringDefinitionTypeIec61360","visitLangStringDefinitionTypeIec61360WithContext","transformLangStringDefinitionTypeIec61360","transformLangStringDefinitionTypeIec61360WithContext","DataSpecificationIec61360","overShortNameOrEmpty","shortName","overDefinitionOrEmpty","definition","preferredName","unitId","valueList","levelType","visitDataSpecificationIec61360","visitDataSpecificationIec61360WithContext","transformDataSpecificationIec61360","transformDataSpecificationIec61360WithContext","unit","sourceOfDefinition","symbol","dataType","valueFormat","AbstractVisitor","visit","that","AbstractVisitorWithContext","visitWithContext","PassThroughVisitor","another","PassThroughVisitorWithContext","AbstractTransformer","AbstractTransformerWithContext","TransformerWithDefault","defaultResult","TransformerWithDefaultAndContext","AsHasSemanticsTransformer","AS_HAS_SEMANTICS_TRANSFORMER","asHasSemantics","isHasSemantics","asExtension","isExtension","AsHasExtensionsTransformer","AS_HAS_EXTENSIONS_TRANSFORMER","asHasExtensions","isHasExtensions","AsReferableTransformer","AS_REFERABLE_TRANSFORMER","asReferable","isReferable","AsIdentifiableTransformer","AS_IDENTIFIABLE_TRANSFORMER","asIdentifiable","isIdentifiable","AsHasKindTransformer","AS_HAS_KIND_TRANSFORMER","asHasKind","isHasKind","AsHasDataSpecificationTransformer","AS_HAS_DATA_SPECIFICATION_TRANSFORMER","asHasDataSpecification","isHasDataSpecification","asAdministrativeInformation","isAdministrativeInformation","AsQualifiableTransformer","AS_QUALIFIABLE_TRANSFORMER","asQualifiable","isQualifiable","asQualifier","isQualifier","asAssetAdministrationShell","isAssetAdministrationShell","asAssetInformation","isAssetInformation","asResource","isResource","asSpecificAssetId","isSpecificAssetId","asSubmodel","isSubmodel","AsSubmodelElementTransformer","AS_SUBMODEL_ELEMENT_TRANSFORMER","asSubmodelElement","isSubmodelElement","AsRelationshipElementTransformer","AS_RELATIONSHIP_ELEMENT_TRANSFORMER","asRelationshipElement","isRelationshipElement","asSubmodelElementList","isSubmodelElementList","asSubmodelElementCollection","isSubmodelElementCollection","AsDataElementTransformer","AS_DATA_ELEMENT_TRANSFORMER","asDataElement","isDataElement","asProperty","isProperty","asMultiLanguageProperty","isMultiLanguageProperty","asRange","isRange","asReferenceElement","isReferenceElement","asBlob","isBlob","asFile","isFile","asAnnotatedRelationshipElement","isAnnotatedRelationshipElement","asEntity","isEntity","asEventPayload","isEventPayload","AsEventElementTransformer","AS_EVENT_ELEMENT_TRANSFORMER","asEventElement","isEventElement","asBasicEventElement","isBasicEventElement","asOperation","isOperation","asOperationVariable","isOperationVariable","asCapability","isCapability","asConceptDescription","isConceptDescription","asReference","isReference","asKey","isKey","AsAbstractLangStringTransformer","AS_ABSTRACT_LANG_STRING_TRANSFORMER","asAbstractLangString","isAbstractLangString","asLangStringNameType","isLangStringNameType","asLangStringTextType","isLangStringTextType","asEnvironment","isEnvironment","AsDataSpecificationContentTransformer","AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER","asDataSpecificationContent","isDataSpecificationContent","asEmbeddedDataSpecification","isEmbeddedDataSpecification","asLevelType","isLevelType","asValueReferencePair","isValueReferencePair","asValueList","isValueList","asLangStringPreferredNameTypeIec61360","isLangStringPreferredNameTypeIec61360","asLangStringShortNameTypeIec61360","isLangStringShortNameTypeIec61360","asLangStringDefinitionTypeIec61360","isLangStringDefinitionTypeIec61360","asDataSpecificationIec61360","isDataSpecificationIec61360","TypeMatcher","other","TYPE_MATCHER","typesMatch"],"sources":["../../../src/types.ts"],"sourcesContent":["/**\n * Provide an implementation of the Asset Administration Shell (AAS) V3.0.\n *\n * @remarks\n * The presented version of the Metamodel is related to the work of\n * aas-core-works, which can be found here: https://github.com/aas-core-works.\n *\n * The presented content is neither related to the IDTA nor\n * Plattform Industrie 4.0 and does not represent an official publication.\n *\n * We diverge from the book in the following points.\n *\n * We did not implement the following constraints as they are too general and can not\n * be formalized as part of the core library, but affects external components such as\n * AAS registry or AAS server:\n *\n * * Constraint AASd-022\n *\n * We did not implement the following constraints since they depend on registry and\n * de-referencing of {@link Reference} objects:\n *\n * * Constraint AASd-006\n * * Constraint AASd-007\n * * Constraint AASc-3a-003\n *\n * Some constraints are not enforceable as they depend on the wider context\n * such as language understanding, so we could not formalize them:\n *\n * * Constraint AASd-012: This constraint requires that the texts inside\n *   `Multi_language_property` shall have the same meanings in the separate languages.\n *   This cannot be tested.\n * * Constraint AASd-116: In the book, Constraint AASd-116 imposes a\n *   case-insensitive equality against `globalAssetId`. This is culturally-dependent,\n *   and depends on the system settings. For example, the case-folding\n *   for the letters \"i\" and \"I\" is different in Turkish from English.\n *\n *   We implement the constraint as case-sensitive instead to allow for interoperability\n *   across different culture settings.\n *\n * Furthermore, we diverge from the book in the following points regarding\n * the enumerations. We have to implement subsets of enumerations as sets as common\n * programming languages do not support inheritance of enumerations. The relationship\n * between the properties and the sets is defined through invariants. This causes\n * the following divergences:\n *\n * * We decided therefore to remove the enumeration `DataTypeDefRDF`\n *   and keep only {@link DataTypeDefXsd} as enumeration. Otherwise, we would have\n *   to write redundant invariants all over the meta-model because `DataTypeDefRDF`\n *   is actually never used in any type definition.\n * * The enumeration {@link AasSubmodelElements} is used in two different contexts.\n *   One context is the definition of key types in a reference. Another context is\n *   the definition of element types in a {@link SubmodelElementList}.\n *\n *   To avoid confusion, we introduce two separate enumerations for the separate contexts.\n *   Firstly, a set of {@link KeyTypes}, {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS} to\n *   represent the first context (key type in a reference).\n *   Secondly, the enumeration {@link AasSubmodelElements} is kept as designator\n *   for {@link SubmodelElementList.typeValueListElement}.\n * * The specification introduces several types of `Lang_string_set`.\n *   These types differ between the allowed length of their text inside the singular\n *   `Lang_string` objects. Since the native representation of `Lang_string_set` as\n *   `List` of `Lang_string` is required by specification, it is impossible to\n *   introduce separate `Lang_string_set` types. Therefore, the distinction is drawn here\n *   between the `Lang_string` types.\n *\n *   `DefinitionTypeIEC61360` is represented as a\n *   `List` of {@link LangStringDefinitionTypeIec61360}\n *\n *   `MultiLanguageNameType` is represented as a\n *   `List` of {@link LangStringNameType}\n *\n *   `PreferredNameTypeIEC61360` is represented as a\n *   `List` of {@link LangStringPreferredNameTypeIec61360}\n *\n *   `ShortNameTypeIEC61360` is represented as a\n *   `List` of {@link LangStringShortNameTypeIec61360}\n *\n *   `MultiLanguageTextType` is represented as a\n *   `List` of {@link LangStringTextType}\n *\n *   Furthermore, since `Lang_string` is not used anywhere, we rename it to\n *   {@link IAbstractLangString}.\n *\n * Concerning the data specifications, we embed them within\n * {@link IHasDataSpecification} instead of referencing them *via* an external reference.\n * The working group decided to change the rules for serialization *after* the book was\n * published. The data specifications are critical in applications, but there is no\n * possibility to access them through a data channel as they are not part of\n * an environment.\n */\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n\n/**\n * Represent runtime model type of an instance.\n */\nexport enum ModelType {\n  Extension = 0,\n  AdministrativeInformation = 1,\n  Qualifier = 2,\n  AssetAdministrationShell = 3,\n  AssetInformation = 4,\n  Resource = 5,\n  SpecificAssetId = 6,\n  Submodel = 7,\n  RelationshipElement = 8,\n  SubmodelElementList = 9,\n  SubmodelElementCollection = 10,\n  Property = 11,\n  MultiLanguageProperty = 12,\n  Range = 13,\n  ReferenceElement = 14,\n  Blob = 15,\n  File = 16,\n  AnnotatedRelationshipElement = 17,\n  Entity = 18,\n  EventPayload = 19,\n  BasicEventElement = 20,\n  Operation = 21,\n  OperationVariable = 22,\n  Capability = 23,\n  ConceptDescription = 24,\n  Reference = 25,\n  Key = 26,\n  LangStringNameType = 27,\n  LangStringTextType = 28,\n  Environment = 29,\n  EmbeddedDataSpecification = 30,\n  LevelType = 31,\n  ValueReferencePair = 32,\n  ValueList = 33,\n  LangStringPreferredNameTypeIec61360 = 34,\n  LangStringShortNameTypeIec61360 = 35,\n  LangStringDefinitionTypeIec61360 = 36,\n  DataSpecificationIec61360 = 37\n}\n\n/**\n * Iterate over the literals of {@link ModelType}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overModelType(): Iterable<ModelType> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <ModelType>0; // Extension\n  yield <ModelType>1; // AdministrativeInformation\n  yield <ModelType>2; // Qualifier\n  yield <ModelType>3; // AssetAdministrationShell\n  yield <ModelType>4; // AssetInformation\n  yield <ModelType>5; // Resource\n  yield <ModelType>6; // SpecificAssetId\n  yield <ModelType>7; // Submodel\n  yield <ModelType>8; // RelationshipElement\n  yield <ModelType>9; // SubmodelElementList\n  yield <ModelType>10; // SubmodelElementCollection\n  yield <ModelType>11; // Property\n  yield <ModelType>12; // MultiLanguageProperty\n  yield <ModelType>13; // Range\n  yield <ModelType>14; // ReferenceElement\n  yield <ModelType>15; // Blob\n  yield <ModelType>16; // File\n  yield <ModelType>17; // AnnotatedRelationshipElement\n  yield <ModelType>18; // Entity\n  yield <ModelType>19; // EventPayload\n  yield <ModelType>20; // BasicEventElement\n  yield <ModelType>21; // Operation\n  yield <ModelType>22; // OperationVariable\n  yield <ModelType>23; // Capability\n  yield <ModelType>24; // ConceptDescription\n  yield <ModelType>25; // Reference\n  yield <ModelType>26; // Key\n  yield <ModelType>27; // LangStringNameType\n  yield <ModelType>28; // LangStringTextType\n  yield <ModelType>29; // Environment\n  yield <ModelType>30; // EmbeddedDataSpecification\n  yield <ModelType>31; // LevelType\n  yield <ModelType>32; // ValueReferencePair\n  yield <ModelType>33; // ValueList\n  yield <ModelType>34; // LangStringPreferredNameTypeIec61360\n  yield <ModelType>35; // LangStringShortNameTypeIec61360\n  yield <ModelType>36; // LangStringDefinitionTypeIec61360\n  yield <ModelType>37; // DataSpecificationIec61360\n}\n\n/**\n * Represent the most general class of an AAS model.\n */\nexport abstract class Class {\n  /**\n   * Indicate the runtime model type of an instance.\n   */\n  abstract modelType(): ModelType;\n\n  /**\n   * Iterate over all the instances referenced from this one.\n   */\n  abstract descendOnce(): IterableIterator<Class>;\n\n  /**\n   * Iterate recursively over all the instances referenced from this one.\n   */\n  abstract descend(): IterableIterator<Class>;\n\n  /**\n   * Dispatch the `visitor` on this instance.\n   *\n   * @param visitor - to be dispatched\n   */\n  abstract accept(visitor: AbstractVisitor): void;\n\n  /**\n   * Dispatch the `visitor` on this instance with `context`.\n   *\n   * @param visitor - to be dispatched\n   * @param context - of the visitation\n   * @typeParam ContextT - type of the visitation context\n   */\n  abstract acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ): void;\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to be dispatched\n   * @return this instance transformed\n   * @typeParam T - type of the transformation result\n   */\n  abstract transform<T>(transformer: AbstractTransformer<T>): T;\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to be dispatched\n   * @param context - of the transformation\n   * @return this instance transformed\n   * @typeParam T - type of the transformation result\n   */\n  abstract transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T;\n}\n\n/**\n * Element that can have a semantic definition plus some supplemental semantic\n * definitions.\n *\n * Constraint `AASd-118`:\n * If there are ID {@link supplementalSemanticIds} defined\n * then there shall be also a main semantic ID {@link semanticId}.\n */\nexport interface IHasSemantics extends Class {\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference>;\n}\n\n/**\n * Single extension of an element.\n */\nexport class Extension extends Class implements IHasSemantics {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>0; // Extension\n  }\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Name of the extension.\n   *\n   * Constraint `AASd-077`:\n   * The name of an extension (Extension/name) within {@link IHasExtensions} needs\n   * to be unique.\n   */\n  name: string;\n\n  /**\n   * Type of the value of the extension.\n   *\n   * @remarks\n   * Default: {@link DataTypeDefXsd.String}\n   */\n  valueType: DataTypeDefXsd | null;\n\n  /**\n   * Value of the extension\n   */\n  value: string | null;\n\n  /**\n   * Reference to an element the extension refers to.\n   */\n  refersTo: Array<Reference> | null;\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link refersTo} if it is set, or yield nothing.\n   */\n  *overRefersToOrEmpty(): IterableIterator<Reference> {\n    if (this.refersTo !== null) {\n      yield* this.refersTo;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link valueType} if set or the default value otherwise.\n   */\n  valueTypeOrDefault(): DataTypeDefXsd {\n    return this.valueType !== null ? this.valueType : DataTypeDefXsd.String;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.refersTo !== null) {\n      yield* this.refersTo;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const anItem of this.supplementalSemanticIds) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.refersTo !== null) {\n      for (const anotherItem of this.refersTo) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitExtension(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitExtensionWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformExtension(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformExtensionWithContext(this, context);\n  }\n\n  constructor(\n    name: string,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    valueType: DataTypeDefXsd | null = null,\n    value: string | null = null,\n    refersTo: Array<Reference> | null = null\n  ) {\n    super();\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.name = name;\n    this.valueType = valueType;\n    this.value = value;\n    this.refersTo = refersTo;\n  }\n}\n\n/**\n * Element that can be extended by proprietary extensions.\n *\n * @remarks\n * **Note**:\n * Extensions are proprietary, i.e. they do not support global interoperability.\n */\nexport interface IHasExtensions extends Class {\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  overExtensionsOrEmpty(): IterableIterator<Extension>;\n}\n\n/**\n * An element that is referable by its {@link idShort}.\n *\n * @remarks\n * This ID is not globally unique.\n * This ID is unique within the name space of the element.\n *\n * Constraint `AASd-022`:\n * {@link idShort} of non-identifiable referables\n * within the same name space shall be unique (case-sensitive).\n */\nexport interface IReferable extends IHasExtensions {\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  overDisplayNameOrEmpty(): IterableIterator<LangStringNameType>;\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  overDescriptionOrEmpty(): IterableIterator<LangStringTextType>;\n}\n\n/**\n * An element that has a globally unique identifier.\n */\nexport interface IIdentifiable extends IReferable {\n  /**\n   * Administrative information of an identifiable element.\n   *\n   * @remarks\n   * **Note**:\n   * Some of the administrative information like the version number might need to\n   * be part of the identification.\n   */\n  administration: AdministrativeInformation | null;\n\n  /**\n   * The globally unique identification of the element.\n   */\n  id: string;\n}\n\n/**\n * Enumeration for denoting whether an element is a template or an instance.\n */\nexport enum ModellingKind {\n  /**\n   * Specification of the common features of a structured element in sufficient detail\n   * that such a instance can be instantiated using it\n   */\n  Template = 0,\n  /**\n   * Concrete, clearly identifiable element instance. Its creation and validation\n   * may be guided by a corresponding element template.\n   */\n  Instance\n}\n\n/**\n * Iterate over the literals of {@link ModellingKind}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overModellingKind(): IterableIterator<ModellingKind> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <ModellingKind>0; // Template\n  yield <ModellingKind>1; // Instance\n}\n\n/**\n * An element with a kind is an element that can either represent a template or an\n * instance.\n *\n * @remarks\n * Default for an element is that it is representing an instance.\n */\nexport interface IHasKind extends Class {\n  /**\n   * Kind of the element: either type or instance.\n   *\n   * @remarks\n   * Default: {@link ModellingKind.Instance}\n   */\n  kind: ModellingKind | null;\n\n  kindOrDefault(): ModellingKind;\n}\n\n/**\n * Element that can be extended by using data specification templates.\n *\n * @remarks\n * A data specification template defines a named set of additional attributes an\n * element may or shall have. The data specifications used are explicitly specified\n * with their global ID.\n */\nexport interface IHasDataSpecification extends Class {\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification>;\n}\n\n/**\n * Administrative meta-information for an element like version\n * information.\n *\n * Constraint `AASd-005`:\n * If {@link AdministrativeInformation.version} is not specified then also {@link AdministrativeInformation.revision} shall be\n * unspecified. This means, a revision requires a version. If there is no version\n * there is no revision neither. Revision is optional.\n */\nexport class AdministrativeInformation extends Class implements IHasDataSpecification {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>1; // AdministrativeInformation\n  }\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Version of the element.\n   */\n  version: string | null;\n\n  /**\n   * Revision of the element.\n   */\n  revision: string | null;\n\n  /**\n   * The subject ID of the subject responsible for making the element.\n   */\n  creator: Reference | null;\n\n  /**\n   * Identifier of the template that guided the creation of the element.\n   *\n   * @remarks\n   * **Note**:\n   * In case of a submodel the {@link templateId} is the identifier\n   * of the submodel template ID that guided the creation of the submodel\n   *\n   * **Note**:\n   * The {@link templateId} is not relevant for validation in Submodels.\n   * For validation the {@link Submodel.semanticId} shall be used.\n   *\n   * **Note**:\n   * Usage of {@link templateId} is not restricted to submodel instances. So also\n   * the creation of submodel templates can be guided by another submodel template.\n   */\n  templateId: string | null;\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.creator !== null) {\n      yield this.creator;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.embeddedDataSpecifications !== null) {\n      for (const anItem of this.embeddedDataSpecifications) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.creator !== null) {\n      yield this.creator;\n\n      yield* this.creator.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitAdministrativeInformation(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitAdministrativeInformationWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformAdministrativeInformation(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformAdministrativeInformationWithContext(this, context);\n  }\n\n  constructor(\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    version: string | null = null,\n    revision: string | null = null,\n    creator: Reference | null = null,\n    templateId: string | null = null\n  ) {\n    super();\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.version = version;\n    this.revision = revision;\n    this.creator = creator;\n    this.templateId = templateId;\n  }\n}\n\n/**\n * The value of a qualifiable element may be further qualified by one or more\n * qualifiers.\n *\n * Constraint `AASd-119`:\n * If any {@link Qualifier.kind} value of {@link qualifiers} is\n * equal to {@link QualifierKind.TemplateQualifier} and the qualified element\n * inherits from {@link IHasKind} then the qualified element shall be of\n * kind Template ({@link IHasKind.kind} = {@link ModellingKind.Template}).\n *\n * **Note**:\n * This constraint is checked at {@link Submodel}.\n */\nexport interface IQualifiable extends Class {\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  overQualifiersOrEmpty(): IterableIterator<Qualifier>;\n}\n\n/**\n * Enumeration for kinds of qualifiers.\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\nexport enum QualifierKind {\n  /**\n   * qualifies the value of the element and can change during run-time.\n   *\n   * @remarks\n   *\n   * Value qualifiers are only applicable to elements with kind\n   * {@link ModellingKind.Instance}.\n   */\n  ValueQualifier = 0,\n  /**\n   * qualifies the semantic definition the element is referring to\n   * ({@link IHasSemantics.semanticId})\n   */\n  ConceptQualifier,\n  /**\n   * qualifies the elements within a specific submodel on concept level.\n   *\n   * @remarks\n   *\n   * Template qualifiers are only applicable to elements with kind\n   * {@link ModellingKind.Template}.\n   */\n  TemplateQualifier\n}\n\n/**\n * Iterate over the literals of {@link QualifierKind}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overQualifierKind(): IterableIterator<QualifierKind> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <QualifierKind>0; // ValueQualifier\n  yield <QualifierKind>1; // ConceptQualifier\n  yield <QualifierKind>2; // TemplateQualifier\n}\n\n/**\n * A qualifier is a type-value-pair that makes additional statements w.r.t. the value\n * of the element.\n *\n * Constraint `AASd-006`:\n * If both the {@link Qualifier.value} and the {@link Qualifier.valueId} of\n * a {@link Qualifier} are present then the {@link Qualifier.value} needs\n * to be identical to the value of the referenced coded value\n * in {@link Qualifier.valueId}.\n *\n * Constraint `AASd-020`:\n * The value of {@link Qualifier.value} shall be consistent to the data type as\n * defined in {@link Qualifier.valueType}.\n */\nexport class Qualifier extends Class implements IHasSemantics {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>2; // Qualifier\n  }\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * The qualifier kind describes the kind of the qualifier that is applied to the\n   * element.\n   *\n   * @remarks\n   * Default: {@link QualifierKind.ConceptQualifier}\n   */\n  kind: QualifierKind | null;\n\n  /**\n   * The qualifier *type* describes the type of the qualifier that is applied to\n   * the element.\n   */\n  type: string;\n\n  /**\n   * Data type of the qualifier value.\n   */\n  valueType: DataTypeDefXsd;\n\n  /**\n   * The qualifier value is the value of the qualifier.\n   */\n  value: string | null;\n\n  /**\n   * Reference to the global unique ID of a coded value.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  valueId: Reference | null;\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link kind} if set or the default value otherwise.\n   */\n  kindOrDefault(): QualifierKind {\n    return this.kind !== null ? this.kind : QualifierKind.ConceptQualifier;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const anItem of this.supplementalSemanticIds) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n\n      yield* this.valueId.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitQualifier(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitQualifierWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformQualifier(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformQualifierWithContext(this, context);\n  }\n\n  constructor(\n    type: string,\n    valueType: DataTypeDefXsd,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    kind: QualifierKind | null = null,\n    value: string | null = null,\n    valueId: Reference | null = null\n  ) {\n    super();\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.type = type;\n    this.valueType = valueType;\n    this.kind = kind;\n    this.value = value;\n    this.valueId = valueId;\n  }\n}\n\n/**\n * An asset administration shell.\n */\nexport class AssetAdministrationShell\n  extends Class\n  implements IIdentifiable, IHasDataSpecification\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>3; // AssetAdministrationShell\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Administrative information of an identifiable element.\n   *\n   * @remarks\n   * **Note**:\n   * Some of the administrative information like the version number might need to\n   * be part of the identification.\n   */\n  administration: AdministrativeInformation | null;\n\n  /**\n   * The globally unique identification of the element.\n   */\n  id: string;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * The reference to the AAS the AAS was derived from.\n   */\n  derivedFrom: Reference | null;\n\n  /**\n   * Meta-information about the asset the AAS is representing.\n   */\n  assetInformation: AssetInformation;\n\n  /**\n   * References to submodels of the AAS.\n   *\n   * @remarks\n   * A submodel is a description of an aspect of the asset the AAS is representing.\n   *\n   * The asset of an AAS is typically described by one or more submodels.\n   *\n   * Temporarily no submodel might be assigned to the AAS.\n   */\n  submodels: Array<Reference> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link submodels} if it is set, or yield nothing.\n   */\n  *overSubmodelsOrEmpty(): IterableIterator<Reference> {\n    if (this.submodels !== null) {\n      yield* this.submodels;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.derivedFrom !== null) {\n      yield this.derivedFrom;\n    }\n\n    yield this.assetInformation;\n\n    if (this.submodels !== null) {\n      yield* this.submodels;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n\n      yield* this.administration.descend();\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.derivedFrom !== null) {\n      yield this.derivedFrom;\n\n      yield* this.derivedFrom.descend();\n    }\n\n    yield this.assetInformation;\n\n    yield* this.assetInformation.descend();\n\n    if (this.submodels !== null) {\n      for (const yetYetYetAnotherItem of this.submodels) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitAssetAdministrationShell(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitAssetAdministrationShellWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformAssetAdministrationShell(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformAssetAdministrationShellWithContext(this, context);\n  }\n\n  constructor(\n    id: string,\n    assetInformation: AssetInformation,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    administration: AdministrativeInformation | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    derivedFrom: Reference | null = null,\n    submodels: Array<Reference> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.id = id;\n    this.administration = administration;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.derivedFrom = derivedFrom;\n    this.assetInformation = assetInformation;\n    this.submodels = submodels;\n  }\n}\n\n/**\n * In {@link AssetInformation} identifying meta data of the asset that is\n * represented by an AAS is defined.\n *\n * @remarks\n * The asset may either represent an asset type or an asset instance.\n *\n * The asset has a globally unique identifier plus – if needed – additional domain\n * specific (proprietary) identifiers. However, to support the corner case of very\n * first phase of lifecycle where a stabilised/constant_set global asset identifier\n * does not already exist, the corresponding attribute {@link AssetInformation.globalAssetId} is\n * optional.\n *\n * Constraint `AASd-116`:\n * `globalAssetId` is a reserved key. If used as value for\n * {@link SpecificAssetId.name} then {@link SpecificAssetId.value} shall be\n * identical to {@link AssetInformation.globalAssetId}.\n *\n * **Note**:\n * Constraint AASd-116 is important to enable a generic search across\n * global and specific asset IDs.\n *\n * **Note**:\n * In the book, Constraint AASd-116 imposes a\n * case-insensitive equality against `globalAssetId`. This is\n * culturally-dependent, and depends on the system settings.\n * For example, the case-folding for the letters \"i\" and \"I\" is\n * different in Turkish from English.\n *\n * We implement the constraint as case-sensitive instead to allow\n * for interoperability across different culture settings.\n *\n * Constraint `AASd-131`:\n * For {@link AssetInformation} either the {@link AssetInformation.globalAssetId} shall be\n * defined or at least one item in {@link AssetInformation.specificAssetIds}.\n */\nexport class AssetInformation extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>4; // AssetInformation\n  }\n\n  /**\n   * Denotes whether the Asset is of kind {@link AssetKind.Type} or\n   * {@link AssetKind.Instance}.\n   */\n  assetKind: AssetKind;\n\n  /**\n   * Global identifier of the asset the AAS is representing.\n   *\n   * @remarks\n   * This attribute is required as soon as the AAS is exchanged via partners in the life\n   * cycle of the asset. In a first phase of the life cycle the asset might not yet have\n   * a global ID but already an internal identifier. The internal identifier would be\n   * modelled via {@link specificAssetIds}.\n   *\n   * **Note**:\n   * This is a global reference.\n   */\n  globalAssetId: string | null;\n\n  /**\n   * Additional domain-specific, typically proprietary identifier for the asset like\n   * e.g., serial number etc.\n   */\n  specificAssetIds: Array<SpecificAssetId> | null;\n\n  /**\n   * In case {@link assetKind} is applicable the {@link assetType} is the asset ID\n   * of the type asset of the asset under consideration\n   * as identified by {@link globalAssetId}.\n   *\n   * @remarks\n   * **Note**:\n   * In case {@link assetKind} is \"Instance\" than the {@link assetType} denotes\n   * which \"Type\" the asset is of. But it is also possible\n   * to have an {@link assetType} of an asset of kind \"Type\".\n   */\n  assetType: string | null;\n\n  /**\n   * Thumbnail of the asset represented by the Asset Administration Shell.\n   *\n   * @remarks\n   * Used as default.\n   */\n  defaultThumbnail: Resource | null;\n\n  /**\n   * Yield from {@link specificAssetIds} if it is set, or yield nothing.\n   */\n  *overSpecificAssetIdsOrEmpty(): IterableIterator<SpecificAssetId> {\n    if (this.specificAssetIds !== null) {\n      yield* this.specificAssetIds;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.specificAssetIds !== null) {\n      yield* this.specificAssetIds;\n    }\n\n    if (this.defaultThumbnail !== null) {\n      yield this.defaultThumbnail;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.specificAssetIds !== null) {\n      for (const anItem of this.specificAssetIds) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.defaultThumbnail !== null) {\n      yield this.defaultThumbnail;\n\n      yield* this.defaultThumbnail.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitAssetInformation(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitAssetInformationWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformAssetInformation(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformAssetInformationWithContext(this, context);\n  }\n\n  constructor(\n    assetKind: AssetKind,\n    globalAssetId: string | null = null,\n    specificAssetIds: Array<SpecificAssetId> | null = null,\n    assetType: string | null = null,\n    defaultThumbnail: Resource | null = null\n  ) {\n    super();\n    this.assetKind = assetKind;\n    this.globalAssetId = globalAssetId;\n    this.specificAssetIds = specificAssetIds;\n    this.assetType = assetType;\n    this.defaultThumbnail = defaultThumbnail;\n  }\n}\n\n/**\n * Resource represents an address to a file (a locator). The value is an URI that\n * can represent an absolute or relative path\n */\nexport class Resource extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>5; // Resource\n  }\n\n  /**\n   * Path and name of the resource (with file extension).\n   *\n   * @remarks\n   * The path can be absolute or relative.\n   */\n  path: string;\n\n  /**\n   * Content type of the content of the file.\n   *\n   * @remarks\n   * The content type states which file extensions the file can have.\n   */\n  contentType: string | null;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitResource(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitResourceWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformResource(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformResourceWithContext(this, context);\n  }\n\n  constructor(path: string, contentType: string | null = null) {\n    super();\n    this.path = path;\n    this.contentType = contentType;\n  }\n}\n\n/**\n * Enumeration for denoting whether an asset is a type asset or an instance asset.\n */\nexport enum AssetKind {\n  /**\n   * Type asset\n   */\n  Type = 0,\n  /**\n   * Instance asset\n   */\n  Instance,\n  /**\n   * Neither a type asset nor an instance asset\n   */\n  NotApplicable\n}\n\n/**\n * Iterate over the literals of {@link AssetKind}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overAssetKind(): IterableIterator<AssetKind> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <AssetKind>0; // Type\n  yield <AssetKind>1; // Instance\n  yield <AssetKind>2; // NotApplicable\n}\n\n/**\n * A specific asset ID describes a generic supplementary identifying attribute of the\n * asset.\n *\n * @remarks\n * The specific asset ID is not necessarily globally unique.\n *\n * Constraint `AASd-133`:\n * {@link SpecificAssetId.externalSubjectId} shall be an external reference,\n * i.e. {@link Reference.type} = {@link ReferenceTypes.ExternalReference}.\n */\nexport class SpecificAssetId extends Class implements IHasSemantics {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>6; // SpecificAssetId\n  }\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Name of the identifier\n   */\n  name: string;\n\n  /**\n   * The value of the specific asset identifier with the corresponding name.\n   */\n  value: string;\n\n  /**\n   * The (external) subject the key belongs to or has meaning to.\n   *\n   * @remarks\n   * **Note**:\n   * This is a global reference.\n   */\n  externalSubjectId: Reference | null;\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.externalSubjectId !== null) {\n      yield this.externalSubjectId;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const anItem of this.supplementalSemanticIds) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.externalSubjectId !== null) {\n      yield this.externalSubjectId;\n\n      yield* this.externalSubjectId.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitSpecificAssetId(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitSpecificAssetIdWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformSpecificAssetId(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformSpecificAssetIdWithContext(this, context);\n  }\n\n  constructor(\n    name: string,\n    value: string,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    externalSubjectId: Reference | null = null\n  ) {\n    super();\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.name = name;\n    this.value = value;\n    this.externalSubjectId = externalSubjectId;\n  }\n}\n\n/**\n * A submodel defines a specific aspect of the asset represented by the AAS.\n *\n * @remarks\n * A submodel is used to structure the digital representation and technical\n * functionality of an Administration Shell into distinguishable parts. Each submodel\n * refers to a well-defined domain or subject matter. Submodels can become\n * standardized and, thus, become submodels templates.\n */\nexport class Submodel\n  extends Class\n  implements\n    IIdentifiable,\n    IHasKind,\n    IHasSemantics,\n    IQualifiable,\n    IHasDataSpecification\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>7; // Submodel\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Administrative information of an identifiable element.\n   *\n   * @remarks\n   * **Note**:\n   * Some of the administrative information like the version number might need to\n   * be part of the identification.\n   */\n  administration: AdministrativeInformation | null;\n\n  /**\n   * The globally unique identification of the element.\n   */\n  id: string;\n\n  /**\n   * Kind of the element: either type or instance.\n   *\n   * @remarks\n   * Default: {@link ModellingKind.Instance}\n   */\n  kind: ModellingKind | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * A submodel consists of zero or more submodel elements.\n   */\n  submodelElements: Array<ISubmodelElement> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link submodelElements} if it is set, or yield nothing.\n   */\n  *overSubmodelElementsOrEmpty(): IterableIterator<ISubmodelElement> {\n    if (this.submodelElements !== null) {\n      yield* this.submodelElements;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link kind} if set or the default value otherwise.\n   */\n  kindOrDefault(): ModellingKind {\n    return this.kind !== null ? this.kind : ModellingKind.Instance;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.submodelElements !== null) {\n      yield* this.submodelElements;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n\n      yield* this.administration.descend();\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.submodelElements !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.submodelElements) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitSubmodel(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitSubmodelWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformSubmodel(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformSubmodelWithContext(this, context);\n  }\n\n  constructor(\n    id: string,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    administration: AdministrativeInformation | null = null,\n    kind: ModellingKind | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    submodelElements: Array<ISubmodelElement> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.id = id;\n    this.administration = administration;\n    this.kind = kind;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.submodelElements = submodelElements;\n  }\n}\n\n/**\n * A submodel element is an element suitable for the description and differentiation of\n * assets.\n *\n * @remarks\n * It is recommended to add a {@link IHasSemantics.semanticId} to a submodel element.\n *\n * Constraint `AASd-129`:\n * If any {@link Qualifier.kind} value of {@link qualifiers} (attribute qualifier\n * inherited via Qualifiable) is equal to {@link QualifierKind.TemplateQualifier}\n * then the submodel element shall be part of a submodel template, i.e.\n * a Submodel with {@link Submodel.kind} (attribute kind inherited via\n * {@link IHasKind}) value is equal to {@link ModellingKind.Template}.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ISubmodelElement\n  extends IReferable,\n    IHasSemantics,\n    IQualifiable,\n    IHasDataSpecification {\n  // Intentionally empty.\n}\n\n/**\n * A relationship element is used to define a relationship between two elements\n * being either referable (model reference) or external (global reference).\n */\nexport interface IRelationshipElement extends ISubmodelElement {\n  /**\n   * Reference to the first element in the relationship taking the role of the subject.\n   */\n  first: Reference;\n\n  /**\n   * Reference to the second element in the relationship taking the role of the object.\n   */\n  second: Reference;\n}\n\n/**\n * A relationship element is used to define a relationship between two elements\n * being either referable (model reference) or external (global reference).\n */\nexport class RelationshipElement extends Class implements IRelationshipElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>8; // RelationshipElement\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Reference to the first element in the relationship taking the role of the subject.\n   */\n  first: Reference;\n\n  /**\n   * Reference to the second element in the relationship taking the role of the object.\n   */\n  second: Reference;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    yield this.first;\n\n    yield this.second;\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    yield this.first;\n\n    yield* this.first.descend();\n\n    yield this.second;\n\n    yield* this.second.descend();\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitRelationshipElement(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitRelationshipElementWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformRelationshipElement(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformRelationshipElementWithContext(this, context);\n  }\n\n  constructor(\n    first: Reference,\n    second: Reference,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.first = first;\n    this.second = second;\n  }\n}\n\n/**\n * Enumeration of all possible elements of a {@link SubmodelElementList}.\n */\nexport enum AasSubmodelElements {\n  AnnotatedRelationshipElement = 0,\n  BasicEventElement,\n  Blob,\n  Capability,\n  DataElement,\n  Entity,\n  EventElement,\n  File,\n  MultiLanguageProperty,\n  Operation,\n  Property,\n  Range,\n  ReferenceElement,\n  RelationshipElement,\n  SubmodelElement,\n  SubmodelElementList,\n  SubmodelElementCollection\n}\n\n/**\n * Iterate over the literals of {@link AasSubmodelElements}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overAasSubmodelElements(): IterableIterator<AasSubmodelElements> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <AasSubmodelElements>0; // AnnotatedRelationshipElement\n  yield <AasSubmodelElements>1; // BasicEventElement\n  yield <AasSubmodelElements>2; // Blob\n  yield <AasSubmodelElements>3; // Capability\n  yield <AasSubmodelElements>4; // DataElement\n  yield <AasSubmodelElements>5; // Entity\n  yield <AasSubmodelElements>6; // EventElement\n  yield <AasSubmodelElements>7; // File\n  yield <AasSubmodelElements>8; // MultiLanguageProperty\n  yield <AasSubmodelElements>9; // Operation\n  yield <AasSubmodelElements>10; // Property\n  yield <AasSubmodelElements>11; // Range\n  yield <AasSubmodelElements>12; // ReferenceElement\n  yield <AasSubmodelElements>13; // RelationshipElement\n  yield <AasSubmodelElements>14; // SubmodelElement\n  yield <AasSubmodelElements>15; // SubmodelElementList\n  yield <AasSubmodelElements>16; // SubmodelElementCollection\n}\n\n/**\n * A submodel element list is an ordered list of submodel elements.\n *\n * @remarks\n * The numbering starts with zero (0).\n *\n * Constraint `AASd-107`:\n * If a first level child element in a {@link SubmodelElementList} has\n * a {@link IHasSemantics.semanticId} it\n * shall be identical to {@link SubmodelElementList.semanticIdListElement}.\n *\n * Constraint `AASd-114`:\n * If two first level child elements in a {@link SubmodelElementList} have\n * a {@link IHasSemantics.semanticId} then they shall be identical.\n *\n * Constraint `AASd-115`:\n * If a first level child element in a {@link SubmodelElementList} does not\n * specify a {@link IHasSemantics.semanticId} then the value is assumed to be\n * identical to {@link SubmodelElementList.semanticIdListElement}.\n *\n * Constraint `AASd-120`:\n * The {@link SubmodelElementList.idShort} of a {@link ISubmodelElement} being a direct child of a\n * {@link SubmodelElementList} shall not be specified.\n *\n * Constraint `AASd-108`:\n * All first level child elements in a {@link SubmodelElementList} shall have\n * the same submodel element type as specified in {@link SubmodelElementList.typeValueListElement}.\n *\n * Constraint `AASd-109`:\n * If {@link SubmodelElementList.typeValueListElement} is equal to\n * {@link AasSubmodelElements.Property} or\n * {@link AasSubmodelElements.Range}\n * {@link SubmodelElementList.valueTypeListElement} shall be set and all first\n * level child elements in the {@link SubmodelElementList} shall have\n * the value type as specified in {@link SubmodelElementList.valueTypeListElement}.\n */\nexport class SubmodelElementList extends Class implements ISubmodelElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>9; // SubmodelElementList\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Defines whether order in list is relevant. If {@link orderRelevant} = `False`\n   * then the list is representing a set or a bag.\n   *\n   * @remarks\n   * Default: `True`\n   */\n  orderRelevant: boolean | null;\n\n  /**\n   * Semantic ID the submodel elements contained in the list match to.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticIdListElement: Reference | null;\n\n  /**\n   * The submodel element type of the submodel elements contained in the list.\n   */\n  typeValueListElement: AasSubmodelElements;\n\n  /**\n   * The value type of the submodel element contained in the list.\n   */\n  valueTypeListElement: DataTypeDefXsd | null;\n\n  /**\n   * Submodel element contained in the list.\n   *\n   * @remarks\n   * The list is ordered.\n   */\n  value: Array<ISubmodelElement> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link value} if it is set, or yield nothing.\n   */\n  *overValueOrEmpty(): IterableIterator<ISubmodelElement> {\n    if (this.value !== null) {\n      yield* this.value;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link orderRelevant} if set or the default value otherwise.\n   */\n  orderRelevantOrDefault(): boolean {\n    return this.orderRelevant !== null ? this.orderRelevant : true;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.semanticIdListElement !== null) {\n      yield this.semanticIdListElement;\n    }\n\n    if (this.value !== null) {\n      yield* this.value;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticIdListElement !== null) {\n      yield this.semanticIdListElement;\n\n      yield* this.semanticIdListElement.descend();\n    }\n\n    if (this.value !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.value) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitSubmodelElementList(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitSubmodelElementListWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformSubmodelElementList(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformSubmodelElementListWithContext(this, context);\n  }\n\n  constructor(\n    typeValueListElement: AasSubmodelElements,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    orderRelevant: boolean | null = null,\n    semanticIdListElement: Reference | null = null,\n    valueTypeListElement: DataTypeDefXsd | null = null,\n    value: Array<ISubmodelElement> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.typeValueListElement = typeValueListElement;\n    this.orderRelevant = orderRelevant;\n    this.semanticIdListElement = semanticIdListElement;\n    this.valueTypeListElement = valueTypeListElement;\n    this.value = value;\n  }\n}\n\n/**\n * A submodel element collection is a kind of struct, i.e. a a logical encapsulation\n * of multiple named values. It has a fixed number of submodel elements.\n */\nexport class SubmodelElementCollection extends Class implements ISubmodelElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>10; // SubmodelElementCollection\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Submodel element contained in the collection.\n   */\n  value: Array<ISubmodelElement> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link value} if it is set, or yield nothing.\n   */\n  *overValueOrEmpty(): IterableIterator<ISubmodelElement> {\n    if (this.value !== null) {\n      yield* this.value;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.value !== null) {\n      yield* this.value;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.value !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.value) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitSubmodelElementCollection(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitSubmodelElementCollectionWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformSubmodelElementCollection(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformSubmodelElementCollectionWithContext(this, context);\n  }\n\n  constructor(\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: Array<ISubmodelElement> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.value = value;\n  }\n}\n\n/**\n * A data element is a submodel element that is not further composed out of\n * other submodel elements.\n *\n * @remarks\n * A data element is a submodel element that has a value. The type of value differs\n * for different subtypes of data elements.\n *\n * Constraint `AASd-090`:\n * For data elements {@link category} shall be one of the following\n * values: `CONSTANT`, `PARAMETER` or `VARIABLE`.\n *\n * Default: `VARIABLE`\n */\nexport interface IDataElement extends ISubmodelElement {\n  categoryOrDefault(): string;\n}\n\n/**\n * A property is a data element that has a single value.\n *\n * Constraint `AASd-007`:\n * If both, the {@link Property.value} and the {@link Property.valueId} are\n * present then the value of {@link Property.value} needs to be identical to\n * the value of the referenced coded value in {@link Property.valueId}.\n */\nexport class Property extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>11; // Property\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Data type of the value\n   */\n  valueType: DataTypeDefXsd;\n\n  /**\n   * The value of the property instance.\n   */\n  value: string | null;\n\n  /**\n   * Reference to the global unique ID of a coded value.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  valueId: Reference | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n\n      yield* this.valueId.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitProperty(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitPropertyWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformProperty(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformPropertyWithContext(this, context);\n  }\n\n  constructor(\n    valueType: DataTypeDefXsd,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: string | null = null,\n    valueId: Reference | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.valueType = valueType;\n    this.value = value;\n    this.valueId = valueId;\n  }\n}\n\n/**\n * A property is a data element that has a multi-language value.\n *\n * Constraint `AASd-012`:\n * If both the {@link MultiLanguageProperty.value} and the {@link MultiLanguageProperty.valueId} are present then for each\n * string in a specific language the meaning must be the same as specified in\n * {@link MultiLanguageProperty.valueId}.\n */\nexport class MultiLanguageProperty extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>12; // MultiLanguageProperty\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * The value of the property instance.\n   */\n  value: Array<LangStringTextType> | null;\n\n  /**\n   * Reference to the global unique ID of a coded value.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  valueId: Reference | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link value} if it is set, or yield nothing.\n   */\n  *overValueOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.value !== null) {\n      yield* this.value;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.value !== null) {\n      yield* this.value;\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.value !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.value) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.valueId !== null) {\n      yield this.valueId;\n\n      yield* this.valueId.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitMultiLanguageProperty(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitMultiLanguagePropertyWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformMultiLanguageProperty(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformMultiLanguagePropertyWithContext(this, context);\n  }\n\n  constructor(\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: Array<LangStringTextType> | null = null,\n    valueId: Reference | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.value = value;\n    this.valueId = valueId;\n  }\n}\n\n/**\n * A range data element is a data element that defines a range with min and max.\n */\nexport class Range extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>13; // Range\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Data type of the min und max\n   */\n  valueType: DataTypeDefXsd;\n\n  /**\n   * The minimum value of the range.\n   *\n   * @remarks\n   * If the min value is missing, then the value is assumed to be negative infinite.\n   */\n  min: string | null;\n\n  /**\n   * The maximum value of the range.\n   *\n   * @remarks\n   * If the max value is missing, then the value is assumed to be positive infinite.\n   */\n  max: string | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitRange(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitRangeWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformRange(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformRangeWithContext(this, context);\n  }\n\n  constructor(\n    valueType: DataTypeDefXsd,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    min: string | null = null,\n    max: string | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.valueType = valueType;\n    this.min = min;\n    this.max = max;\n  }\n}\n\n/**\n * A reference element is a data element that defines a logical reference to another\n * element within the same or another AAS or a reference to an external object or\n * entity.\n */\nexport class ReferenceElement extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>14; // ReferenceElement\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Global reference to an external object or entity or a logical reference to\n   * another element within the same or another AAS (i.e. a model reference to\n   * a Referable).\n   */\n  value: Reference | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.value !== null) {\n      yield this.value;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.value !== null) {\n      yield this.value;\n\n      yield* this.value.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitReferenceElement(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitReferenceElementWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformReferenceElement(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformReferenceElementWithContext(this, context);\n  }\n\n  constructor(\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: Reference | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.value = value;\n  }\n}\n\n/**\n * A {@link Blob} is a data element that represents a file that is contained with its\n * source code in the value attribute.\n */\nexport class Blob extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>15; // Blob\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * The value of the {@link Blob} instance of a blob data element.\n   *\n   * @remarks\n   * **Note**:\n   * In contrast to the file property the file content is stored directly as value\n   * in the {@link Blob} data element.\n   */\n  value: Uint8Array | null;\n\n  /**\n   * Content type of the content of the {@link Blob}.\n   *\n   * @remarks\n   * The content type (MIME type) states which file extensions the file can have.\n   *\n   * Valid values are content types like e.g. `application/json`, `application/xls`,\n   * `image/jpg`.\n   *\n   * The allowed values are defined as in RFC2046.\n   */\n  contentType: string;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitBlob(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitBlobWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformBlob(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformBlobWithContext(this, context);\n  }\n\n  constructor(\n    contentType: string,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: Uint8Array | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.contentType = contentType;\n    this.value = value;\n  }\n}\n\n/**\n * A File is a data element that represents an address to a file (a locator).\n *\n * @remarks\n * The value is an URI that can represent an absolute or relative path.\n */\nexport class File extends Class implements IDataElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>16; // File\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Path and name of the referenced file (with file extension).\n   *\n   * @remarks\n   * The path can be absolute or relative.\n   */\n  value: string | null;\n\n  /**\n   * Content type of the content of the file.\n   *\n   * @remarks\n   * The content type states which file extensions the file can have.\n   */\n  contentType: string;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * @returns {@link category} if set or the default value otherwise.\n   */\n  categoryOrDefault(): string {\n    return this.category !== null ? this.category : \"VARIABLE\";\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitFile(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitFileWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformFile(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformFileWithContext(this, context);\n  }\n\n  constructor(\n    contentType: string,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    value: string | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.contentType = contentType;\n    this.value = value;\n  }\n}\n\n/**\n * An annotated relationship element is a relationship element that can be annotated\n * with additional data elements.\n */\nexport class AnnotatedRelationshipElement\n  extends Class\n  implements IRelationshipElement\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>17; // AnnotatedRelationshipElement\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Reference to the first element in the relationship taking the role of the subject.\n   */\n  first: Reference;\n\n  /**\n   * Reference to the second element in the relationship taking the role of the object.\n   */\n  second: Reference;\n\n  /**\n   * A data element that represents an annotation that holds for the relationship\n   * between the two elements\n   */\n  annotations: Array<IDataElement> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link annotations} if it is set, or yield nothing.\n   */\n  *overAnnotationsOrEmpty(): IterableIterator<IDataElement> {\n    if (this.annotations !== null) {\n      yield* this.annotations;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    yield this.first;\n\n    yield this.second;\n\n    if (this.annotations !== null) {\n      yield* this.annotations;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    yield this.first;\n\n    yield* this.first.descend();\n\n    yield this.second;\n\n    yield* this.second.descend();\n\n    if (this.annotations !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.annotations) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitAnnotatedRelationshipElement(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitAnnotatedRelationshipElementWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformAnnotatedRelationshipElement(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformAnnotatedRelationshipElementWithContext(this, context);\n  }\n\n  constructor(\n    first: Reference,\n    second: Reference,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    annotations: Array<IDataElement> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.first = first;\n    this.second = second;\n    this.annotations = annotations;\n  }\n}\n\n/**\n * An entity is a submodel element that is used to model entities.\n *\n * Constraint `AASd-014`:\n * Either the attribute {@link Entity.globalAssetId} or {@link Entity.specificAssetIds}\n * of an {@link Entity} must be set if {@link Entity.entityType} is set to\n * {@link EntityType.SelfManagedEntity}. They are not existing otherwise.\n */\nexport class Entity extends Class implements ISubmodelElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>18; // Entity\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Describes statements applicable to the entity by a set of submodel elements,\n   * typically with a qualified value.\n   */\n  statements: Array<ISubmodelElement> | null;\n\n  /**\n   * Describes whether the entity is a co-managed entity or a self-managed entity.\n   */\n  entityType: EntityType;\n\n  /**\n   * Global identifier of the asset the entity is representing.\n   *\n   * @remarks\n   * **Note**:\n   * This is a global reference.\n   */\n  globalAssetId: string | null;\n\n  /**\n   * Reference to a specific asset ID representing a supplementary identifier\n   * of the asset represented by the Asset Administration Shell.\n   */\n  specificAssetIds: Array<SpecificAssetId> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link statements} if it is set, or yield nothing.\n   */\n  *overStatementsOrEmpty(): IterableIterator<ISubmodelElement> {\n    if (this.statements !== null) {\n      yield* this.statements;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link specificAssetIds} if it is set, or yield nothing.\n   */\n  *overSpecificAssetIdsOrEmpty(): IterableIterator<SpecificAssetId> {\n    if (this.specificAssetIds !== null) {\n      yield* this.specificAssetIds;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.statements !== null) {\n      yield* this.statements;\n    }\n\n    if (this.specificAssetIds !== null) {\n      yield* this.specificAssetIds;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.statements !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.statements) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.specificAssetIds !== null) {\n      for (const yetYetYetYetYetYetAnotherItem of this.specificAssetIds) {\n        yield yetYetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitEntity(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitEntityWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformEntity(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformEntityWithContext(this, context);\n  }\n\n  constructor(\n    entityType: EntityType,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    statements: Array<ISubmodelElement> | null = null,\n    globalAssetId: string | null = null,\n    specificAssetIds: Array<SpecificAssetId> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.statements = statements;\n    this.entityType = entityType;\n    this.globalAssetId = globalAssetId;\n    this.specificAssetIds = specificAssetIds;\n  }\n}\n\n/**\n * Enumeration for denoting whether an entity is a self-managed entity or a co-managed\n * entity.\n */\nexport enum EntityType {\n  /**\n   * For co-managed entities there is no separate AAS. Co-managed entities need to be\n   * part of a self-managed entity.\n   */\n  CoManagedEntity = 0,\n  /**\n   * Self-Managed Entities have their own AAS but can be part of the bill of material of\n   * a composite self-managed entity.\n   *\n   * @remarks\n   *\n   * The asset of an I4.0 Component is a self-managed entity per definition.\n   */\n  SelfManagedEntity\n}\n\n/**\n * Iterate over the literals of {@link EntityType}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overEntityType(): IterableIterator<EntityType> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <EntityType>0; // CoManagedEntity\n  yield <EntityType>1; // SelfManagedEntity\n}\n\n/**\n * Direction\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\nexport enum Direction {\n  /**\n   * Input direction.\n   */\n  Input = 0,\n  /**\n   * Output direction\n   */\n  Output\n}\n\n/**\n * Iterate over the literals of {@link Direction}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overDirection(): IterableIterator<Direction> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <Direction>0; // Input\n  yield <Direction>1; // Output\n}\n\n/**\n * State of an event\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\nexport enum StateOfEvent {\n  /**\n   * Event is on\n   */\n  On = 0,\n  /**\n   * Event is off.\n   */\n  Off\n}\n\n/**\n * Iterate over the literals of {@link StateOfEvent}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overStateOfEvent(): IterableIterator<StateOfEvent> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <StateOfEvent>0; // On\n  yield <StateOfEvent>1; // Off\n}\n\n/**\n * Defines the necessary information of an event instance sent out or received.\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\nexport class EventPayload extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>19; // EventPayload\n  }\n\n  /**\n   * Reference to the source event element, including identification of\n   * {@link AssetAdministrationShell}, {@link Submodel},\n   * {@link ISubmodelElement}'s.\n   */\n  source: Reference;\n\n  /**\n   * {@link IHasSemantics.semanticId} of the source event element, if available\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  sourceSemanticId: Reference | null;\n\n  /**\n   * Reference to the referable, which defines the scope of the event.\n   *\n   * @remarks\n   * Can be {@link AssetAdministrationShell}, {@link Submodel} or\n   * {@link ISubmodelElement}.\n   */\n  observableReference: Reference;\n\n  /**\n   * {@link IHasSemantics.semanticId} of the referable which defines the scope of\n   * the event, if available.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  observableSemanticId: Reference | null;\n\n  /**\n   * Information for the outer message infrastructure for scheduling the event to\n   * the respective communication channel.\n   */\n  topic: string | null;\n\n  /**\n   * Subject, who/which initiated the creation.\n   *\n   * @remarks\n   * **Note**:\n   * This is an external reference.\n   */\n  subjectId: Reference | null;\n\n  /**\n   * Timestamp in UTC, when this event was triggered.\n   */\n  timeStamp: string;\n\n  /**\n   * Event specific payload.\n   */\n  payload: Uint8Array | null;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield this.source;\n\n    if (this.sourceSemanticId !== null) {\n      yield this.sourceSemanticId;\n    }\n\n    yield this.observableReference;\n\n    if (this.observableSemanticId !== null) {\n      yield this.observableSemanticId;\n    }\n\n    if (this.subjectId !== null) {\n      yield this.subjectId;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    yield this.source;\n\n    yield* this.source.descend();\n\n    if (this.sourceSemanticId !== null) {\n      yield this.sourceSemanticId;\n\n      yield* this.sourceSemanticId.descend();\n    }\n\n    yield this.observableReference;\n\n    yield* this.observableReference.descend();\n\n    if (this.observableSemanticId !== null) {\n      yield this.observableSemanticId;\n\n      yield* this.observableSemanticId.descend();\n    }\n\n    if (this.subjectId !== null) {\n      yield this.subjectId;\n\n      yield* this.subjectId.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitEventPayload(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitEventPayloadWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformEventPayload(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformEventPayloadWithContext(this, context);\n  }\n\n  constructor(\n    source: Reference,\n    observableReference: Reference,\n    timeStamp: string,\n    sourceSemanticId: Reference | null = null,\n    observableSemanticId: Reference | null = null,\n    topic: string | null = null,\n    subjectId: Reference | null = null,\n    payload: Uint8Array | null = null\n  ) {\n    super();\n    this.source = source;\n    this.observableReference = observableReference;\n    this.timeStamp = timeStamp;\n    this.sourceSemanticId = sourceSemanticId;\n    this.observableSemanticId = observableSemanticId;\n    this.topic = topic;\n    this.subjectId = subjectId;\n    this.payload = payload;\n  }\n}\n\n/**\n * An event element.\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IEventElement extends ISubmodelElement {\n  // Intentionally empty.\n}\n\n/**\n * A basic event element.\n *\n * @remarks\n * **Note**:\n * This element is experimental and therefore may be subject to change or may be\n * removed completely in future versions of the meta-model.\n */\nexport class BasicEventElement extends Class implements IEventElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>20; // BasicEventElement\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Reference to the {@link IReferable}, which defines the scope of the event.\n   * Can be {@link AssetAdministrationShell}, {@link Submodel}, or\n   * {@link ISubmodelElement}.\n   *\n   * @remarks\n   * Reference to a referable, e.g., a data element or\n   * a submodel, that is being observed.\n   */\n  observed: Reference;\n\n  /**\n   * Direction of event.\n   *\n   * @remarks\n   * Can be `{ Input, Output }`.\n   */\n  direction: Direction;\n\n  /**\n   * State of event.\n   *\n   * @remarks\n   * Can be `{ On, Off }`.\n   */\n  state: StateOfEvent;\n\n  /**\n   * Information for the outer message infrastructure for scheduling the event to the\n   * respective communication channel.\n   */\n  messageTopic: string | null;\n\n  /**\n   * Information, which outer message infrastructure shall handle messages for\n   * the {@link IEventElement}. Refers to a {@link Submodel},\n   * {@link SubmodelElementList}, {@link SubmodelElementCollection} or\n   * {@link Entity}, which contains {@link IDataElement}'s describing\n   * the proprietary specification for the message broker.\n   *\n   * @remarks\n   * **Note**:\n   * For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this\n   * proprietary specification could be standardized by having respective Submodels.\n   */\n  messageBroker: Reference | null;\n\n  /**\n   * Timestamp in UTC, when the last event was received (input direction) or sent\n   * (output direction).\n   */\n  lastUpdate: string | null;\n\n  /**\n   * For input direction, reports on the maximum frequency, the software entity behind\n   * the respective Referable can handle input events.\n   *\n   * @remarks\n   * For output events, specifies the maximum frequency of outputting this event to\n   * an outer infrastructure.\n   *\n   * Might be not specified, that is, there is no minimum interval.\n   */\n  minInterval: string | null;\n\n  /**\n   * For input direction: not applicable.\n   *\n   * @remarks\n   * For output direction: maximum interval in time, the respective Referable shall send\n   * an update of the status of the event, even if no other trigger condition for\n   * the event was not met.\n   *\n   * Might be not specified, that is, there is no maximum interval\n   */\n  maxInterval: string | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    yield this.observed;\n\n    if (this.messageBroker !== null) {\n      yield this.messageBroker;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    yield this.observed;\n\n    yield* this.observed.descend();\n\n    if (this.messageBroker !== null) {\n      yield this.messageBroker;\n\n      yield* this.messageBroker.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitBasicEventElement(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitBasicEventElementWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformBasicEventElement(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformBasicEventElementWithContext(this, context);\n  }\n\n  constructor(\n    observed: Reference,\n    direction: Direction,\n    state: StateOfEvent,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    messageTopic: string | null = null,\n    messageBroker: Reference | null = null,\n    lastUpdate: string | null = null,\n    minInterval: string | null = null,\n    maxInterval: string | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.observed = observed;\n    this.direction = direction;\n    this.state = state;\n    this.messageTopic = messageTopic;\n    this.messageBroker = messageBroker;\n    this.lastUpdate = lastUpdate;\n    this.minInterval = minInterval;\n    this.maxInterval = maxInterval;\n  }\n}\n\n/**\n * An operation is a submodel element with input and output variables.\n *\n * Constraint `AASd-134`:\n * For an {@link Operation} the {@link IReferable.idShort} of all\n * {@link OperationVariable.value}'s in\n * {@link Operation.inputVariables}, {@link Operation.outputVariables}\n * and {@link Operation.inoutputVariables} shall be unique.\n */\nexport class Operation extends Class implements ISubmodelElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>21; // Operation\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Input parameter of the operation.\n   */\n  inputVariables: Array<OperationVariable> | null;\n\n  /**\n   * Output parameter of the operation.\n   */\n  outputVariables: Array<OperationVariable> | null;\n\n  /**\n   * Parameter that is input and output of the operation.\n   */\n  inoutputVariables: Array<OperationVariable> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link inputVariables} if it is set, or yield nothing.\n   */\n  *overInputVariablesOrEmpty(): IterableIterator<OperationVariable> {\n    if (this.inputVariables !== null) {\n      yield* this.inputVariables;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link outputVariables} if it is set, or yield nothing.\n   */\n  *overOutputVariablesOrEmpty(): IterableIterator<OperationVariable> {\n    if (this.outputVariables !== null) {\n      yield* this.outputVariables;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link inoutputVariables} if it is set, or yield nothing.\n   */\n  *overInoutputVariablesOrEmpty(): IterableIterator<OperationVariable> {\n    if (this.inoutputVariables !== null) {\n      yield* this.inoutputVariables;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.inputVariables !== null) {\n      yield* this.inputVariables;\n    }\n\n    if (this.outputVariables !== null) {\n      yield* this.outputVariables;\n    }\n\n    if (this.inoutputVariables !== null) {\n      yield* this.inoutputVariables;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.inputVariables !== null) {\n      for (const yetYetYetYetYetAnotherItem of this.inputVariables) {\n        yield yetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.outputVariables !== null) {\n      for (const yetYetYetYetYetYetAnotherItem of this.outputVariables) {\n        yield yetYetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.inoutputVariables !== null) {\n      for (const yetYetYetYetYetYetYetAnotherItem of this.inoutputVariables) {\n        yield yetYetYetYetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitOperation(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitOperationWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformOperation(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformOperationWithContext(this, context);\n  }\n\n  constructor(\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    inputVariables: Array<OperationVariable> | null = null,\n    outputVariables: Array<OperationVariable> | null = null,\n    inoutputVariables: Array<OperationVariable> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.inputVariables = inputVariables;\n    this.outputVariables = outputVariables;\n    this.inoutputVariables = inoutputVariables;\n  }\n}\n\n/**\n * The value of an operation variable is a submodel element that is used as input\n * and/or output variable of an operation.\n */\nexport class OperationVariable extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>22; // OperationVariable\n  }\n\n  /**\n   * Describes an argument or result of an operation via a submodel element\n   */\n  value: ISubmodelElement;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield this.value;\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    yield this.value;\n\n    yield* this.value.descend();\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitOperationVariable(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitOperationVariableWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformOperationVariable(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformOperationVariableWithContext(this, context);\n  }\n\n  constructor(value: ISubmodelElement) {\n    super();\n    this.value = value;\n  }\n}\n\n/**\n * A capability is the implementation-independent description of the potential of an\n * asset to achieve a certain effect in the physical or virtual world.\n *\n * @remarks\n * **Note**:\n * The {@link Capability.semanticId} of a capability is typically an ontology.\n * Thus, reasoning on capabilities is enabled.\n */\nexport class Capability extends Class implements ISubmodelElement {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>23; // Capability\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Identifier of the semantic definition of the element. It is called semantic ID\n   * of the element or also main semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  semanticId: Reference | null;\n\n  /**\n   * Identifier of a supplemental semantic definition of the element.\n   * It is called supplemental semantic ID of the element.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  supplementalSemanticIds: Array<Reference> | null;\n\n  /**\n   * Additional qualification of a qualifiable element.\n   *\n   * Constraint `AASd-021`:\n   * Every qualifiable can only have one qualifier with the same\n   * {@link Qualifier.type}.\n   */\n  qualifiers: Array<Qualifier> | null;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.\n   */\n  *overSupplementalSemanticIdsOrEmpty(): IterableIterator<Reference> {\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link qualifiers} if it is set, or yield nothing.\n   */\n  *overQualifiersOrEmpty(): IterableIterator<Qualifier> {\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      yield* this.supplementalSemanticIds;\n    }\n\n    if (this.qualifiers !== null) {\n      yield* this.qualifiers;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.semanticId !== null) {\n      yield this.semanticId;\n\n      yield* this.semanticId.descend();\n    }\n\n    if (this.supplementalSemanticIds !== null) {\n      for (const yetYetAnotherItem of this.supplementalSemanticIds) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.qualifiers !== null) {\n      for (const yetYetYetAnotherItem of this.qualifiers) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetYetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetYetYetAnotherItem;\n\n        yield* yetYetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitCapability(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitCapabilityWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformCapability(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformCapabilityWithContext(this, context);\n  }\n\n  constructor(\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    semanticId: Reference | null = null,\n    supplementalSemanticIds: Array<Reference> | null = null,\n    qualifiers: Array<Qualifier> | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.semanticId = semanticId;\n    this.supplementalSemanticIds = supplementalSemanticIds;\n    this.qualifiers = qualifiers;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n  }\n}\n\n/**\n * The semantics of a property or other elements that may have a semantic description\n * is defined by a concept description.\n *\n * @remarks\n * The description of the concept should follow a standardized schema (realized as\n * data specification template).\n *\n * Constraint `AASc-3a-004`:\n * For a {@link ConceptDescription} with {@link ConceptDescription.category} `PROPERTY` or\n * `VALUE` using data specification IEC61360,\n * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be\n * one of: `DATE`, `STRING`, `STRING_TRANSLATABLE`, `INTEGER_MEASURE`,\n * `INTEGER_COUNT`, `INTEGER_CURRENCY`, `REAL_MEASURE`, `REAL_COUNT`,\n * `REAL_CURRENCY`, `BOOLEAN`, `RATIONAL`, `RATIONAL_MEASURE`,\n * `TIME`, `TIMESTAMP`.\n *\n * **Note**:\n * Note: categories are deprecated since V3.0 of Part 1a of the document series\n * \"Details of the Asset Administration Shell\".\n *\n * Constraint `AASc-3a-005`:\n * For a {@link ConceptDescription} with {@link ConceptDescription.category} `REFERENCE`\n * using data specification template IEC61360,\n * the {@link DataSpecificationIec61360.dataType} shall be\n * one of: `STRING`, `IRI`, `IRDI`.\n *\n * **Note**:\n * Note: categories are deprecated since V3.0 of Part 1a of the document series\n * \"Details of the Asset Administration Shell\".\n *\n * Constraint `AASc-3a-006`:\n * For a {@link ConceptDescription} with {@link ConceptDescription.category} `DOCUMENT`\n * using data specification IEC61360,\n * the {@link DataSpecificationIec61360.dataType} shall be one of `FILE`,\n * `BLOB`, `HTML`\n *\n * **Note**:\n * Categories are deprecated since V3.0 of Part 1a of the document series\n * \"Details of the Asset Administration Shell\".\n *\n * Constraint `AASc-3a-007`:\n * For a {@link ConceptDescription} with {@link ConceptDescription.category} `QUALIFIER_TYPE`\n * using data specification IEC61360,\n * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be\n * defined.\n *\n * **Note**:\n * Categories are deprecated since V3.0 of Part 1a of the document series\n * \"Details of the Asset Administration Shell\".\n *\n * Constraint `AASc-3a-008`:\n * For a {@link ConceptDescription} using data specification template IEC61360,\n * {@link DataSpecificationIec61360.definition} is mandatory and shall be\n * defined at least in English.\n *\n * Exception: The concept description describes a value, i.e.\n * {@link DataSpecificationIec61360.value} is defined.\n *\n * Constraint `AASc-3a-003`:\n * For a {@link ConceptDescription} using data specification template IEC61360,\n * referenced via {@link DataSpecificationIec61360.valueList}\n * {@link ValueReferencePair.valueId}\n * the {@link DataSpecificationIec61360.value} shall be set.\n */\nexport class ConceptDescription\n  extends Class\n  implements IIdentifiable, IHasDataSpecification\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>24; // ConceptDescription\n  }\n\n  /**\n   * An extension of the element.\n   */\n  extensions: Array<Extension> | null;\n\n  /**\n   * The category is a value that gives further meta information\n   * w.r.t. to the class of the element.\n   * It affects the expected existence of attributes and the applicability of\n   * constraints.\n   *\n   * @remarks\n   * **Note**:\n   * The category is not identical to the semantic definition\n   * ({@link IHasSemantics}) of an element. The category e.g. could denote that\n   * the element is a measurement value whereas the semantic definition of\n   * the element would denote that it is the measured temperature.\n   */\n  category: string | null;\n\n  /**\n   * In case of identifiables this attribute is a short name of the element.\n   * In case of referable this ID is an identifying string of the element within\n   * its name space.\n   *\n   * @remarks\n   * **Note**:\n   * In case the element is a property and the property has a semantic definition\n   * ({@link IHasSemantics.semanticId}) conformant to IEC61360\n   * the {@link IReferable.idShort} is typically identical to the short name in English.\n   */\n  idShort: string | null;\n\n  /**\n   * Display name. Can be provided in several languages.\n   */\n  displayName: Array<LangStringNameType> | null;\n\n  /**\n   * Description or comments on the element.\n   *\n   * @remarks\n   * The description can be provided in several languages.\n   *\n   * If no description is defined, then the definition of the concept\n   * description that defines the semantics of the element is used.\n   *\n   * Additional information can be provided, e.g., if the element is\n   * qualified and which qualifier types can be expected in which\n   * context or which additional data specification templates are\n   * provided.\n   */\n  description: Array<LangStringTextType> | null;\n\n  /**\n   * Administrative information of an identifiable element.\n   *\n   * @remarks\n   * **Note**:\n   * Some of the administrative information like the version number might need to\n   * be part of the identification.\n   */\n  administration: AdministrativeInformation | null;\n\n  /**\n   * The globally unique identification of the element.\n   */\n  id: string;\n\n  /**\n   * Embedded data specification.\n   */\n  embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null;\n\n  /**\n   * Reference to an external definition the concept is compatible to or was derived\n   * from.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   *\n   * **Note**:\n   * Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360\n   */\n  isCaseOf: Array<Reference> | null;\n\n  /**\n   * Yield from {@link extensions} if it is set, or yield nothing.\n   */\n  *overExtensionsOrEmpty(): IterableIterator<Extension> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link displayName} if it is set, or yield nothing.\n   */\n  *overDisplayNameOrEmpty(): IterableIterator<LangStringNameType> {\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link description} if it is set, or yield nothing.\n   */\n  *overDescriptionOrEmpty(): IterableIterator<LangStringTextType> {\n    if (this.description !== null) {\n      yield* this.description;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.\n   */\n  *overEmbeddedDataSpecificationsOrEmpty(): IterableIterator<EmbeddedDataSpecification> {\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link isCaseOf} if it is set, or yield nothing.\n   */\n  *overIsCaseOfOrEmpty(): IterableIterator<Reference> {\n    if (this.isCaseOf !== null) {\n      yield* this.isCaseOf;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      yield* this.extensions;\n    }\n\n    if (this.displayName !== null) {\n      yield* this.displayName;\n    }\n\n    if (this.description !== null) {\n      yield* this.description;\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      yield* this.embeddedDataSpecifications;\n    }\n\n    if (this.isCaseOf !== null) {\n      yield* this.isCaseOf;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.extensions !== null) {\n      for (const anItem of this.extensions) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.displayName !== null) {\n      for (const anotherItem of this.displayName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.description !== null) {\n      for (const yetAnotherItem of this.description) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.administration !== null) {\n      yield this.administration;\n\n      yield* this.administration.descend();\n    }\n\n    if (this.embeddedDataSpecifications !== null) {\n      for (const yetYetAnotherItem of this.embeddedDataSpecifications) {\n        yield yetYetAnotherItem;\n\n        yield* yetYetAnotherItem.descend();\n      }\n    }\n\n    if (this.isCaseOf !== null) {\n      for (const yetYetYetAnotherItem of this.isCaseOf) {\n        yield yetYetYetAnotherItem;\n\n        yield* yetYetYetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitConceptDescription(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitConceptDescriptionWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformConceptDescription(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformConceptDescriptionWithContext(this, context);\n  }\n\n  constructor(\n    id: string,\n    extensions: Array<Extension> | null = null,\n    category: string | null = null,\n    idShort: string | null = null,\n    displayName: Array<LangStringNameType> | null = null,\n    description: Array<LangStringTextType> | null = null,\n    administration: AdministrativeInformation | null = null,\n    embeddedDataSpecifications: Array<EmbeddedDataSpecification> | null = null,\n    isCaseOf: Array<Reference> | null = null\n  ) {\n    super();\n    this.extensions = extensions;\n    this.idShort = idShort;\n    this.displayName = displayName;\n    this.category = category;\n    this.description = description;\n    this.id = id;\n    this.administration = administration;\n    this.embeddedDataSpecifications = embeddedDataSpecifications;\n    this.isCaseOf = isCaseOf;\n  }\n}\n\n/**\n * Reference types\n */\nexport enum ReferenceTypes {\n  /**\n   * External reference.\n   */\n  ExternalReference = 0,\n  /**\n   * Model reference.\n   */\n  ModelReference\n}\n\n/**\n * Iterate over the literals of {@link ReferenceTypes}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overReferenceTypes(): IterableIterator<ReferenceTypes> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <ReferenceTypes>0; // ExternalReference\n  yield <ReferenceTypes>1; // ModelReference\n}\n\n/**\n * Reference to either a model element of the same or another AAS or to an external\n * entity.\n *\n * @remarks\n * A reference is an ordered list of keys.\n *\n * A model reference is an ordered list of keys, each key referencing an element. The\n * complete list of keys may for example be concatenated to a path that then gives\n * unique access to an element.\n *\n * An external reference is a reference to an external entity.\n *\n * Constraint `AASd-121`:\n * For {@link Reference}'s the value of {@link Key.type} of the first key of \"\n * {@link Reference.keys} shall be one of {@link constants!GLOBALLY_IDENTIFIABLES}.\n *\n * Constraint `AASd-122`:\n * For external references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the value\n * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of\n * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES}.\n *\n * Constraint `AASd-123`:\n * For model references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the value\n * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of\n * {@link constants!AAS_IDENTIFIABLES}.\n *\n * Constraint `AASd-124`:\n * For external references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the last\n * key of {@link Reference.keys} shall be either one of\n * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES} or one of\n * {@link constants!GENERIC_FRAGMENT_KEYS}.\n *\n * Constraint `AASd-125`:\n * For model references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more\n * than one key in {@link Reference.keys} the value of {@link Key.type}\n * of each of the keys following the first\n * key of {@link Reference.keys} shall be one of {@link constants!FRAGMENT_KEYS}.\n *\n * **Note**:\n * Constraint AASd-125 ensures that the shortest path is used.\n *\n * Constraint `AASd-126`:\n * For model references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more\n * than one key in {@link Reference.keys} the value of {@link Key.type}\n * of the last key in the reference key chain may be\n * one of {@link constants!GENERIC_FRAGMENT_KEYS} or no key at all\n * shall have a value out of {@link constants!GENERIC_FRAGMENT_KEYS}.\n *\n * Constraint `AASd-127`:\n * For model references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more\n * than one key in {@link Reference.keys} a key with {@link Key.type}\n * {@link KeyTypes.FragmentReference} shall be preceded by a key with\n * {@link Key.type} {@link KeyTypes.File} or {@link KeyTypes.Blob}. All other\n * AAS fragments, i.e. {@link Key.type} values\n * out of {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS}, do not support fragments.\n *\n * **Note**:\n * Which kind of fragments are supported depends on the content type and the\n * specification of allowed fragment identifiers for the corresponding resource\n * being referenced via the reference.\n *\n * Constraint `AASd-128`:\n * For model references, i.e. {@link Reference}'s with\n * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the\n * {@link Key.value} of a {@link Key} preceded by a {@link Key} with\n * {@link Key.type} = {@link KeyTypes.SubmodelElementList} is an integer\n * number denoting the position in the array of the submodel element list.\n */\nexport class Reference extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>25; // Reference\n  }\n\n  /**\n   * Type of the reference.\n   *\n   * @remarks\n   * Denotes, whether reference is an external reference or a model reference.\n   */\n  type: ReferenceTypes;\n\n  /**\n   * {@link IHasSemantics.semanticId} of the referenced model element\n   * ({@link type} = {@link ReferenceTypes.ModelReference}).\n   *\n   * @remarks\n   * For external references there typically is no semantic ID.\n   *\n   * **Note**:\n   * It is recommended to use a external reference.\n   */\n  referredSemanticId: Reference | null;\n\n  /**\n   * Unique references in their name space.\n   */\n  keys: Array<Key>;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.referredSemanticId !== null) {\n      yield this.referredSemanticId;\n    }\n\n    yield* this.keys;\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.referredSemanticId !== null) {\n      yield this.referredSemanticId;\n\n      yield* this.referredSemanticId.descend();\n    }\n\n    for (const anItem of this.keys) {\n      yield anItem;\n\n      yield* anItem.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitReference(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitReferenceWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformReference(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformReferenceWithContext(this, context);\n  }\n\n  constructor(\n    type: ReferenceTypes,\n    keys: Array<Key>,\n    referredSemanticId: Reference | null = null\n  ) {\n    super();\n    this.type = type;\n    this.keys = keys;\n    this.referredSemanticId = referredSemanticId;\n  }\n}\n\n/**\n * A key is a reference to an element by its ID.\n */\nexport class Key extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>26; // Key\n  }\n\n  /**\n   * Denotes which kind of entity is referenced.\n   *\n   * @remarks\n   * In case {@link type} = {@link KeyTypes.GlobalReference},\n   * the key represents a reference to a source that can be globally identified.\n   *\n   * In case {@link type} = {@link KeyTypes.FragmentReference} the key represents\n   * a bookmark or a similar local identifier within its parent element as specified\n   * by the key that precedes this key.\n   *\n   * In all other cases the key references a model element of the same or of another AAS.\n   * The name of the model element is explicitly listed.\n   */\n  type: KeyTypes;\n\n  /**\n   * The key value, for example an IRDI or an URI\n   */\n  value: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitKey(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitKeyWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformKey(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformKeyWithContext(this, context);\n  }\n\n  constructor(type: KeyTypes, value: string) {\n    super();\n    this.type = type;\n    this.value = value;\n  }\n}\n\n/**\n * Enumeration of different key value types within a key.\n */\nexport enum KeyTypes {\n  AnnotatedRelationshipElement = 0,\n  AssetAdministrationShell,\n  BasicEventElement,\n  Blob,\n  Capability,\n  ConceptDescription,\n  /**\n   * Data element.\n   *\n   * @remarks\n   *\n   * **Note**:\n   * Data Element is abstract, *i.e.* if a key uses {@link DataElement}\n   * the reference may be a Property, a File etc.\n   */\n  DataElement,\n  Entity,\n  /**\n   * Event.\n   *\n   * @remarks\n   *\n   * **Note**:\n   * {@link IEventElement} is abstract.\n   */\n  EventElement,\n  File,\n  /**\n   * Bookmark or a similar local identifier of a subordinate part of\n   * a primary resource\n   */\n  FragmentReference,\n  GlobalReference,\n  /**\n   * Identifiable.\n   *\n   * @remarks\n   *\n   * **Note**:\n   * Identifiable is abstract, i.e. if a key uses “Identifiable” the reference\n   * may be an Asset Administration Shell, a Submodel or a Concept Description.\n   */\n  Identifiable,\n  /**\n   * Property with a value that can be provided in multiple languages\n   */\n  MultiLanguageProperty,\n  Operation,\n  Property,\n  /**\n   * Range with min and max\n   */\n  Range,\n  Referable,\n  /**\n   * Reference\n   */\n  ReferenceElement,\n  /**\n   * Relationship\n   */\n  RelationshipElement,\n  Submodel,\n  /**\n   * Submodel Element\n   *\n   * @remarks\n   *\n   * **Note**:\n   * Submodel Element is abstract, *i.e.* if a key uses {@link SubmodelElement}\n   * the reference may be a {@link Property}, an {@link Operation} etc.\n   */\n  SubmodelElement,\n  /**\n   * Struct of Submodel Elements\n   */\n  SubmodelElementCollection,\n  /**\n   * List of Submodel Elements\n   */\n  SubmodelElementList\n}\n\n/**\n * Iterate over the literals of {@link KeyTypes}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overKeyTypes(): IterableIterator<KeyTypes> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <KeyTypes>0; // AnnotatedRelationshipElement\n  yield <KeyTypes>1; // AssetAdministrationShell\n  yield <KeyTypes>2; // BasicEventElement\n  yield <KeyTypes>3; // Blob\n  yield <KeyTypes>4; // Capability\n  yield <KeyTypes>5; // ConceptDescription\n  yield <KeyTypes>6; // DataElement\n  yield <KeyTypes>7; // Entity\n  yield <KeyTypes>8; // EventElement\n  yield <KeyTypes>9; // File\n  yield <KeyTypes>10; // FragmentReference\n  yield <KeyTypes>11; // GlobalReference\n  yield <KeyTypes>12; // Identifiable\n  yield <KeyTypes>13; // MultiLanguageProperty\n  yield <KeyTypes>14; // Operation\n  yield <KeyTypes>15; // Property\n  yield <KeyTypes>16; // Range\n  yield <KeyTypes>17; // Referable\n  yield <KeyTypes>18; // ReferenceElement\n  yield <KeyTypes>19; // RelationshipElement\n  yield <KeyTypes>20; // Submodel\n  yield <KeyTypes>21; // SubmodelElement\n  yield <KeyTypes>22; // SubmodelElementCollection\n  yield <KeyTypes>23; // SubmodelElementList\n}\n\n/**\n * Enumeration listing all XSD anySimpleTypes\n */\nexport enum DataTypeDefXsd {\n  AnyUri = 0,\n  Base64Binary,\n  Boolean,\n  Byte,\n  Date,\n  DateTime,\n  Decimal,\n  Double,\n  Duration,\n  Float,\n  GDay,\n  GMonth,\n  GMonthDay,\n  GYear,\n  GYearMonth,\n  HexBinary,\n  Int,\n  Integer,\n  Long,\n  NegativeInteger,\n  NonNegativeInteger,\n  NonPositiveInteger,\n  PositiveInteger,\n  Short,\n  String,\n  Time,\n  UnsignedByte,\n  UnsignedInt,\n  UnsignedLong,\n  UnsignedShort\n}\n\n/**\n * Iterate over the literals of {@link DataTypeDefXsd}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overDataTypeDefXsd(): IterableIterator<DataTypeDefXsd> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <DataTypeDefXsd>0; // AnyUri\n  yield <DataTypeDefXsd>1; // Base64Binary\n  yield <DataTypeDefXsd>2; // Boolean\n  yield <DataTypeDefXsd>3; // Byte\n  yield <DataTypeDefXsd>4; // Date\n  yield <DataTypeDefXsd>5; // DateTime\n  yield <DataTypeDefXsd>6; // Decimal\n  yield <DataTypeDefXsd>7; // Double\n  yield <DataTypeDefXsd>8; // Duration\n  yield <DataTypeDefXsd>9; // Float\n  yield <DataTypeDefXsd>10; // GDay\n  yield <DataTypeDefXsd>11; // GMonth\n  yield <DataTypeDefXsd>12; // GMonthDay\n  yield <DataTypeDefXsd>13; // GYear\n  yield <DataTypeDefXsd>14; // GYearMonth\n  yield <DataTypeDefXsd>15; // HexBinary\n  yield <DataTypeDefXsd>16; // Int\n  yield <DataTypeDefXsd>17; // Integer\n  yield <DataTypeDefXsd>18; // Long\n  yield <DataTypeDefXsd>19; // NegativeInteger\n  yield <DataTypeDefXsd>20; // NonNegativeInteger\n  yield <DataTypeDefXsd>21; // NonPositiveInteger\n  yield <DataTypeDefXsd>22; // PositiveInteger\n  yield <DataTypeDefXsd>23; // Short\n  yield <DataTypeDefXsd>24; // String\n  yield <DataTypeDefXsd>25; // Time\n  yield <DataTypeDefXsd>26; // UnsignedByte\n  yield <DataTypeDefXsd>27; // UnsignedInt\n  yield <DataTypeDefXsd>28; // UnsignedLong\n  yield <DataTypeDefXsd>29; // UnsignedShort\n}\n\n/**\n * Strings with language tags\n */\nexport interface IAbstractLangString extends Class {\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link language}\n   */\n  text: string;\n}\n\n/**\n * String with length 128 maximum and minimum 1 characters and with language tags\n */\nexport class LangStringNameType extends Class implements IAbstractLangString {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>27; // LangStringNameType\n  }\n\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link IAbstractLangString.language}\n   */\n  text: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLangStringNameType(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLangStringNameTypeWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLangStringNameType(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLangStringNameTypeWithContext(this, context);\n  }\n\n  constructor(language: string, text: string) {\n    super();\n    this.language = language;\n    this.text = text;\n  }\n}\n\n/**\n * String with length 1023 maximum and minimum 1 characters and with language tags\n */\nexport class LangStringTextType extends Class implements IAbstractLangString {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>28; // LangStringTextType\n  }\n\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link IAbstractLangString.language}\n   */\n  text: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLangStringTextType(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLangStringTextTypeWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLangStringTextType(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLangStringTextTypeWithContext(this, context);\n  }\n\n  constructor(language: string, text: string) {\n    super();\n    this.language = language;\n    this.text = text;\n  }\n}\n\n/**\n * Container for the sets of different identifiables.\n *\n * @remarks\n * **Note**:\n * w.r.t. file exchange: There is exactly one environment independent on how many\n * files the contained elements are split. If the file is split then there\n * shall be no element with the same identifier in two different files.\n */\nexport class Environment extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>29; // Environment\n  }\n\n  /**\n   * Asset administration shell\n   */\n  assetAdministrationShells: Array<AssetAdministrationShell> | null;\n\n  /**\n   * Submodel\n   */\n  submodels: Array<Submodel> | null;\n\n  /**\n   * Concept description\n   */\n  conceptDescriptions: Array<ConceptDescription> | null;\n\n  /**\n   * Yield from {@link assetAdministrationShells} if it is set, or yield nothing.\n   */\n  *overAssetAdministrationShellsOrEmpty(): IterableIterator<AssetAdministrationShell> {\n    if (this.assetAdministrationShells !== null) {\n      yield* this.assetAdministrationShells;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link submodels} if it is set, or yield nothing.\n   */\n  *overSubmodelsOrEmpty(): IterableIterator<Submodel> {\n    if (this.submodels !== null) {\n      yield* this.submodels;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link conceptDescriptions} if it is set, or yield nothing.\n   */\n  *overConceptDescriptionsOrEmpty(): IterableIterator<ConceptDescription> {\n    if (this.conceptDescriptions !== null) {\n      yield* this.conceptDescriptions;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    if (this.assetAdministrationShells !== null) {\n      yield* this.assetAdministrationShells;\n    }\n\n    if (this.submodels !== null) {\n      yield* this.submodels;\n    }\n\n    if (this.conceptDescriptions !== null) {\n      yield* this.conceptDescriptions;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    if (this.assetAdministrationShells !== null) {\n      for (const anItem of this.assetAdministrationShells) {\n        yield anItem;\n\n        yield* anItem.descend();\n      }\n    }\n\n    if (this.submodels !== null) {\n      for (const anotherItem of this.submodels) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.conceptDescriptions !== null) {\n      for (const yetAnotherItem of this.conceptDescriptions) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitEnvironment(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitEnvironmentWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformEnvironment(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformEnvironmentWithContext(this, context);\n  }\n\n  constructor(\n    assetAdministrationShells: Array<AssetAdministrationShell> | null = null,\n    submodels: Array<Submodel> | null = null,\n    conceptDescriptions: Array<ConceptDescription> | null = null\n  ) {\n    super();\n    this.assetAdministrationShells = assetAdministrationShells;\n    this.submodels = submodels;\n    this.conceptDescriptions = conceptDescriptions;\n  }\n}\n\n/**\n * Data specification content is part of a data specification template and defines\n * which additional attributes shall be added to the element instance that references\n * the data specification template and meta information about the template itself.\n *\n * Constraint `AASc-3a-050`:\n * If the {@link DataSpecificationIec61360} is used\n * for an element, the value of\n * {@link IHasDataSpecification.embeddedDataSpecifications}\n * shall contain the global reference to the IRI of the corresponding\n * data specification template\n * https://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/3/0\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDataSpecificationContent extends Class {\n  // Intentionally empty.\n}\n\n/**\n * Embed the content of a data specification.\n */\nexport class EmbeddedDataSpecification extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>30; // EmbeddedDataSpecification\n  }\n\n  /**\n   * Actual content of the data specification\n   */\n  dataSpecificationContent: IDataSpecificationContent;\n\n  /**\n   * Reference to the data specification\n   */\n  dataSpecification: Reference | null;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield this.dataSpecificationContent;\n\n    if (this.dataSpecification !== null) {\n      yield this.dataSpecification;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    yield this.dataSpecificationContent;\n\n    yield* this.dataSpecificationContent.descend();\n\n    if (this.dataSpecification !== null) {\n      yield this.dataSpecification;\n\n      yield* this.dataSpecification.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitEmbeddedDataSpecification(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitEmbeddedDataSpecificationWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformEmbeddedDataSpecification(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformEmbeddedDataSpecificationWithContext(this, context);\n  }\n\n  constructor(\n    dataSpecificationContent: IDataSpecificationContent,\n    dataSpecification: Reference | null = null\n  ) {\n    super();\n    this.dataSpecificationContent = dataSpecificationContent;\n    this.dataSpecification = dataSpecification;\n  }\n}\n\nexport enum DataTypeIec61360 {\n  /**\n   * values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd\n   * Example from IEC 61360-1:2017: \"1999-05-31\" is the [DATE] representation of:\n   * \"31 May 1999\".\n   */\n  Date = 0,\n  /**\n   * values consisting of sequence of characters but cannot be translated into other\n   * languages\n   */\n  String,\n  /**\n   * values containing string but shall be represented as different string in different\n   * languages\n   */\n  StringTranslatable,\n  /**\n   * values containing values that are measure of type INTEGER. In addition such a value\n   * comes with a physical unit.\n   */\n  IntegerMeasure,\n  /**\n   * values containing values of type INTEGER but are no currencies or measures\n   */\n  IntegerCount,\n  /**\n   * values containing values of type INTEGER that are currencies\n   */\n  IntegerCurrency,\n  /**\n   * values containing values that are measures of type REAL. In addition such a value\n   * comes with a physical unit.\n   */\n  RealMeasure,\n  /**\n   * values containing numbers that can be written as a terminating or non-terminating\n   * decimal; a rational or irrational number but are no currencies or measures\n   */\n  RealCount,\n  /**\n   * values containing values of type REAL that are currencies\n   */\n  RealCurrency,\n  /**\n   * values representing truth of logic or Boolean algebra (TRUE, FALSE)\n   */\n  Boolean,\n  /**\n   * values containing values of type STRING conformant to Rfc 3987\n   *\n   * @remarks\n   *\n   * **Note**:\n   * In IEC61360-1 (2017) only URI is supported.\n   * An IRI type allows in particular to express an URL or an URI.\n   */\n  Iri,\n  /**\n   * values conforming to ISO/IEC 11179 series global identifier sequences\n   *\n   * @remarks\n   *\n   * IRDI can be used instead of the more specific data types ICID or ISO29002_IRDI.\n   *\n   * ICID values are value conformant to an IRDI, where the delimiter between RAI and ID\n   * is “#” while the delimiter between DI and VI is confined to “##”\n   *\n   * ISO29002_IRDI values are values containing a global identifier that identifies an\n   * administrated item in a registry. The structure of this identifier complies with\n   * identifier syntax defined in ISO/TS 29002-5. The identifier shall fulfil the\n   * requirements specified in ISO/TS 29002-5 for an \"international registration data\n   * identifier\" (IRDI).\n   */\n  Irdi,\n  /**\n   * values containing values of type rational\n   */\n  Rational,\n  /**\n   * values containing values of type rational. In addition such a value comes with a\n   * physical unit.\n   */\n  RationalMeasure,\n  /**\n   * values containing a time, conformant to ISO 8601:2004 but restricted to what is\n   * allowed in the corresponding type in xml.\n   *\n   * @remarks\n   *\n   * Format hh:mm (ECLASS)\n   *\n   * Example from IEC 61360-1:2017: \"13:20:00-05:00\" is the [TIME] representation of:\n   * 1.20 p.m. for Eastern Standard Time, which is 5 hours behind Coordinated\n   * Universal Time (UTC).\n   */\n  Time,\n  /**\n   * values containing a time, conformant to ISO 8601:2004 but restricted to what is\n   * allowed in the corresponding type in xml.\n   *\n   * @remarks\n   *\n   * Format yyyy-mm-dd hh:mm (ECLASS)\n   */\n  Timestamp,\n  /**\n   * values containing an address to a file. The values are of type URI and can represent\n   * an absolute or relative path.\n   *\n   * @remarks\n   *\n   * **Note**:\n   * IEC61360 does not support the file type.\n   */\n  File,\n  /**\n   * Values containing string with any sequence of characters, using the syntax of HTML5\n   * (see W3C Recommendation 28:2014)\n   */\n  Html,\n  /**\n   * values containing the content of a file. Values may be binaries.\n   *\n   * @remarks\n   *\n   * HTML conformant to HTML5 is a special blob.\n   *\n   * In IEC61360 binary is for a sequence of bits, each bit being represented by “0” and\n   * “1” only. A binary is a blob but a blob may also contain other source code.\n   */\n  Blob\n}\n\n/**\n * Iterate over the literals of {@link DataTypeIec61360}.\n *\n * @remark\n * TypeScript does not provide an elegant way to iterate over the literals, so\n * this function helps you avoid common errors and pitfalls.\n *\n * @return iterator over the literals\n */\nexport function* overDataTypeIec61360(): IterableIterator<DataTypeIec61360> {\n  // NOTE (mristin, 2022-12-03):\n  // We yield numbers instead of literals to avoid name lookups on platforms\n  // which do not provide JIT compilation of hot paths.\n  yield <DataTypeIec61360>0; // Date\n  yield <DataTypeIec61360>1; // String\n  yield <DataTypeIec61360>2; // StringTranslatable\n  yield <DataTypeIec61360>3; // IntegerMeasure\n  yield <DataTypeIec61360>4; // IntegerCount\n  yield <DataTypeIec61360>5; // IntegerCurrency\n  yield <DataTypeIec61360>6; // RealMeasure\n  yield <DataTypeIec61360>7; // RealCount\n  yield <DataTypeIec61360>8; // RealCurrency\n  yield <DataTypeIec61360>9; // Boolean\n  yield <DataTypeIec61360>10; // Iri\n  yield <DataTypeIec61360>11; // Irdi\n  yield <DataTypeIec61360>12; // Rational\n  yield <DataTypeIec61360>13; // RationalMeasure\n  yield <DataTypeIec61360>14; // Time\n  yield <DataTypeIec61360>15; // Timestamp\n  yield <DataTypeIec61360>16; // File\n  yield <DataTypeIec61360>17; // Html\n  yield <DataTypeIec61360>18; // Blob\n}\n\n/**\n * Value represented by up to four variants of a numeric value in a specific role:\n * `MIN`, `NOM`, `TYP` and `MAX`. True means that the value is available,\n * false means the value is not available.\n *\n * @remarks\n * EXAMPLE from [IEC61360-1]: In the case of having a property which is\n * of the LEVEL_TYPE min/max − expressing a range − only those two values\n * need to be provided.\n *\n * **Note**:\n * This is how AAS deals with the following combinations of level types:\n *\n * * Either all attributes are false. In this case the concept is mapped\n *   to a {@link Property} and level type is ignored.\n * * At most one of the attributes is set to true. In this case\n *   the concept is mapped to a {@link Property}.\n * * Min and max are set to true. In this case the concept is mapped\n *   to a {@link Range}.\n * * More than one attribute is set to true but not min and max only\n *   (see second case). In this case the concept is mapped\n *   to a {@link SubmodelElementCollection} with the corresponding\n *   number of Properties.\n *   Example: If attribute {@link LevelType.min} and {@link LevelType.nom} are set to true\n *   then the concept is mapped to a {@link SubmodelElementCollection}\n *   with two Properties within: min and nom.\n *   The data type of both Properties is the same.\n *\n * **Note**:\n * In the cases 2. and 4. the {@link Property.semanticId} of the Property\n * or Properties within the {@link SubmodelElementCollection} needs to include\n * information about the level type. Otherwise, the semantics is not described\n * in a unique way. Please refer to the specification.\n */\nexport class LevelType extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>31; // LevelType\n  }\n\n  /**\n   * Minimum of the value\n   */\n  min: boolean;\n\n  /**\n   * Nominal value (value as designated)\n   */\n  nom: boolean;\n\n  /**\n   * Value as typically present\n   */\n  typ: boolean;\n\n  /**\n   * Maximum of the value\n   */\n  max: boolean;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLevelType(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLevelTypeWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLevelType(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLevelTypeWithContext(this, context);\n  }\n\n  constructor(min: boolean, nom: boolean, typ: boolean, max: boolean) {\n    super();\n    this.min = min;\n    this.nom = nom;\n    this.typ = typ;\n    this.max = max;\n  }\n}\n\n/**\n * A value reference pair within a value list. Each value has a global unique id\n * defining its semantic.\n */\nexport class ValueReferencePair extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>32; // ValueReferencePair\n  }\n\n  /**\n   * The value of the referenced concept definition of the value in {@link valueId}.\n   */\n  value: string;\n\n  /**\n   * Global unique id of the value.\n   *\n   * @remarks\n   * **Note**:\n   * It is recommended to use a global reference.\n   */\n  valueId: Reference;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield this.valueId;\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    yield this.valueId;\n\n    yield* this.valueId.descend();\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitValueReferencePair(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitValueReferencePairWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformValueReferencePair(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformValueReferencePairWithContext(this, context);\n  }\n\n  constructor(value: string, valueId: Reference) {\n    super();\n    this.value = value;\n    this.valueId = valueId;\n  }\n}\n\n/**\n * A set of value reference pairs.\n */\nexport class ValueList extends Class {\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>33; // ValueList\n  }\n\n  /**\n   * A pair of a value together with its global unique id.\n   */\n  valueReferencePairs: Array<ValueReferencePair>;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield* this.valueReferencePairs;\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    for (const anItem of this.valueReferencePairs) {\n      yield anItem;\n\n      yield* anItem.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitValueList(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitValueListWithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformValueList(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformValueListWithContext(this, context);\n  }\n\n  constructor(valueReferencePairs: Array<ValueReferencePair>) {\n    super();\n    this.valueReferencePairs = valueReferencePairs;\n  }\n}\n\n/**\n * String with length 255 maximum and minimum 1 characters and with language tags\n *\n * @remarks\n * **Note**:\n * It is advised to keep the length of the name limited to 35 characters.\n */\nexport class LangStringPreferredNameTypeIec61360\n  extends Class\n  implements IAbstractLangString\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>34; // LangStringPreferredNameTypeIec61360\n  }\n\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link IAbstractLangString.language}\n   */\n  text: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLangStringPreferredNameTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLangStringPreferredNameTypeIec61360WithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLangStringPreferredNameTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLangStringPreferredNameTypeIec61360WithContext(\n      this,\n      context\n    );\n  }\n\n  constructor(language: string, text: string) {\n    super();\n    this.language = language;\n    this.text = text;\n  }\n}\n\n/**\n * String with length 18 maximum and minimum 1 characters and with language tags\n */\nexport class LangStringShortNameTypeIec61360\n  extends Class\n  implements IAbstractLangString\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>35; // LangStringShortNameTypeIec61360\n  }\n\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link IAbstractLangString.language}\n   */\n  text: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLangStringShortNameTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLangStringShortNameTypeIec61360WithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLangStringShortNameTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLangStringShortNameTypeIec61360WithContext(\n      this,\n      context\n    );\n  }\n\n  constructor(language: string, text: string) {\n    super();\n    this.language = language;\n    this.text = text;\n  }\n}\n\n/**\n * String with length 1023 maximum and minimum 1 characters and with language tags\n */\nexport class LangStringDefinitionTypeIec61360\n  extends Class\n  implements IAbstractLangString\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>36; // LangStringDefinitionTypeIec61360\n  }\n\n  /**\n   * Language tag conforming to BCP 47\n   */\n  language: string;\n\n  /**\n   * Text in the {@link IAbstractLangString.language}\n   */\n  text: string;\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    // No descendable properties\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitLangStringDefinitionTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitLangStringDefinitionTypeIec61360WithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformLangStringDefinitionTypeIec61360(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformLangStringDefinitionTypeIec61360WithContext(\n      this,\n      context\n    );\n  }\n\n  constructor(language: string, text: string) {\n    super();\n    this.language = language;\n    this.text = text;\n  }\n}\n\n/**\n * Content of data specification template for concept descriptions for properties,\n * values and value lists conformant to IEC 61360.\n *\n * @remarks\n * **Note**:\n * IEC61360 requires also a globally unique identifier for a concept\n * description. This ID is not part of the data specification template.\n * Instead the {@link ConceptDescription.id} as inherited via\n * {@link IIdentifiable} is used. Same holds for administrative\n * information like the version and revision.\n *\n * **Note**:\n * {@link ConceptDescription.idShort} and {@link DataSpecificationIec61360.shortName} are very\n * similar. However, in this case the decision was to add\n * {@link DataSpecificationIec61360.shortName} explicitly to the data specification. Same holds for\n * {@link ConceptDescription.displayName} and\n * {@link DataSpecificationIec61360.preferredName}. Same holds for\n * {@link ConceptDescription.description} and {@link DataSpecificationIec61360.definition}.\n *\n * Constraint `AASc-3a-010`:\n * If {@link DataSpecificationIec61360.value} is not empty then {@link DataSpecificationIec61360.valueList} shall be empty\n * and vice versa.\n *\n * **Note**:\n * It is also possible that both {@link DataSpecificationIec61360.value} and {@link DataSpecificationIec61360.valueList} are\n * empty. This is the case for concept descriptions that define the semantics\n * of a property but do not have an enumeration ({@link DataSpecificationIec61360.valueList}) as\n * data type.\n *\n * **Note**:\n * Although it is possible to define a {@link ConceptDescription} for a\n * :attr:´value_list`,\n * it is not possible to reuse this {@link DataSpecificationIec61360.valueList}.\n * It is only possible to directly add a {@link DataSpecificationIec61360.valueList} as data type\n * to a specific semantic definition of a property.\n *\n * Constraint `AASc-3a-009`:\n * If {@link DataSpecificationIec61360.dataType} one of:\n * {@link DataTypeIec61360.IntegerMeasure},\n * {@link DataTypeIec61360.RealMeasure},\n * {@link DataTypeIec61360.RationalMeasure},\n * {@link DataTypeIec61360.IntegerCurrency},\n * {@link DataTypeIec61360.RealCurrency}, then {@link DataSpecificationIec61360.unit} or\n * {@link DataSpecificationIec61360.unitId} shall be defined.\n */\nexport class DataSpecificationIec61360\n  extends Class\n  implements IDataSpecificationContent\n{\n  /**\n   * Indicate the runtime model type of the instance.\n   */\n  modelType(): ModelType {\n    // NOTE (mristin, 2022-12-03):\n    // We yield numbers instead of literals to avoid name lookups on platforms\n    // which do not provide JIT compilation of hot paths.\n    return <ModelType>37; // DataSpecificationIec61360\n  }\n\n  /**\n   * Preferred name\n   *\n   * @remarks\n   * **Note**:\n   * It is advised to keep the length of the name limited to 35 characters.\n   *\n   * Constraint `AASc-3a-002`:\n   * {@link preferredName} shall be provided at least in English.\n   */\n  preferredName: Array<LangStringPreferredNameTypeIec61360>;\n\n  /**\n   * Short name\n   */\n  shortName: Array<LangStringShortNameTypeIec61360> | null;\n\n  /**\n   * Unit\n   */\n  unit: string | null;\n\n  /**\n   * Unique unit id\n   *\n   * @remarks\n   * {@link unit} and {@link unitId} need to be consistent if both attributes\n   * are set\n   *\n   * **Note**:\n   * It is recommended to use an external reference ID.\n   */\n  unitId: Reference | null;\n\n  /**\n   * Source of definition\n   */\n  sourceOfDefinition: string | null;\n\n  /**\n   * Symbol\n   */\n  symbol: string | null;\n\n  /**\n   * Data Type\n   */\n  dataType: DataTypeIec61360 | null;\n\n  /**\n   * Definition in different languages\n   */\n  definition: Array<LangStringDefinitionTypeIec61360> | null;\n\n  /**\n   * Value Format\n   *\n   * @remarks\n   * **Note**:\n   * The value format is based on ISO 13584-42 and IEC 61360-2.\n   */\n  valueFormat: string | null;\n\n  /**\n   * List of allowed values\n   */\n  valueList: ValueList | null;\n\n  /**\n   * Value\n   */\n  value: string | null;\n\n  /**\n   * Set of levels.\n   */\n  levelType: LevelType | null;\n\n  /**\n   * Yield from {@link shortName} if it is set, or yield nothing.\n   */\n  *overShortNameOrEmpty(): IterableIterator<LangStringShortNameTypeIec61360> {\n    if (this.shortName !== null) {\n      yield* this.shortName;\n    }\n    return;\n  }\n\n  /**\n   * Yield from {@link definition} if it is set, or yield nothing.\n   */\n  *overDefinitionOrEmpty(): IterableIterator<LangStringDefinitionTypeIec61360> {\n    if (this.definition !== null) {\n      yield* this.definition;\n    }\n    return;\n  }\n\n  /**\n   * Iterate over the instances referenced from this instance.\n   *\n   * We do not recurse into the referenced instances.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descendOnce(): IterableIterator<Class> {\n    yield* this.preferredName;\n\n    if (this.shortName !== null) {\n      yield* this.shortName;\n    }\n\n    if (this.unitId !== null) {\n      yield this.unitId;\n    }\n\n    if (this.definition !== null) {\n      yield* this.definition;\n    }\n\n    if (this.valueList !== null) {\n      yield this.valueList;\n    }\n\n    if (this.levelType !== null) {\n      yield this.levelType;\n    }\n  }\n\n  /**\n   * Iterate recursively over the instances referenced from this instance.\n   *\n   * @returns Iterator over the referenced instances\n   */\n  *descend(): IterableIterator<Class> {\n    for (const anItem of this.preferredName) {\n      yield anItem;\n\n      yield* anItem.descend();\n    }\n\n    if (this.shortName !== null) {\n      for (const anotherItem of this.shortName) {\n        yield anotherItem;\n\n        yield* anotherItem.descend();\n      }\n    }\n\n    if (this.unitId !== null) {\n      yield this.unitId;\n\n      yield* this.unitId.descend();\n    }\n\n    if (this.definition !== null) {\n      for (const yetAnotherItem of this.definition) {\n        yield yetAnotherItem;\n\n        yield* yetAnotherItem.descend();\n      }\n    }\n\n    if (this.valueList !== null) {\n      yield this.valueList;\n\n      yield* this.valueList.descend();\n    }\n\n    if (this.levelType !== null) {\n      yield this.levelType;\n\n      yield* this.levelType.descend();\n    }\n  }\n\n  /**\n   * Dispatch `visitor` on this instance.\n   *\n   * @param visitor - to visit this instance\n   */\n  accept(visitor: AbstractVisitor): void {\n    visitor.visitDataSpecificationIec61360(this);\n  }\n\n  /**\n   * Dispatch `visitor` with `context` on this instance.\n   *\n   * @param visitor - to visit this instance\n   * @param context - to be passed along to the dispatched visitor method\n   * @typeParam ContextT - type of the context\n   */\n  acceptWithContext<ContextT>(\n    visitor: AbstractVisitorWithContext<ContextT>,\n    context: ContextT\n  ) {\n    visitor.visitDataSpecificationIec61360WithContext(this, context);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance.\n   *\n   * @param transformer - to transform this instance\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   */\n  transform<T>(transformer: AbstractTransformer<T>): T {\n    return transformer.transformDataSpecificationIec61360(this);\n  }\n\n  /**\n   * Dispatch the `transformer` on this instance in `context`.\n   *\n   * @param transformer - to transform this instance\n   * @param context - to be passed along to the `transformer`\n   * @returns transformation of this instance\n   * @paramType T - type of the transformation result\n   * @paramType ContextT - type of the transformation context\n   */\n  transformWithContext<ContextT, T>(\n    transformer: AbstractTransformerWithContext<ContextT, T>,\n    context: ContextT\n  ): T {\n    return transformer.transformDataSpecificationIec61360WithContext(this, context);\n  }\n\n  constructor(\n    preferredName: Array<LangStringPreferredNameTypeIec61360>,\n    shortName: Array<LangStringShortNameTypeIec61360> | null = null,\n    unit: string | null = null,\n    unitId: Reference | null = null,\n    sourceOfDefinition: string | null = null,\n    symbol: string | null = null,\n    dataType: DataTypeIec61360 | null = null,\n    definition: Array<LangStringDefinitionTypeIec61360> | null = null,\n    valueFormat: string | null = null,\n    valueList: ValueList | null = null,\n    value: string | null = null,\n    levelType: LevelType | null = null\n  ) {\n    super();\n    this.preferredName = preferredName;\n    this.shortName = shortName;\n    this.unit = unit;\n    this.unitId = unitId;\n    this.sourceOfDefinition = sourceOfDefinition;\n    this.symbol = symbol;\n    this.dataType = dataType;\n    this.definition = definition;\n    this.valueFormat = valueFormat;\n    this.valueList = valueList;\n    this.value = value;\n    this.levelType = levelType;\n  }\n}\n\n/**\n * Visit the instances of the model.\n */\nexport abstract class AbstractVisitor {\n  /**\n   * Double-dispatch on `that`.\n   */\n  visit(that: Class): void {\n    that.accept(this);\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitExtension(that: Extension): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitAdministrativeInformation(that: AdministrativeInformation): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitQualifier(that: Qualifier): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitAssetAdministrationShell(that: AssetAdministrationShell): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitAssetInformation(that: AssetInformation): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitResource(that: Resource): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitSpecificAssetId(that: SpecificAssetId): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitSubmodel(that: Submodel): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitRelationshipElement(that: RelationshipElement): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitSubmodelElementList(that: SubmodelElementList): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitSubmodelElementCollection(that: SubmodelElementCollection): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitProperty(that: Property): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitMultiLanguageProperty(that: MultiLanguageProperty): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitRange(that: Range): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitReferenceElement(that: ReferenceElement): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitBlob(that: Blob): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitFile(that: File): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitAnnotatedRelationshipElement(that: AnnotatedRelationshipElement): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitEntity(that: Entity): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitEventPayload(that: EventPayload): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitBasicEventElement(that: BasicEventElement): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitOperation(that: Operation): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitOperationVariable(that: OperationVariable): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitCapability(that: Capability): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitConceptDescription(that: ConceptDescription): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitReference(that: Reference): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitKey(that: Key): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLangStringNameType(that: LangStringNameType): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLangStringTextType(that: LangStringTextType): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitEnvironment(that: Environment): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitEmbeddedDataSpecification(that: EmbeddedDataSpecification): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLevelType(that: LevelType): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitValueReferencePair(that: ValueReferencePair): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitValueList(that: ValueList): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): void;\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  abstract visitDataSpecificationIec61360(that: DataSpecificationIec61360): void;\n}\n\n/**\n * Visit the instances of the model with context.\n *\n * @typeParam ContextT - type of the visitation context\n */\nexport abstract class AbstractVisitorWithContext<ContextT> {\n  /**\n   * Double-dispatch on `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitWithContext(that: Class, context: ContextT): void {\n    that.acceptWithContext(this, context);\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitExtensionWithContext(that: Extension, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitAdministrativeInformationWithContext(\n    that: AdministrativeInformation,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitQualifierWithContext(that: Qualifier, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitAssetAdministrationShellWithContext(\n    that: AssetAdministrationShell,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitAssetInformationWithContext(\n    that: AssetInformation,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitResourceWithContext(that: Resource, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitSpecificAssetIdWithContext(\n    that: SpecificAssetId,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitSubmodelWithContext(that: Submodel, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitRelationshipElementWithContext(\n    that: RelationshipElement,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitSubmodelElementListWithContext(\n    that: SubmodelElementList,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitSubmodelElementCollectionWithContext(\n    that: SubmodelElementCollection,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitPropertyWithContext(that: Property, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitMultiLanguagePropertyWithContext(\n    that: MultiLanguageProperty,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitRangeWithContext(that: Range, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitReferenceElementWithContext(\n    that: ReferenceElement,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitBlobWithContext(that: Blob, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitFileWithContext(that: File, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitAnnotatedRelationshipElementWithContext(\n    that: AnnotatedRelationshipElement,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitEntityWithContext(that: Entity, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitEventPayloadWithContext(that: EventPayload, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitBasicEventElementWithContext(\n    that: BasicEventElement,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitOperationWithContext(that: Operation, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitOperationVariableWithContext(\n    that: OperationVariable,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitCapabilityWithContext(that: Capability, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitConceptDescriptionWithContext(\n    that: ConceptDescription,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitReferenceWithContext(that: Reference, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitKeyWithContext(that: Key, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLangStringNameTypeWithContext(\n    that: LangStringNameType,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLangStringTextTypeWithContext(\n    that: LangStringTextType,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitEnvironmentWithContext(that: Environment, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitEmbeddedDataSpecificationWithContext(\n    that: EmbeddedDataSpecification,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLevelTypeWithContext(that: LevelType, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitValueReferencePairWithContext(\n    that: ValueReferencePair,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitValueListWithContext(that: ValueList, context: ContextT): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLangStringPreferredNameTypeIec61360WithContext(\n    that: LangStringPreferredNameTypeIec61360,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLangStringShortNameTypeIec61360WithContext(\n    that: LangStringShortNameTypeIec61360,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitLangStringDefinitionTypeIec61360WithContext(\n    that: LangStringDefinitionTypeIec61360,\n    context: ContextT\n  ): void;\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  abstract visitDataSpecificationIec61360WithContext(\n    that: DataSpecificationIec61360,\n    context: ContextT\n  ): void;\n}\n\n/**\n * Visit the instances of the model without action.\n *\n * @remarks\n * This visitor is not meant to be directly used. Instead, you usually\n * inherit from it, and implement only the relevant visit methods.\n */\nexport class PassThroughVisitor extends AbstractVisitor {\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitExtension(that: Extension): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitAdministrativeInformation(that: AdministrativeInformation): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitQualifier(that: Qualifier): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitAssetAdministrationShell(that: AssetAdministrationShell): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitAssetInformation(that: AssetInformation): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitResource(that: Resource): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitSpecificAssetId(that: SpecificAssetId): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitSubmodel(that: Submodel): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitRelationshipElement(that: RelationshipElement): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitSubmodelElementList(that: SubmodelElementList): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitSubmodelElementCollection(that: SubmodelElementCollection): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitProperty(that: Property): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitMultiLanguageProperty(that: MultiLanguageProperty): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitRange(that: Range): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitReferenceElement(that: ReferenceElement): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitBlob(that: Blob): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitFile(that: File): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitAnnotatedRelationshipElement(that: AnnotatedRelationshipElement): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitEntity(that: Entity): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitEventPayload(that: EventPayload): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitBasicEventElement(that: BasicEventElement): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitOperation(that: Operation): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitOperationVariable(that: OperationVariable): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitCapability(that: Capability): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitConceptDescription(that: ConceptDescription): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitReference(that: Reference): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitKey(that: Key): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLangStringNameType(that: LangStringNameType): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLangStringTextType(that: LangStringTextType): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitEnvironment(that: Environment): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitEmbeddedDataSpecification(that: EmbeddedDataSpecification): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLevelType(that: LevelType): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitValueReferencePair(that: ValueReferencePair): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitValueList(that: ValueList): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLangStringShortNameTypeIec61360(that: LangStringShortNameTypeIec61360): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitLangStringDefinitionTypeIec61360(that: LangStringDefinitionTypeIec61360): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n\n  /**\n   * Visit `that`.\n   *\n   * @param that - instance to be visited\n   */\n  visitDataSpecificationIec61360(that: DataSpecificationIec61360): void {\n    for (const another of that.descendOnce()) {\n      this.visit(another);\n    }\n  }\n}\n\n/**\n * Visit the instances of the model without action and in context.\n *\n * @remarks\n * This visitor is not meant to be directly used. Instead, you usually\n * inherit from it, and implement only the relevant visit methods.\n */\nexport class PassThroughVisitorWithContext<\n  ContextT\n> extends AbstractVisitorWithContext<ContextT> {\n  /**\n   * Double-dispatch on `that` in `context`.\n   */\n  visitWithContext(that: Class, context: ContextT): void {\n    that.acceptWithContext(this, context);\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitExtensionWithContext(that: Extension, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitAdministrativeInformationWithContext(\n    that: AdministrativeInformation,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitQualifierWithContext(that: Qualifier, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitAssetAdministrationShellWithContext(\n    that: AssetAdministrationShell,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitAssetInformationWithContext(that: AssetInformation, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitResourceWithContext(that: Resource, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitSpecificAssetIdWithContext(that: SpecificAssetId, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitSubmodelWithContext(that: Submodel, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitRelationshipElementWithContext(\n    that: RelationshipElement,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitSubmodelElementListWithContext(\n    that: SubmodelElementList,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitSubmodelElementCollectionWithContext(\n    that: SubmodelElementCollection,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitPropertyWithContext(that: Property, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitMultiLanguagePropertyWithContext(\n    that: MultiLanguageProperty,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitRangeWithContext(that: Range, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitReferenceElementWithContext(that: ReferenceElement, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitBlobWithContext(that: Blob, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitFileWithContext(that: File, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitAnnotatedRelationshipElementWithContext(\n    that: AnnotatedRelationshipElement,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitEntityWithContext(that: Entity, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitEventPayloadWithContext(that: EventPayload, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitBasicEventElementWithContext(that: BasicEventElement, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitOperationWithContext(that: Operation, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitOperationVariableWithContext(that: OperationVariable, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitCapabilityWithContext(that: Capability, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitConceptDescriptionWithContext(\n    that: ConceptDescription,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitReferenceWithContext(that: Reference, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitKeyWithContext(that: Key, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLangStringNameTypeWithContext(\n    that: LangStringNameType,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLangStringTextTypeWithContext(\n    that: LangStringTextType,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitEnvironmentWithContext(that: Environment, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitEmbeddedDataSpecificationWithContext(\n    that: EmbeddedDataSpecification,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLevelTypeWithContext(that: LevelType, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitValueReferencePairWithContext(\n    that: ValueReferencePair,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitValueListWithContext(that: ValueList, context: ContextT): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLangStringPreferredNameTypeIec61360WithContext(\n    that: LangStringPreferredNameTypeIec61360,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLangStringShortNameTypeIec61360WithContext(\n    that: LangStringShortNameTypeIec61360,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitLangStringDefinitionTypeIec61360WithContext(\n    that: LangStringDefinitionTypeIec61360,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n\n  /**\n   * Visit `that` in `context`.\n   *\n   * @param that - instance to be visited\n   * @param context - of the visitation\n   */\n  visitDataSpecificationIec61360WithContext(\n    that: DataSpecificationIec61360,\n    context: ContextT\n  ): void {\n    for (const another of that.descendOnce()) {\n      this.visitWithContext(another, context);\n    }\n  }\n}\n\n/**\n * Transform the instance of the model.\n *\n * @typeParam T - type of the transformation result\n */\nexport abstract class AbstractTransformer<T> {\n  /**\n   * Double-dispatch on `that`.\n   */\n  transform(that: Class): T {\n    return that.transform(this);\n  }\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformExtension(that: Extension): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformAdministrativeInformation(that: AdministrativeInformation): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformQualifier(that: Qualifier): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformAssetAdministrationShell(that: AssetAdministrationShell): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformAssetInformation(that: AssetInformation): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformResource(that: Resource): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformSpecificAssetId(that: SpecificAssetId): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformSubmodel(that: Submodel): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformRelationshipElement(that: RelationshipElement): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformSubmodelElementList(that: SubmodelElementList): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformSubmodelElementCollection(that: SubmodelElementCollection): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformProperty(that: Property): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformMultiLanguageProperty(that: MultiLanguageProperty): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformRange(that: Range): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformReferenceElement(that: ReferenceElement): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformBlob(that: Blob): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformFile(that: File): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformAnnotatedRelationshipElement(that: AnnotatedRelationshipElement): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformEntity(that: Entity): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformEventPayload(that: EventPayload): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformBasicEventElement(that: BasicEventElement): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformOperation(that: Operation): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformOperationVariable(that: OperationVariable): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformCapability(that: Capability): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformConceptDescription(that: ConceptDescription): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformReference(that: Reference): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformKey(that: Key): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLangStringNameType(that: LangStringNameType): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLangStringTextType(that: LangStringTextType): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformEnvironment(that: Environment): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformEmbeddedDataSpecification(that: EmbeddedDataSpecification): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLevelType(that: LevelType): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformValueReferencePair(that: ValueReferencePair): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformValueList(that: ValueList): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): T;\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  abstract transformDataSpecificationIec61360(that: DataSpecificationIec61360): T;\n}\n\n/**\n * Transform the instances of the model in context.\n *\n * @typeParam ContextT - type of the transformation context\n * @typeParam T - type of the transformation result\n */\nexport abstract class AbstractTransformerWithContext<ContextT, T> {\n  /**\n   * Double-dispatch on `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  transformWithContext(that: Class, context: ContextT): T {\n    return that.transformWithContext(this, context);\n  }\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformExtensionWithContext(that: Extension, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformAdministrativeInformationWithContext(\n    that: AdministrativeInformation,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformQualifierWithContext(that: Qualifier, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformAssetAdministrationShellWithContext(\n    that: AssetAdministrationShell,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformAssetInformationWithContext(\n    that: AssetInformation,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformResourceWithContext(that: Resource, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformSpecificAssetIdWithContext(\n    that: SpecificAssetId,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformSubmodelWithContext(that: Submodel, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformRelationshipElementWithContext(\n    that: RelationshipElement,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformSubmodelElementListWithContext(\n    that: SubmodelElementList,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformSubmodelElementCollectionWithContext(\n    that: SubmodelElementCollection,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformPropertyWithContext(that: Property, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformMultiLanguagePropertyWithContext(\n    that: MultiLanguageProperty,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformRangeWithContext(that: Range, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformReferenceElementWithContext(\n    that: ReferenceElement,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformBlobWithContext(that: Blob, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformFileWithContext(that: File, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformAnnotatedRelationshipElementWithContext(\n    that: AnnotatedRelationshipElement,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformEntityWithContext(that: Entity, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformEventPayloadWithContext(that: EventPayload, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformBasicEventElementWithContext(\n    that: BasicEventElement,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformOperationWithContext(that: Operation, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformOperationVariableWithContext(\n    that: OperationVariable,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformCapabilityWithContext(that: Capability, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformConceptDescriptionWithContext(\n    that: ConceptDescription,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformReferenceWithContext(that: Reference, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformKeyWithContext(that: Key, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLangStringNameTypeWithContext(\n    that: LangStringNameType,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLangStringTextTypeWithContext(\n    that: LangStringTextType,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformEnvironmentWithContext(that: Environment, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformEmbeddedDataSpecificationWithContext(\n    that: EmbeddedDataSpecification,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLevelTypeWithContext(that: LevelType, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformValueReferencePairWithContext(\n    that: ValueReferencePair,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformValueListWithContext(that: ValueList, context: ContextT): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLangStringPreferredNameTypeIec61360WithContext(\n    that: LangStringPreferredNameTypeIec61360,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLangStringShortNameTypeIec61360WithContext(\n    that: LangStringShortNameTypeIec61360,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformLangStringDefinitionTypeIec61360WithContext(\n    that: LangStringDefinitionTypeIec61360,\n    context: ContextT\n  ): T;\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the transformation\n   * @returns transformed `that`\n   */\n  abstract transformDataSpecificationIec61360WithContext(\n    that: DataSpecificationIec61360,\n    context: ContextT\n  ): T;\n}\n\n/**\n * Transform the instances of the model.\n *\n * @remarks\n * If you do not override the transformation methods, they simply\n * return {@link defaultResult}.\n *\n * @typeParam T - type of the transformation result\n */\nexport class TransformerWithDefault<T> extends AbstractTransformer<T> {\n  /**\n   * Default value which is returned if no override of the transformation\n   */\n  defaultResult: T;\n\n  /**\n   * Initialize with the given `default` value.\n   *\n   * @param defaultResult - returned if no override of the transformation\n   */\n  constructor(defaultResult: T) {\n    super();\n    this.defaultResult = defaultResult;\n  }\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(that: AdministrativeInformation): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(that: AssetAdministrationShell): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(that: SubmodelElementCollection): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(that: MultiLanguageProperty): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(that: AnnotatedRelationshipElement): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(that: EmbeddedDataSpecification): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(that: LangStringShortNameTypeIec61360): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(that: LangStringDefinitionTypeIec61360): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that`.\n   *\n   * @param that - instance to be transformed\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(that: DataSpecificationIec61360): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\n/**\n * Transform the instances of the model in context.\n *\n * @remarks\n * If you do not override the transformation methods, they simply\n * return {@link defaultResult}.\n *\n * @typeParam ContextT - type of the visitation context\n * @typeParam T - type of the transformation result\n */\nexport class TransformerWithDefaultAndContext<\n  ContextT,\n  T\n> extends AbstractTransformerWithContext<ContextT, T> {\n  /**\n   * Default value which is returned if no override of the transformation\n   */\n  defaultResult: T;\n\n  /**\n   * Initialize with the given `default` value.\n   *\n   * @param defaultResult - returned if no override of the transformation\n   */\n  constructor(defaultResult: T) {\n    super();\n    this.defaultResult = defaultResult;\n  }\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtensionWithContext(that: Extension, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformationWithContext(\n    that: AdministrativeInformation,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifierWithContext(that: Qualifier, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShellWithContext(\n    that: AssetAdministrationShell,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformationWithContext(that: AssetInformation, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResourceWithContext(that: Resource, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetIdWithContext(that: SpecificAssetId, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelWithContext(that: Submodel, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElementWithContext(\n    that: RelationshipElement,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementListWithContext(\n    that: SubmodelElementList,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollectionWithContext(\n    that: SubmodelElementCollection,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformPropertyWithContext(that: Property, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguagePropertyWithContext(\n    that: MultiLanguageProperty,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRangeWithContext(that: Range, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElementWithContext(that: ReferenceElement, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlobWithContext(that: Blob, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFileWithContext(that: File, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElementWithContext(\n    that: AnnotatedRelationshipElement,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntityWithContext(that: Entity, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayloadWithContext(that: EventPayload, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElementWithContext(that: BasicEventElement, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationWithContext(that: Operation, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariableWithContext(that: OperationVariable, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapabilityWithContext(that: Capability, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescriptionWithContext(\n    that: ConceptDescription,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceWithContext(that: Reference, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKeyWithContext(that: Key, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameTypeWithContext(\n    that: LangStringNameType,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextTypeWithContext(\n    that: LangStringTextType,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironmentWithContext(that: Environment, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecificationWithContext(\n    that: EmbeddedDataSpecification,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelTypeWithContext(that: LevelType, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePairWithContext(\n    that: ValueReferencePair,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueListWithContext(that: ValueList, context: ContextT): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360WithContext(\n    that: LangStringPreferredNameTypeIec61360,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360WithContext(\n    that: LangStringShortNameTypeIec61360,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360WithContext(\n    that: LangStringDefinitionTypeIec61360,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Transform `that` in `context`.\n   *\n   * @param that - instance to be transformed\n   * @param context - of the visitation\n   * @returns transformed `that`\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360WithContext(\n    that: DataSpecificationIec61360,\n    context: ContextT\n  ): T {\n    return this.defaultResult;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\n/**\n * Try to cast an instance of the model to {@link IHasSemantics}.\n */\nclass AsHasSemanticsTransformer extends AbstractTransformer<IHasSemantics | null> {\n  transformExtension(that: Extension): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformQualifier(that: Qualifier): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSpecificAssetId(that: SpecificAssetId): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformSubmodel(that: Submodel): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformRelationshipElement(that: RelationshipElement): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformSubmodelElementList(that: SubmodelElementList): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformProperty(that: Property): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformRange(that: Range): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformBlob(that: Blob): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformFile(that: File): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformEntity(that: Entity): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  transformOperation(that: Operation): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): IHasSemantics | null {\n    return that as IHasSemantics;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IHasSemantics | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_HAS_SEMANTICS_TRANSFORMER = new AsHasSemanticsTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IHasSemantics}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asHasSemantics(that: Class): IHasSemantics | null {\n  return AS_HAS_SEMANTICS_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isHasSemantics(that: Class): that is IHasSemantics {\n  return asHasSemantics(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Extension}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asExtension(that: Class): Extension | null {\n  return that instanceof Extension ? <Extension>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isExtension(that: Class): that is Extension {\n  return that instanceof Extension;\n}\n\n/**\n * Try to cast an instance of the model to {@link IHasExtensions}.\n */\nclass AsHasExtensionsTransformer extends AbstractTransformer<IHasExtensions | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformRelationshipElement(that: RelationshipElement): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformSubmodelElementList(that: SubmodelElementList): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformProperty(that: Property): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformRange(that: Range): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformBlob(that: Blob): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformFile(that: File): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformEntity(that: Entity): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformOperation(that: Operation): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  transformConceptDescription(that: ConceptDescription): IHasExtensions | null {\n    return that as IHasExtensions;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IHasExtensions | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_HAS_EXTENSIONS_TRANSFORMER = new AsHasExtensionsTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IHasExtensions}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asHasExtensions(that: Class): IHasExtensions | null {\n  return AS_HAS_EXTENSIONS_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isHasExtensions(that: Class): that is IHasExtensions {\n  return asHasExtensions(that) !== null;\n}\n\n/**\n * Try to cast an instance of the model to {@link IReferable}.\n */\nclass AsReferableTransformer extends AbstractTransformer<IReferable | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAssetAdministrationShell(that: AssetAdministrationShell): IReferable | null {\n    return that as IReferable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformRelationshipElement(that: RelationshipElement): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformSubmodelElementList(that: SubmodelElementList): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformProperty(that: Property): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformRange(that: Range): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformBlob(that: Blob): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformFile(that: File): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformEntity(that: Entity): IReferable | null {\n    return that as IReferable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformOperation(that: Operation): IReferable | null {\n    return that as IReferable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): IReferable | null {\n    return that as IReferable;\n  }\n\n  transformConceptDescription(that: ConceptDescription): IReferable | null {\n    return that as IReferable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IReferable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_REFERABLE_TRANSFORMER = new AsReferableTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IReferable}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asReferable(that: Class): IReferable | null {\n  return AS_REFERABLE_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isReferable(that: Class): that is IReferable {\n  return asReferable(that) !== null;\n}\n\n/**\n * Try to cast an instance of the model to {@link IIdentifiable}.\n */\nclass AsIdentifiableTransformer extends AbstractTransformer<IIdentifiable | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IIdentifiable | null {\n    return that as IIdentifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IIdentifiable | null {\n    return that as IIdentifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformConceptDescription(that: ConceptDescription): IIdentifiable | null {\n    return that as IIdentifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IIdentifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_IDENTIFIABLE_TRANSFORMER = new AsIdentifiableTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IIdentifiable}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asIdentifiable(that: Class): IIdentifiable | null {\n  return AS_IDENTIFIABLE_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isIdentifiable(that: Class): that is IIdentifiable {\n  return asIdentifiable(that) !== null;\n}\n\n/**\n * Try to cast an instance of the model to {@link IHasKind}.\n */\nclass AsHasKindTransformer extends AbstractTransformer<IHasKind | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(that: AdministrativeInformation): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(that: AssetAdministrationShell): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IHasKind | null {\n    return that as IHasKind;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(that: SubmodelElementCollection): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(that: EmbeddedDataSpecification): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(that: DataSpecificationIec61360): IHasKind | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_HAS_KIND_TRANSFORMER = new AsHasKindTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IHasKind}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asHasKind(that: Class): IHasKind | null {\n  return AS_HAS_KIND_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isHasKind(that: Class): that is IHasKind {\n  return asHasKind(that) !== null;\n}\n\n/**\n * Try to cast an instance of the model to {@link IHasDataSpecification}.\n */\nclass AsHasDataSpecificationTransformer extends AbstractTransformer<IHasDataSpecification | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformRelationshipElement(\n    that: RelationshipElement\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformSubmodelElementList(\n    that: SubmodelElementList\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformProperty(that: Property): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformMultiLanguageProperty(\n    that: MultiLanguageProperty\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformRange(that: Range): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformBlob(that: Blob): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformFile(that: File): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformEntity(that: Entity): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformOperation(that: Operation): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  transformConceptDescription(that: ConceptDescription): IHasDataSpecification | null {\n    return that as IHasDataSpecification;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IHasDataSpecification | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_HAS_DATA_SPECIFICATION_TRANSFORMER = new AsHasDataSpecificationTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IHasDataSpecification}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asHasDataSpecification(that: Class): IHasDataSpecification | null {\n  return AS_HAS_DATA_SPECIFICATION_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isHasDataSpecification(that: Class): that is IHasDataSpecification {\n  return asHasDataSpecification(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link AdministrativeInformation}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asAdministrativeInformation(\n  that: Class\n): AdministrativeInformation | null {\n  return that instanceof AdministrativeInformation\n    ? <AdministrativeInformation>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isAdministrativeInformation(\n  that: Class\n): that is AdministrativeInformation {\n  return that instanceof AdministrativeInformation;\n}\n\n/**\n * Try to cast an instance of the model to {@link IQualifiable}.\n */\nclass AsQualifiableTransformer extends AbstractTransformer<IQualifiable | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformSubmodel(that: Submodel): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformRelationshipElement(that: RelationshipElement): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformSubmodelElementList(that: SubmodelElementList): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformProperty(that: Property): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformRange(that: Range): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformBlob(that: Blob): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformFile(that: File): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformEntity(that: Entity): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  transformOperation(that: Operation): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): IQualifiable | null {\n    return that as IQualifiable;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IQualifiable | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_QUALIFIABLE_TRANSFORMER = new AsQualifiableTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IQualifiable}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asQualifiable(that: Class): IQualifiable | null {\n  return AS_QUALIFIABLE_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isQualifiable(that: Class): that is IQualifiable {\n  return asQualifiable(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Qualifier}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asQualifier(that: Class): Qualifier | null {\n  return that instanceof Qualifier ? <Qualifier>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isQualifier(that: Class): that is Qualifier {\n  return that instanceof Qualifier;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link AssetAdministrationShell}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asAssetAdministrationShell(\n  that: Class\n): AssetAdministrationShell | null {\n  return that instanceof AssetAdministrationShell\n    ? <AssetAdministrationShell>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isAssetAdministrationShell(\n  that: Class\n): that is AssetAdministrationShell {\n  return that instanceof AssetAdministrationShell;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link AssetInformation}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asAssetInformation(that: Class): AssetInformation | null {\n  return that instanceof AssetInformation ? <AssetInformation>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isAssetInformation(that: Class): that is AssetInformation {\n  return that instanceof AssetInformation;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Resource}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asResource(that: Class): Resource | null {\n  return that instanceof Resource ? <Resource>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isResource(that: Class): that is Resource {\n  return that instanceof Resource;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link SpecificAssetId}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asSpecificAssetId(that: Class): SpecificAssetId | null {\n  return that instanceof SpecificAssetId ? <SpecificAssetId>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isSpecificAssetId(that: Class): that is SpecificAssetId {\n  return that instanceof SpecificAssetId;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Submodel}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asSubmodel(that: Class): Submodel | null {\n  return that instanceof Submodel ? <Submodel>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isSubmodel(that: Class): that is Submodel {\n  return that instanceof Submodel;\n}\n\n/**\n * Try to cast an instance of the model to {@link ISubmodelElement}.\n */\nclass AsSubmodelElementTransformer extends AbstractTransformer<ISubmodelElement | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformRelationshipElement(that: RelationshipElement): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformSubmodelElementList(that: SubmodelElementList): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformProperty(that: Property): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformRange(that: Range): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformReferenceElement(that: ReferenceElement): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformBlob(that: Blob): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformFile(that: File): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformEntity(that: Entity): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  transformOperation(that: Operation): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformCapability(that: Capability): ISubmodelElement | null {\n    return that as ISubmodelElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): ISubmodelElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_SUBMODEL_ELEMENT_TRANSFORMER = new AsSubmodelElementTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link ISubmodelElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asSubmodelElement(that: Class): ISubmodelElement | null {\n  return AS_SUBMODEL_ELEMENT_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isSubmodelElement(that: Class): that is ISubmodelElement {\n  return asSubmodelElement(that) !== null;\n}\n\n/**\n * Try to cast an instance of the model to {@link IRelationshipElement}.\n */\nclass AsRelationshipElementTransformer extends AbstractTransformer<IRelationshipElement | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformRelationshipElement(that: RelationshipElement): IRelationshipElement | null {\n    return that as IRelationshipElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(\n    that: MultiLanguageProperty\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IRelationshipElement | null {\n    return that as IRelationshipElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IRelationshipElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_RELATIONSHIP_ELEMENT_TRANSFORMER = new AsRelationshipElementTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IRelationshipElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asRelationshipElement(that: Class): IRelationshipElement | null {\n  return AS_RELATIONSHIP_ELEMENT_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isRelationshipElement(that: Class): that is IRelationshipElement {\n  return asRelationshipElement(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link SubmodelElementList}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asSubmodelElementList(that: Class): SubmodelElementList | null {\n  return that instanceof SubmodelElementList ? <SubmodelElementList>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isSubmodelElementList(that: Class): that is SubmodelElementList {\n  return that instanceof SubmodelElementList;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link SubmodelElementCollection}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asSubmodelElementCollection(\n  that: Class\n): SubmodelElementCollection | null {\n  return that instanceof SubmodelElementCollection\n    ? <SubmodelElementCollection>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isSubmodelElementCollection(\n  that: Class\n): that is SubmodelElementCollection {\n  return that instanceof SubmodelElementCollection;\n}\n\n/**\n * Try to cast an instance of the model to {@link IDataElement}.\n */\nclass AsDataElementTransformer extends AbstractTransformer<IDataElement | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformProperty(that: Property): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  transformRange(that: Range): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  transformReferenceElement(that: ReferenceElement): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  transformBlob(that: Blob): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  transformFile(that: File): IDataElement | null {\n    return that as IDataElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IDataElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_DATA_ELEMENT_TRANSFORMER = new AsDataElementTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IDataElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asDataElement(that: Class): IDataElement | null {\n  return AS_DATA_ELEMENT_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isDataElement(that: Class): that is IDataElement {\n  return asDataElement(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Property}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asProperty(that: Class): Property | null {\n  return that instanceof Property ? <Property>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isProperty(that: Class): that is Property {\n  return that instanceof Property;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link MultiLanguageProperty}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asMultiLanguageProperty(that: Class): MultiLanguageProperty | null {\n  return that instanceof MultiLanguageProperty ? <MultiLanguageProperty>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isMultiLanguageProperty(that: Class): that is MultiLanguageProperty {\n  return that instanceof MultiLanguageProperty;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Range}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asRange(that: Class): Range | null {\n  return that instanceof Range ? <Range>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isRange(that: Class): that is Range {\n  return that instanceof Range;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link ReferenceElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asReferenceElement(that: Class): ReferenceElement | null {\n  return that instanceof ReferenceElement ? <ReferenceElement>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isReferenceElement(that: Class): that is ReferenceElement {\n  return that instanceof ReferenceElement;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Blob}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asBlob(that: Class): Blob | null {\n  return that instanceof Blob ? <Blob>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isBlob(that: Class): that is Blob {\n  return that instanceof Blob;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link File}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asFile(that: Class): File | null {\n  return that instanceof File ? <File>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isFile(that: Class): that is File {\n  return that instanceof File;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link AnnotatedRelationshipElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asAnnotatedRelationshipElement(\n  that: Class\n): AnnotatedRelationshipElement | null {\n  return that instanceof AnnotatedRelationshipElement\n    ? <AnnotatedRelationshipElement>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isAnnotatedRelationshipElement(\n  that: Class\n): that is AnnotatedRelationshipElement {\n  return that instanceof AnnotatedRelationshipElement;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Entity}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asEntity(that: Class): Entity | null {\n  return that instanceof Entity ? <Entity>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isEntity(that: Class): that is Entity {\n  return that instanceof Entity;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link EventPayload}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asEventPayload(that: Class): EventPayload | null {\n  return that instanceof EventPayload ? <EventPayload>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isEventPayload(that: Class): that is EventPayload {\n  return that instanceof EventPayload;\n}\n\n/**\n * Try to cast an instance of the model to {@link IEventElement}.\n */\nclass AsEventElementTransformer extends AbstractTransformer<IEventElement | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(that: MultiLanguageProperty): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformBasicEventElement(that: BasicEventElement): IEventElement | null {\n    return that as IEventElement;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(that: LangStringNameType): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(that: LangStringTextType): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IEventElement | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_EVENT_ELEMENT_TRANSFORMER = new AsEventElementTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IEventElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asEventElement(that: Class): IEventElement | null {\n  return AS_EVENT_ELEMENT_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isEventElement(that: Class): that is IEventElement {\n  return asEventElement(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link BasicEventElement}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asBasicEventElement(that: Class): BasicEventElement | null {\n  return that instanceof BasicEventElement ? <BasicEventElement>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isBasicEventElement(that: Class): that is BasicEventElement {\n  return that instanceof BasicEventElement;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Operation}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asOperation(that: Class): Operation | null {\n  return that instanceof Operation ? <Operation>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isOperation(that: Class): that is Operation {\n  return that instanceof Operation;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link OperationVariable}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asOperationVariable(that: Class): OperationVariable | null {\n  return that instanceof OperationVariable ? <OperationVariable>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isOperationVariable(that: Class): that is OperationVariable {\n  return that instanceof OperationVariable;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Capability}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asCapability(that: Class): Capability | null {\n  return that instanceof Capability ? <Capability>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isCapability(that: Class): that is Capability {\n  return that instanceof Capability;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link ConceptDescription}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asConceptDescription(that: Class): ConceptDescription | null {\n  return that instanceof ConceptDescription ? <ConceptDescription>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isConceptDescription(that: Class): that is ConceptDescription {\n  return that instanceof ConceptDescription;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Reference}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asReference(that: Class): Reference | null {\n  return that instanceof Reference ? <Reference>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isReference(that: Class): that is Reference {\n  return that instanceof Reference;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Key}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asKey(that: Class): Key | null {\n  return that instanceof Key ? <Key>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isKey(that: Class): that is Key {\n  return that instanceof Key;\n}\n\n/**\n * Try to cast an instance of the model to {@link IAbstractLangString}.\n */\nclass AsAbstractLangStringTransformer extends AbstractTransformer<IAbstractLangString | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(that: RelationshipElement): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(that: SubmodelElementList): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(\n    that: MultiLanguageProperty\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(that: BasicEventElement): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(that: OperationVariable): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(that: ConceptDescription): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformLangStringNameType(that: LangStringNameType): IAbstractLangString | null {\n    return that as IAbstractLangString;\n  }\n\n  transformLangStringTextType(that: LangStringTextType): IAbstractLangString | null {\n    return that as IAbstractLangString;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(that: ValueReferencePair): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IAbstractLangString | null {\n    return that as IAbstractLangString;\n  }\n\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IAbstractLangString | null {\n    return that as IAbstractLangString;\n  }\n\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IAbstractLangString | null {\n    return that as IAbstractLangString;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IAbstractLangString | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst AS_ABSTRACT_LANG_STRING_TRANSFORMER = new AsAbstractLangStringTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IAbstractLangString}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asAbstractLangString(that: Class): IAbstractLangString | null {\n  return AS_ABSTRACT_LANG_STRING_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isAbstractLangString(that: Class): that is IAbstractLangString {\n  return asAbstractLangString(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LangStringNameType}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLangStringNameType(that: Class): LangStringNameType | null {\n  return that instanceof LangStringNameType ? <LangStringNameType>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLangStringNameType(that: Class): that is LangStringNameType {\n  return that instanceof LangStringNameType;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LangStringTextType}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLangStringTextType(that: Class): LangStringTextType | null {\n  return that instanceof LangStringTextType ? <LangStringTextType>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLangStringTextType(that: Class): that is LangStringTextType {\n  return that instanceof LangStringTextType;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link Environment}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asEnvironment(that: Class): Environment | null {\n  return that instanceof Environment ? <Environment>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isEnvironment(that: Class): that is Environment {\n  return that instanceof Environment;\n}\n\n/**\n * Try to cast an instance of the model to {@link IDataSpecificationContent}.\n */\nclass AsDataSpecificationContentTransformer extends AbstractTransformer<IDataSpecificationContent | null> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtension(that: Extension): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformation(\n    that: AdministrativeInformation\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifier(that: Qualifier): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShell(\n    that: AssetAdministrationShell\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformation(that: AssetInformation): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResource(that: Resource): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetId(that: SpecificAssetId): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodel(that: Submodel): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElement(\n    that: RelationshipElement\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementList(\n    that: SubmodelElementList\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollection(\n    that: SubmodelElementCollection\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformProperty(that: Property): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguageProperty(\n    that: MultiLanguageProperty\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRange(that: Range): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElement(that: ReferenceElement): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlob(that: Blob): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFile(that: File): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElement(\n    that: AnnotatedRelationshipElement\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntity(that: Entity): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayload(that: EventPayload): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElement(\n    that: BasicEventElement\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperation(that: Operation): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariable(\n    that: OperationVariable\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapability(that: Capability): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescription(\n    that: ConceptDescription\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReference(that: Reference): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKey(that: Key): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameType(\n    that: LangStringNameType\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextType(\n    that: LangStringTextType\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironment(that: Environment): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecification(\n    that: EmbeddedDataSpecification\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelType(that: LevelType): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePair(\n    that: ValueReferencePair\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueList(that: ValueList): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360(\n    that: LangStringPreferredNameTypeIec61360\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360(\n    that: LangStringShortNameTypeIec61360\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360(\n    that: LangStringDefinitionTypeIec61360\n  ): IDataSpecificationContent | null {\n    return null;\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  transformDataSpecificationIec61360(\n    that: DataSpecificationIec61360\n  ): IDataSpecificationContent | null {\n    return that as IDataSpecificationContent;\n  }\n}\n\nconst AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER =\n  new AsDataSpecificationContentTransformer();\n\n/**\n * Try to cast `that` instance to\n * the interface {@link IDataSpecificationContent}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asDataSpecificationContent(\n  that: Class\n): IDataSpecificationContent | null {\n  return AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER.transform(that);\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isDataSpecificationContent(\n  that: Class\n): that is IDataSpecificationContent {\n  return asDataSpecificationContent(that) !== null;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link EmbeddedDataSpecification}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asEmbeddedDataSpecification(\n  that: Class\n): EmbeddedDataSpecification | null {\n  return that instanceof EmbeddedDataSpecification\n    ? <EmbeddedDataSpecification>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isEmbeddedDataSpecification(\n  that: Class\n): that is EmbeddedDataSpecification {\n  return that instanceof EmbeddedDataSpecification;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LevelType}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLevelType(that: Class): LevelType | null {\n  return that instanceof LevelType ? <LevelType>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLevelType(that: Class): that is LevelType {\n  return that instanceof LevelType;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link ValueReferencePair}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asValueReferencePair(that: Class): ValueReferencePair | null {\n  return that instanceof ValueReferencePair ? <ValueReferencePair>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isValueReferencePair(that: Class): that is ValueReferencePair {\n  return that instanceof ValueReferencePair;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link ValueList}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asValueList(that: Class): ValueList | null {\n  return that instanceof ValueList ? <ValueList>that : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isValueList(that: Class): that is ValueList {\n  return that instanceof ValueList;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LangStringPreferredNameTypeIec61360}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLangStringPreferredNameTypeIec61360(\n  that: Class\n): LangStringPreferredNameTypeIec61360 | null {\n  return that instanceof LangStringPreferredNameTypeIec61360\n    ? <LangStringPreferredNameTypeIec61360>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLangStringPreferredNameTypeIec61360(\n  that: Class\n): that is LangStringPreferredNameTypeIec61360 {\n  return that instanceof LangStringPreferredNameTypeIec61360;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LangStringShortNameTypeIec61360}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLangStringShortNameTypeIec61360(\n  that: Class\n): LangStringShortNameTypeIec61360 | null {\n  return that instanceof LangStringShortNameTypeIec61360\n    ? <LangStringShortNameTypeIec61360>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLangStringShortNameTypeIec61360(\n  that: Class\n): that is LangStringShortNameTypeIec61360 {\n  return that instanceof LangStringShortNameTypeIec61360;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link LangStringDefinitionTypeIec61360}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asLangStringDefinitionTypeIec61360(\n  that: Class\n): LangStringDefinitionTypeIec61360 | null {\n  return that instanceof LangStringDefinitionTypeIec61360\n    ? <LangStringDefinitionTypeIec61360>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isLangStringDefinitionTypeIec61360(\n  that: Class\n): that is LangStringDefinitionTypeIec61360 {\n  return that instanceof LangStringDefinitionTypeIec61360;\n}\n\n/**\n * Try to cast `that` instance to\n * the class {@link DataSpecificationIec61360}.\n *\n * @param that - instance to be casted\n * @returns - casted `that` if cast successful, or `null`\n */\nexport function asDataSpecificationIec61360(\n  that: Class\n): DataSpecificationIec61360 | null {\n  return that instanceof DataSpecificationIec61360\n    ? <DataSpecificationIec61360>that\n    : null;\n}\n\n/**\n * Check the type of `that` instance.\n *\n * @param that - instance to be type-checked\n * @returns `true` if the type check is successful\n */\nexport function isDataSpecificationIec61360(\n  that: Class\n): that is DataSpecificationIec61360 {\n  return that instanceof DataSpecificationIec61360;\n}\n\nclass TypeMatcher extends AbstractTransformerWithContext<Readonly<Class>, boolean> {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformExtensionWithContext(that: Extension, other: Class): boolean {\n    return isExtension(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAdministrativeInformationWithContext(\n    that: AdministrativeInformation,\n    other: Class\n  ): boolean {\n    return isAdministrativeInformation(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformQualifierWithContext(that: Qualifier, other: Class): boolean {\n    return isQualifier(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetAdministrationShellWithContext(\n    that: AssetAdministrationShell,\n    other: Class\n  ): boolean {\n    return isAssetAdministrationShell(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAssetInformationWithContext(that: AssetInformation, other: Class): boolean {\n    return isAssetInformation(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformResourceWithContext(that: Resource, other: Class): boolean {\n    return isResource(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSpecificAssetIdWithContext(that: SpecificAssetId, other: Class): boolean {\n    return isSpecificAssetId(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelWithContext(that: Submodel, other: Class): boolean {\n    return isSubmodel(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRelationshipElementWithContext(\n    that: RelationshipElement,\n    other: Class\n  ): boolean {\n    return isRelationshipElement(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementListWithContext(\n    that: SubmodelElementList,\n    other: Class\n  ): boolean {\n    return isSubmodelElementList(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformSubmodelElementCollectionWithContext(\n    that: SubmodelElementCollection,\n    other: Class\n  ): boolean {\n    return isSubmodelElementCollection(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformPropertyWithContext(that: Property, other: Class): boolean {\n    return isProperty(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformMultiLanguagePropertyWithContext(\n    that: MultiLanguageProperty,\n    other: Class\n  ): boolean {\n    return isMultiLanguageProperty(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformRangeWithContext(that: Range, other: Class): boolean {\n    return isRange(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceElementWithContext(that: ReferenceElement, other: Class): boolean {\n    return isReferenceElement(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBlobWithContext(that: Blob, other: Class): boolean {\n    return isBlob(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformFileWithContext(that: File, other: Class): boolean {\n    return isFile(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformAnnotatedRelationshipElementWithContext(\n    that: AnnotatedRelationshipElement,\n    other: Class\n  ): boolean {\n    return isAnnotatedRelationshipElement(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEntityWithContext(that: Entity, other: Class): boolean {\n    return isEntity(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEventPayloadWithContext(that: EventPayload, other: Class): boolean {\n    return isEventPayload(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformBasicEventElementWithContext(\n    that: BasicEventElement,\n    other: Class\n  ): boolean {\n    return isBasicEventElement(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationWithContext(that: Operation, other: Class): boolean {\n    return isOperation(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformOperationVariableWithContext(\n    that: OperationVariable,\n    other: Class\n  ): boolean {\n    return isOperationVariable(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformCapabilityWithContext(that: Capability, other: Class): boolean {\n    return isCapability(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformConceptDescriptionWithContext(\n    that: ConceptDescription,\n    other: Class\n  ): boolean {\n    return isConceptDescription(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformReferenceWithContext(that: Reference, other: Class): boolean {\n    return isReference(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformKeyWithContext(that: Key, other: Class): boolean {\n    return isKey(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringNameTypeWithContext(\n    that: LangStringNameType,\n    other: Class\n  ): boolean {\n    return isLangStringNameType(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringTextTypeWithContext(\n    that: LangStringTextType,\n    other: Class\n  ): boolean {\n    return isLangStringTextType(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEnvironmentWithContext(that: Environment, other: Class): boolean {\n    return isEnvironment(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformEmbeddedDataSpecificationWithContext(\n    that: EmbeddedDataSpecification,\n    other: Class\n  ): boolean {\n    return isEmbeddedDataSpecification(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLevelTypeWithContext(that: LevelType, other: Class): boolean {\n    return isLevelType(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueReferencePairWithContext(\n    that: ValueReferencePair,\n    other: Class\n  ): boolean {\n    return isValueReferencePair(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformValueListWithContext(that: ValueList, other: Class): boolean {\n    return isValueList(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringPreferredNameTypeIec61360WithContext(\n    that: LangStringPreferredNameTypeIec61360,\n    other: Class\n  ): boolean {\n    return isLangStringPreferredNameTypeIec61360(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringShortNameTypeIec61360WithContext(\n    that: LangStringShortNameTypeIec61360,\n    other: Class\n  ): boolean {\n    return isLangStringShortNameTypeIec61360(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformLangStringDefinitionTypeIec61360WithContext(\n    that: LangStringDefinitionTypeIec61360,\n    other: Class\n  ): boolean {\n    return isLangStringDefinitionTypeIec61360(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  transformDataSpecificationIec61360WithContext(\n    that: DataSpecificationIec61360,\n    other: Class\n  ): boolean {\n    return isDataSpecificationIec61360(other);\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nconst TYPE_MATCHER = new TypeMatcher();\n\n/**\n * Check whether the type of `that` matches the type of `other` instance.\n *\n * @remarks\n * We check with `is*` function. Hence, if the class of `other` is a subclass of\n * the class of `that`, we confirm the match.\n *\n * @param that - standard instance\n * @param other - instance whose type is compared against `that`\n */\nexport function typesMatch<ClassT extends Class>(\n  that: ClassT,\n  other: Class\n): other is ClassT {\n  return TYPE_MATCHER.transformWithContext(that, other);\n}\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAzFA,CA2FA;AACA;AAEA;AACA;AACA,GACA,UAAY,CAAAA,SAAS,uBAATA,SAAS,EAATA,SAAS,CAATA,SAAS,6BAATA,SAAS,CAATA,SAAS,6DAATA,SAAS,CAATA,SAAS,6BAATA,SAAS,CAATA,SAAS,2DAATA,SAAS,CAATA,SAAS,2CAATA,SAAS,CAATA,SAAS,2BAATA,SAAS,CAATA,SAAS,yCAATA,SAAS,CAATA,SAAS,2BAATA,SAAS,CAATA,SAAS,iDAATA,SAAS,CAATA,SAAS,iDAATA,SAAS,CAATA,SAAS,8DAATA,SAAS,CAATA,SAAS,4BAATA,SAAS,CAATA,SAAS,sDAATA,SAAS,CAATA,SAAS,sBAATA,SAAS,CAATA,SAAS,4CAATA,SAAS,CAATA,SAAS,oBAATA,SAAS,CAATA,SAAS,oBAATA,SAAS,CAATA,SAAS,oEAATA,SAAS,CAATA,SAAS,wBAATA,SAAS,CAATA,SAAS,oCAATA,SAAS,CAATA,SAAS,8CAATA,SAAS,CAATA,SAAS,8BAATA,SAAS,CAATA,SAAS,8CAATA,SAAS,CAATA,SAAS,gCAATA,SAAS,CAATA,SAAS,gDAATA,SAAS,CAATA,SAAS,8BAATA,SAAS,CAATA,SAAS,kBAATA,SAAS,CAATA,SAAS,gDAATA,SAAS,CAATA,SAAS,gDAATA,SAAS,CAATA,S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U,CAAGA,UAAU,CAC5B,IAAI,CAACvE,0BAA0B,CAAGA,0BAA0B,CAC9D,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAiN,kBAAkB,QACrB,CAAAnP,KAEV,CACE;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAuFA;AACF;AACA,KACE,CAACsD,qBAAqBA,CAAA,CAAgC,CACpD,GAAI,IAAI,CAACC,UAAU,GAAK,IAAI,CAAE,CAC5B,MAAO,IAAI,CAACA,UAAU,CACxB,CACA,OACF,CAEA;AACF;AACA,KACE,CAACC,sBAAsBA,CAAA,CAAyC,CAC9D,GAAI,IAAI,CAACC,WAAW,GAAK,IAAI,CAAE,CAC7B,MAAO,IAAI,CAACA,WAAW,CACzB,CACA,OACF,CAEA;AACF;AACA,KACE,CAACC,sBAAsBA,CAAA,CAAyC,CAC9D,GAAI,IAAI,CAACC,WAAW,GAAK,IAAI,CAAE,CAC7B,MAAO,IAAI,CAACA,WAAW,CACzB,CACA,OACF,CAEA;AACF;AACA,KACE,CAAC5B,qCAAqCA,CAAA,CAAgD,CACpF,GAAI,IAAI,CAACC,0BAA0B,GAAK,IAAI,CAAE,CAC5C,MAAO,IAAI,CAACA,0BAA0B,CACxC,CACA,OACF,CAEA;AACF;AACA,KACE,CAACkN,mBAAmBA,CAAA,CAAgC,CAClD,GAAI,IAAI,CAACC,QAAQ,GAAK,IAAI,CAAE,CAC1B,MAAO,IAAI,CAACA,QAAQ,CACtB,CACA,OACF,CAEA;AAC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QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACd,WAAW,CAAGA,WAAW,CAC9B,IAAI,CAACa,EAAE,CAAGA,EAAE,CACZ,IAAI,CAACV,cAAc,CAAGA,cAAc,CACpC,IAAI,CAAC9B,0BAA0B,CAAGA,0BAA0B,CAC5D,IAAI,CAACmN,QAAQ,CAAGA,QAAQ,CAC1B,CACF,CAEA;AACA;AACA,GACA,UAAY,CAAAK,cAAc,uBAAdA,cAAc,EAAdA,cAAc,CAAdA,cAAc,6CAAdA,cAAc,CAAdA,cAAc,6CAAd,CAAAA,cAAc,OAW1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,UAAUC,kBAAkBA,CAAA,CAAqC,CACtE;AACA;AACA;AACA,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AAC3B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,SAAS,QAAS,CAAA5P,KAAM,CACnC;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAyBA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC,GAAI,IAAI,CAACkP,kBAAkB,GAAK,IAAI,CAAE,CACpC,KAAM,KAAI,CAACA,kBAAkB,CAC/B,CAEA,MAAO,IAAI,CAACC,IAAI,CAClB,CAEA;AACF;AACA;AACA;AACA,KACE,CAACjP,OAAOA,CAAA,CAA4B,CAClC,GAAI,IAAI,CAACgP,kBAAkB,GAAK,IAAI,CAAE,CACpC,KAAM,KAAI,CAACA,kBAAkB,CAE7B,MAAO,IAAI,CAACA,kBAAkB,CAAChP,OAAO,EAAE,CAC1C,CAEA,IAAK,KAAM,CAAAC,MAAM,GAAI,KAAI,CAACgP,IAAI,CAAE,CAC9B,KAAM,CAAAhP,MAAM,CAEZ,MAAOA,MAAM,CAACD,OAAO,EAAE,CACzB,CACF,CAEA;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAAC8O,cAAc,CAAC,IAAI,CAAC,CAC9B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE5O,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAAC+O,yBAAyB,CAAC,IAAI,CAAE5O,OAAO,CAAC,CAClD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC0O,kBAAkB,CAAC,IAAI,CAAC,CAC7C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACExO,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAAC2O,6BAA6B,CAAC,IAAI,CAAE9O,OAAO,CAAC,CACjE,CAEAO,WAAWA,CACT2B,IAAoB,CACpBwM,IAAgB,CAChBD,kBAAoC,CAAG,IAAI,CAC3C,CACA,KAAK,EAAE,CACP,IAAI,CAACvM,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACwM,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACD,kBAAkB,CAAGA,kBAAkB,CAC9C,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAM,GAAG,QAAS,CAAAnQ,KAAM,CAC7B;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbE,CAqBA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACmP,QAAQ,CAAC,IAAI,CAAC,CACxB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEjP,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACoP,mBAAmB,CAAC,IAAI,CAAEjP,OAAO,CAAC,CAC5C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC+O,YAAY,CAAC,IAAI,CAAC,CACvC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE7O,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACgP,uBAAuB,CAAC,IAAI,CAAEnP,OAAO,CAAC,CAC3D,CAEAO,WAAWA,CAAC2B,IAAc,CAAEzB,KAAa,CAAE,CACzC,KAAK,EAAE,CACP,IAAI,CAACyB,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACzB,KAAK,CAAGA,KAAK,CACpB,CACF,CAEA;AACA;AACA,GACA,UAAY,CAAA2O,QAAQ,uBAARA,QAAQ,EAARA,QAAQ,CAARA,QAAQ,mEAARA,QAAQ,CAARA,QAAQ,2DAARA,QAAQ,CAARA,QAAQ,6CAARA,QAAQ,CAARA,QAAQ,mBAARA,QAAQ,CAARA,QAAQ,+BAARA,QAAQ,CAARA,QAAQ,+CAARA,QAAQ,CAARA,QAAQ,iCAARA,QAAQ,CAARA,QAAQ,uBAARA,QAAQ,CAARA,QAAQ,mCAARA,QAAQ,CAARA,QAAQ,mBAARA,QAAQ,CAARA,QAAQ,8CAARA,QAAQ,CAARA,QAAQ,0CAARA,QAAQ,CAARA,QAAQ,oCAARA,QAAQ,CAARA,QAAQ,sDAARA,QAAQ,CAARA,QAAQ,8BAARA,QAAQ,CAARA,QAAQ,4BAARA,QAAQ,CAARA,QAAQ,sBAARA,QAAQ,CAARA,QAAQ,8BAARA,QAAQ,CAARA,QAAQ,4CAARA,QAAQ,CAARA,QAAQ,kDAARA,QAAQ,CAARA,QAAQ,4BAARA,QAAQ,CAARA,QAAQ,0CAARA,QAAQ,CAARA,QAAQ,8DAARA,QAAQ,CAARA,QAAQ,wDAAR,CAAAA,QAAQ,OAoFpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,UAAUC,YAAYA,CAAA,CAA+B,CAC1D;AACA;AACA;AACA,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,EAAC,CAAE;AACnB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACpB,KAAgB,GAAE,CAAE;AACtB,CAEA;AACA;AACA,GACA,UAAY,CAAAhQ,cAAc,uBAAdA,cAAc,EAAdA,cAAc,CAAdA,cAAc,uBAAdA,cAAc,CAAdA,cAAc,mCAAdA,cAAc,CAAdA,cAAc,yBAAdA,cAAc,CAAdA,cAAc,mBAAdA,cAAc,CAAdA,cAAc,mBAAdA,cAAc,CAAdA,cAAc,2BAAdA,cAAc,CAAdA,cAAc,yBAAdA,cAAc,CAAdA,cAAc,uBAAdA,cAAc,CAAdA,cAAc,2BAAdA,cAAc,CAAdA,cAAc,qBAAdA,cAAc,CAAdA,cAAc,oBAAdA,cAAc,CAAdA,cAAc,wBAAdA,cAAc,CAAdA,cAAc,8BAAdA,cAAc,CAAdA,cAAc,sBAAdA,cAAc,CAAdA,cAAc,gCAAdA,cAAc,CAAdA,cAAc,8BAAdA,cAAc,CAAdA,cAAc,kBAAdA,cAAc,CAAdA,cAAc,0BAAdA,cAAc,CAAdA,cAAc,oBAAdA,cAAc,CAAdA,cAAc,0CAAdA,cAAc,CAAdA,cAAc,gDAAdA,cAAc,CAAdA,cAAc,gDAAdA,cAAc,CAAdA,cAAc,0CAAdA,cAAc,CAAdA,cAAc,sBAAdA,cAAc,CAAdA,cAAc,wBAAdA,cAAc,CAAdA,cAAc,oBAAdA,cAAc,CAAdA,cAAc,oCAAdA,cAAc,CAAdA,cAAc,kCAAdA,cAAc,CAAdA,cAAc,oCAAdA,cAAc,CAAdA,cAAc,4CAAd,CAAAA,cAAc,OAiC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,UAAUiQ,kBAAkBA,CAAA,CAAqC,CACtE;AACA;AACA;AACA,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,EAAC,CAAE;AACzB,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC1B,KAAsB,GAAE,CAAE;AAC5B,CAEA;AACA;AACA,GAFA,CAeA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,kBAAkB,QAAS,CAAA3Q,KAAqC,CAC3E;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAAC2P,uBAAuB,CAAC,IAAI,CAAC,CACvC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEzP,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAAC4P,kCAAkC,CAAC,IAAI,CAAEzP,OAAO,CAAC,CAC3D,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACuP,2BAA2B,CAAC,IAAI,CAAC,CACtD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACErP,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACwP,sCAAsC,CAAC,IAAI,CAAE3P,OAAO,CAAC,CAC1E,CAEAO,WAAWA,CAACqP,QAAgB,CAAEC,IAAY,CAAE,CAC1C,KAAK,EAAE,CACP,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,kBAAkB,QAAS,CAAAlR,KAAqC,CAC3E;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACkQ,uBAAuB,CAAC,IAAI,CAAC,CACvC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEhQ,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACmQ,kCAAkC,CAAC,IAAI,CAAEhQ,OAAO,CAAC,CAC3D,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC8P,2BAA2B,CAAC,IAAI,CAAC,CACtD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE5P,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAAC+P,sCAAsC,CAAC,IAAI,CAAElQ,OAAO,CAAC,CAC1E,CAEAO,WAAWA,CAACqP,QAAgB,CAAEC,IAAY,CAAE,CAC1C,KAAK,EAAE,CACP,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAM,WAAW,QAAS,CAAAvR,KAAM,CACrC;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAeA;AACF;AACA,KACE,CAACsR,oCAAoCA,CAAA,CAA+C,CAClF,GAAI,IAAI,CAACC,yBAAyB,GAAK,IAAI,CAAE,CAC3C,MAAO,IAAI,CAACA,yBAAyB,CACvC,CACA,OACF,CAEA;AACF;AACA,KACE,CAAC3N,oBAAoBA,CAAA,CAA+B,CAClD,GAAI,IAAI,CAACC,SAAS,GAAK,IAAI,CAAE,CAC3B,MAAO,IAAI,CAACA,SAAS,CACvB,CACA,OACF,CAEA;AACF;AACA,KACE,CAAC2N,8BAA8BA,CAAA,CAAyC,CACtE,GAAI,IAAI,CAACC,mBAAmB,GAAK,IAAI,CAAE,CACrC,MAAO,IAAI,CAACA,mBAAmB,CACjC,CACA,OACF,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAAChR,WAAWA,CAAA,CAA4B,CACtC,GAAI,IAAI,CAAC8Q,yBAAyB,GAAK,IAAI,CAAE,CAC3C,MAAO,IAAI,CAACA,yBAAyB,CACvC,CAEA,GAAI,IAAI,CAAC1N,SAAS,GAAK,IAAI,CAAE,CAC3B,MAAO,IAAI,CAACA,SAAS,CACvB,CAEA,GAAI,IAAI,CAAC4N,mBAAmB,GAAK,IAAI,CAAE,CACrC,MAAO,IAAI,CAACA,mBAAmB,CACjC,CACF,CAEA;AACF;AACA;AACA;AACA,KACE,CAAC9Q,OAAOA,CAAA,CAA4B,CAClC,GAAI,IAAI,CAAC4Q,yBAAyB,GAAK,IAAI,CAAE,CAC3C,IAAK,KAAM,CAAA3Q,MAAM,GAAI,KAAI,CAAC2Q,yBAAyB,CAAE,CACnD,KAAM,CAAA3Q,MAAM,CAEZ,MAAOA,MAAM,CAACD,OAAO,EAAE,CACzB,CACF,CAEA,GAAI,IAAI,CAACkD,SAAS,GAAK,IAAI,CAAE,CAC3B,IAAK,KAAM,CAAAhD,WAAW,GAAI,KAAI,CAACgD,SAAS,CAAE,CACxC,KAAM,CAAAhD,WAAW,CAEjB,MAAOA,WAAW,CAACF,OAAO,EAAE,CAC9B,CACF,CAEA,GAAI,IAAI,CAAC8Q,mBAAmB,GAAK,IAAI,CAAE,CACrC,IAAK,KAAM,CAAAxN,cAAc,GAAI,KAAI,CAACwN,mBAAmB,CAAE,CACrD,KAAM,CAAAxN,cAAc,CAEpB,MAAOA,cAAc,CAACtD,OAAO,EAAE,CACjC,CACF,CACF,CAEA;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAAC2Q,gBAAgB,CAAC,IAAI,CAAC,CAChC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEzQ,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAAC4Q,2BAA2B,CAAC,IAAI,CAAEzQ,OAAO,CAAC,CACpD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACuQ,oBAAoB,CAAC,IAAI,CAAC,CAC/C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACErQ,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACwQ,+BAA+B,CAAC,IAAI,CAAE3Q,OAAO,CAAC,CACnE,CAEAO,WAAWA,CACT8P,yBAAiE,CAAG,IAAI,CACxE1N,SAAiC,CAAG,IAAI,CACxC4N,mBAAqD,CAAG,IAAI,CAC5D,CACA,KAAK,EAAE,CACP,IAAI,CAACF,yBAAyB,CAAGA,yBAAyB,CAC1D,IAAI,CAAC1N,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAAC4N,mBAAmB,CAAGA,mBAAmB,CAChD,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZA,CAaA;AAKA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,yBAAyB,QAAS,CAAAhS,KAAM,CACnD;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC,KAAM,KAAI,CAACsR,wBAAwB,CAEnC,GAAI,IAAI,CAACC,iBAAiB,GAAK,IAAI,CAAE,CACnC,KAAM,KAAI,CAACA,iBAAiB,CAC9B,CACF,CAEA;AACF;AACA;AACA;AACA,KACE,CAACrR,OAAOA,CAAA,CAA4B,CAClC,KAAM,KAAI,CAACoR,wBAAwB,CAEnC,MAAO,IAAI,CAACA,wBAAwB,CAACpR,OAAO,EAAE,CAE9C,GAAI,IAAI,CAACqR,iBAAiB,GAAK,IAAI,CAAE,CACnC,KAAM,KAAI,CAACA,iBAAiB,CAE5B,MAAO,IAAI,CAACA,iBAAiB,CAACrR,OAAO,EAAE,CACzC,CACF,CAEA;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACkR,8BAA8B,CAAC,IAAI,CAAC,CAC9C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEhR,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACmR,yCAAyC,CAAC,IAAI,CAAEhR,OAAO,CAAC,CAClE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC8Q,kCAAkC,CAAC,IAAI,CAAC,CAC7D,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE5Q,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAAC+Q,6CAA6C,CAAC,IAAI,CAAElR,OAAO,CAAC,CACjF,CAEAO,WAAWA,CACTsQ,wBAAmD,CACnDC,iBAAmC,CAAG,IAAI,CAC1C,CACA,KAAK,EAAE,CACP,IAAI,CAACD,wBAAwB,CAAGA,wBAAwB,CACxD,IAAI,CAACC,iBAAiB,CAAGA,iBAAiB,CAC5C,CACF,CAEA,UAAY,CAAAK,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,CAAhBA,gBAAgB,mBAAhBA,gBAAgB,CAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAhBA,gBAAgB,+CAAhBA,gBAAgB,CAAhBA,gBAAgB,uCAAhBA,gBAAgB,CAAhBA,gBAAgB,mCAAhBA,gBAAgB,CAAhBA,gBAAgB,yCAAhBA,gBAAgB,CAAhBA,gBAAgB,iCAAhBA,gBAAgB,CAAhBA,gBAAgB,6BAAhBA,gBAAgB,CAAhBA,gBAAgB,mCAAhBA,gBAAgB,CAAhBA,gBAAgB,yBAAhBA,gBAAgB,CAAhBA,gBAAgB,kBAAhBA,gBAAgB,CAAhBA,gBAAgB,oBAAhBA,gBAAgB,CAAhBA,gBAAgB,4BAAhBA,gBAAgB,CAAhBA,gBAAgB,0CAAhBA,gBAAgB,CAAhBA,gBAAgB,oBAAhBA,gBAAgB,CAAhBA,gBAAgB,8BAAhBA,gBAAgB,CAAhBA,gBAAgB,oBAAhBA,gBAAgB,CAAhBA,gBAAgB,oBAAhBA,gBAAgB,CAAhBA,gBAAgB,0BAAhB,CAAAA,gBAAgB,OAsI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,UAAUC,oBAAoBA,CAAA,CAAuC,CAC1E;AACA;AACA;AACA,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,EAAC,CAAE;AAC3B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC5B,KAAwB,GAAE,CAAE;AAC9B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,SAAS,QAAS,CAAAzS,KAAM,CACnC;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAoBA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACyR,cAAc,CAAC,IAAI,CAAC,CAC9B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEvR,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAAC0R,yBAAyB,CAAC,IAAI,CAAEvR,OAAO,CAAC,CAClD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACqR,kBAAkB,CAAC,IAAI,CAAC,CAC7C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACEnR,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACsR,6BAA6B,CAAC,IAAI,CAAEzR,OAAO,CAAC,CACjE,CAEAO,WAAWA,CAACiI,GAAY,CAAEkJ,GAAY,CAAEC,GAAY,CAAElJ,GAAY,CAAE,CAClE,KAAK,EAAE,CACP,IAAI,CAACD,GAAG,CAAGA,GAAG,CACd,IAAI,CAACkJ,GAAG,CAAGA,GAAG,CACd,IAAI,CAACC,GAAG,CAAGA,GAAG,CACd,IAAI,CAAClJ,GAAG,CAAGA,GAAG,CAChB,CACF,CAEA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAmJ,kBAAkB,QAAS,CAAAhT,KAAM,CAC5C;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAcA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC,KAAM,KAAI,CAACsC,OAAO,CACpB,CAEA;AACF;AACA;AACA;AACA,KACE,CAACpC,OAAOA,CAAA,CAA4B,CAClC,KAAM,KAAI,CAACoC,OAAO,CAElB,MAAO,IAAI,CAACA,OAAO,CAACpC,OAAO,EAAE,CAC/B,CAEA;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACgS,uBAAuB,CAAC,IAAI,CAAC,CACvC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE9R,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACiS,kCAAkC,CAAC,IAAI,CAAE9R,OAAO,CAAC,CAC3D,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC4R,2BAA2B,CAAC,IAAI,CAAC,CACtD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE1R,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAAC6R,sCAAsC,CAAC,IAAI,CAAEhS,OAAO,CAAC,CAC1E,CAEAO,WAAWA,CAACE,KAAa,CAAEoB,OAAkB,CAAE,CAC7C,KAAK,EAAE,CACP,IAAI,CAACpB,KAAK,CAAGA,KAAK,CAClB,IAAI,CAACoB,OAAO,CAAGA,OAAO,CACxB,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAoQ,SAAS,QAAS,CAAArT,KAAM,CACnC;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAKA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC,MAAO,IAAI,CAAC2S,mBAAmB,CACjC,CAEA;AACF;AACA;AACA;AACA,KACE,CAACzS,OAAOA,CAAA,CAA4B,CAClC,IAAK,KAAM,CAAAC,MAAM,GAAI,KAAI,CAACwS,mBAAmB,CAAE,CAC7C,KAAM,CAAAxS,MAAM,CAEZ,MAAOA,MAAM,CAACD,OAAO,EAAE,CACzB,CACF,CAEA;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACsS,cAAc,CAAC,IAAI,CAAC,CAC9B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEpS,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACuS,yBAAyB,CAAC,IAAI,CAAEpS,OAAO,CAAC,CAClD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACkS,kBAAkB,CAAC,IAAI,CAAC,CAC7C,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACEhS,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACmS,6BAA6B,CAAC,IAAI,CAAEtS,OAAO,CAAC,CACjE,CAEAO,WAAWA,CAAC2R,mBAA8C,CAAE,CAC1D,KAAK,EAAE,CACP,IAAI,CAACA,mBAAmB,CAAGA,mBAAmB,CAChD,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,mCAAmC,QACtC,CAAA3T,KAEV,CACE;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAAC2S,wCAAwC,CAAC,IAAI,CAAC,CACxD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEzS,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAAC4S,mDAAmD,CAAC,IAAI,CAAEzS,OAAO,CAAC,CAC5E,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACuS,4CAA4C,CAAC,IAAI,CAAC,CACvE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACErS,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACwS,uDAAuD,CACxE,IAAI,CACJ3S,OAAO,CACR,CACH,CAEAO,WAAWA,CAACqP,QAAgB,CAAEC,IAAY,CAAE,CAC1C,KAAK,EAAE,CACP,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAA+C,+BAA+B,QAClC,CAAAhU,KAEV,CACE;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACgT,oCAAoC,CAAC,IAAI,CAAC,CACpD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE9S,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACiT,+CAA+C,CAAC,IAAI,CAAE9S,OAAO,CAAC,CACxE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAAC4S,wCAAwC,CAAC,IAAI,CAAC,CACnE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE1S,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAAC6S,mDAAmD,CACpE,IAAI,CACJhT,OAAO,CACR,CACH,CAEAO,WAAWA,CAACqP,QAAgB,CAAEC,IAAY,CAAE,CAC1C,KAAK,EAAE,CACP,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAoD,gCAAgC,QACnC,CAAArU,KAEV,CACE;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA,KAFE,CAUA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,CAACS,WAAWA,CAAA,CAA4B,CACtC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACE,CAACE,OAAOA,CAAA,CAA4B,CAClC;AAAA,CAGF;AACF;AACA;AACA;AACA,KACEG,MAAMA,CAACC,OAAwB,CAAQ,CACrCA,OAAO,CAACqT,qCAAqC,CAAC,IAAI,CAAC,CACrD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEnT,iBAAiBA,CACfF,OAA6C,CAC7CG,OAAiB,CACjB,CACAH,OAAO,CAACsT,gDAAgD,CAAC,IAAI,CAAEnT,OAAO,CAAC,CACzE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,SAASA,CAAIC,WAAmC,CAAK,CACnD,MAAO,CAAAA,WAAW,CAACiT,yCAAyC,CAAC,IAAI,CAAC,CACpE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE/S,oBAAoBA,CAClBF,WAAwD,CACxDH,OAAiB,CACd,CACH,MAAO,CAAAG,WAAW,CAACkT,oDAAoD,CACrE,IAAI,CACJrT,OAAO,CACR,CACH,CAEAO,WAAWA,CAACqP,QAAgB,CAAEC,IAAY,CAAE,CAC1C,KAAK,EAAE,CACP,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAyD,yBAAyB,QAC5B,CAAA1U,KAEV,CACE;AACF;AACA,KACEE,SAASA,CAAA,CAAc,CACrB;AACA;AACA;AACA,MAAkB,GAAE,CAAE;AACxB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATE,CA8EA;AACF;AACA,KACE,CAACyU,oBAAoBA,CAAA,CAAsD,CACzE,GAAI,IAAI,CAACC,S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,CACjD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAtP,iBAAiBA,CAAC6O,IAAc,CAAK,CACnC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA/O,4BAA4BA,CAACsO,IAAyB,CAAK,CACzD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACApO,4BAA4BA,CAAC2N,IAAyB,CAAK,CACzD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA7N,kCAAkCA,CAACoN,IAA+B,CAAK,CACrE,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAvN,iBAAiBA,CAAC8M,IAAc,CAAK,CACnC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAlN,8BAA8BA,CAACyM,IAA2B,CAAK,CAC7D,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA7M,cAAcA,CAACoM,IAAW,CAAK,CAC7B,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAtM,yBAAyBA,CAAC6L,IAAsB,CAAK,CACnD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAjM,aAAaA,CAACwL,IAAU,CAAK,CAC3B,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA5L,aAAaA,CAACmL,IAAU,CAAK,CAC3B,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACArL,qCAAqCA,CAAC4K,IAAkC,CAAK,CAC3E,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA7K,eAAeA,CAACoK,IAAY,CAAK,CAC/B,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA5J,qBAAqBA,CAACmJ,IAAkB,CAAK,CAC3C,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAlJ,0BAA0BA,CAACyI,IAAuB,CAAK,CACrD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAhI,kBAAkBA,CAACuH,IAAe,CAAK,CACrC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA3H,0BAA0BA,CAACkH,IAAuB,CAAK,CACrD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAtH,mBAAmBA,CAAC6G,IAAgB,CAAK,CACvC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA/G,2BAA2BA,CAACsG,IAAwB,CAAK,CACvD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAtG,kBAAkBA,CAAC6F,IAAe,CAAK,CACrC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAjG,YAAYA,CAACwF,IAAS,CAAK,CACzB,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAzF,2BAA2BA,CAACgF,IAAwB,CAAK,CACvD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAlF,2BAA2BA,CAACyE,IAAwB,CAAK,CACvD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAzE,oBAAoBA,CAACgE,IAAiB,CAAK,CACzC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAlE,kCAAkCA,CAACyD,IAA+B,CAAK,CACrE,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA3D,kBAAkBA,CAACkD,IAAe,CAAK,CACrC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACApD,2BAA2BA,CAAC2C,IAAwB,CAAK,CACvD,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA9C,kBAAkBA,CAACqC,IAAe,CAAK,CACrC,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAzC,4CAA4CA,CAC1CgC,IAAyC,CACtC,CACH,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACApC,wCAAwCA,CAAC2B,IAAqC,CAAK,CACjF,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACA/B,yCAAyCA,CAACsB,IAAsC,CAAK,CACnF,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA,KALE,CAMA,sDACAlB,kCAAkCA,CAACS,IAA+B,CAAK,CACrE,MAAO,KAAI,CAACS,aAAa,CAC3B,CACA,qDACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gCAAgC,QAGnC,CAAAH,8BAA4C,CACpD;AACF;AACA,KAFE,CAKA;AACF;AACA;AACA;AACA,KACE1U,WAAWA,CAAC4U,aAAgB,CAAE,CAC5B,KAAK,EAAE,CACP,IAAI,CAACA,aAAa,CAAGA,aAAa,CACpC,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA7U,6BAA6BA,CAACoU,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAhU,6CAA6CA,CAC3CuT,IAA+B,CAC/B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAlT,6BAA6BA,CAACyS,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA9R,4CAA4CA,CAC1CqR,IAA8B,CAC9B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAnR,oCAAoCA,CAAC0Q,IAAsB,CAAE1U,OAAiB,CAAK,CACjF,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA3Q,4BAA4BA,CAACkQ,IAAc,CAAE1U,OAAiB,CAAK,CACjE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjQ,mCAAmCA,CAACwP,IAAqB,CAAE1U,OAAiB,CAAK,CAC/E,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACArP,4BAA4BA,CAAC4O,IAAc,CAAE1U,OAAiB,CAAK,CACjE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA9O,uCAAuCA,CACrCqO,IAAyB,CACzB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAnO,uCAAuCA,CACrC0N,IAAyB,CACzB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA5N,6CAA6CA,CAC3CmN,IAA+B,CAC/B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAtN,4BAA4BA,CAAC6M,IAAc,CAAE1U,OAAiB,CAAK,CACjE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjN,yCAAyCA,CACvCwM,IAA2B,CAC3B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA5M,yBAAyBA,CAACmM,IAAW,CAAE1U,OAAiB,CAAK,CAC3D,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACArM,oCAAoCA,CAAC4L,IAAsB,CAAE1U,OAAiB,CAAK,CACjF,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAhM,wBAAwBA,CAACuL,IAAU,CAAE1U,OAAiB,CAAK,CACzD,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA3L,wBAAwBA,CAACkL,IAAU,CAAE1U,OAAiB,CAAK,CACzD,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACApL,gDAAgDA,CAC9C2K,IAAkC,CAClC1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA5K,0BAA0BA,CAACmK,IAAY,CAAE1U,OAAiB,CAAK,CAC7D,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA3J,gCAAgCA,CAACkJ,IAAkB,CAAE1U,OAAiB,CAAK,CACzE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjJ,qCAAqCA,CAACwI,IAAuB,CAAE1U,OAAiB,CAAK,CACnF,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA/H,6BAA6BA,CAACsH,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA1H,qCAAqCA,CAACiH,IAAuB,CAAE1U,OAAiB,CAAK,CACnF,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACArH,8BAA8BA,CAAC4G,IAAgB,CAAE1U,OAAiB,CAAK,CACrE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA9G,sCAAsCA,CACpCqG,IAAwB,CACxB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACArG,6BAA6BA,CAAC4F,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAhG,uBAAuBA,CAACuF,IAAS,CAAE1U,OAAiB,CAAK,CACvD,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAxF,sCAAsCA,CACpC+E,IAAwB,CACxB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjF,sCAAsCA,CACpCwE,IAAwB,CACxB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAxE,+BAA+BA,CAAC+D,IAAiB,CAAE1U,OAAiB,CAAK,CACvE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjE,6CAA6CA,CAC3CwD,IAA+B,CAC/B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA1D,6BAA6BA,CAACiD,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAnD,sCAAsCA,CACpC0C,IAAwB,CACxB1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA7C,6BAA6BA,CAACoC,IAAe,CAAE1U,OAAiB,CAAK,CACnE,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAxC,uDAAuDA,CACrD+B,IAAyC,CACzC1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAnC,mDAAmDA,CACjD0B,IAAqC,CACrC1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACA9B,oDAAoDA,CAClDqB,IAAsC,CACtC1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,sDAEA;AACF;AACA;AACA;AACA;AACA;AACA,KANE,CAOA,sDACAjB,6CAA6CA,CAC3CQ,IAA+B,CAC/B1U,OAAiB,CACd,CACH,MAAO,KAAI,CAACmV,aAAa,CAC3B,CACA,qDACF,CAEA;AACA;AACA,GACA,KAAM,CAAAE,yBAAyB,QAAS,CAAAL,mBAA0C,CAChF5U,kBAAkBA,CAACsU,IAAe,CAAwB,CACxD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,qDAEA1S,kBAAkBA,CAAC0S,IAAe,CAAwB,CACxD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACR,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAwB,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,qDAEAzP,wBAAwBA,CAACyP,IAAqB,CAAwB,CACpE,MAAO,CAAAA,IAAI,CACb,CAEA7O,iBAAiBA,CAAC6O,IAAc,CAAwB,CACtD,MAAO,CAAAA,IAAI,CACb,CAEAtO,4BAA4BA,CAACsO,IAAyB,CAAwB,CAC5E,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAAC2N,IAAyB,CAAwB,CAC5E,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACT,CACtB,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAAwB,CACtD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAAwB,CAChF,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAwB,CAChD,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAwB,CACtE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAwB,CAC9C,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAwB,CAC9C,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACZ,CACtB,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAAwB,CAClD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAwB,CAC9D,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAwB,CACxE,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAAwB,CACxD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAwB,CACxE,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAAwB,CAC1D,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAwB,CAC5C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAwB,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACnB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACf,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CAChB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAY,4BAA4B,CAAG,GAAI,CAAAD,yBAAyB,EAAE,CAEpE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,cAAcA,CAACb,IAAW,CAAwB,CAChE,MAAO,CAAAY,4BAA4B,CAACpV,SAAS,CAACwU,IAAI,CAAC,CACrD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAc,cAAcA,CAACd,IAAW,CAAyB,CACjE,MAAO,CAAAa,cAAc,CAACb,IAAI,CAAC,GAAK,IAAI,CACtC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAe,WAAWA,CAACf,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAA7V,SAAS,CAAc6V,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgB,WAAWA,CAAChB,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAA7V,SAAS,CAClC,CAEA;AACA;AACA,GACA,KAAM,CAAA8W,0BAA0B,QAAS,CAAAX,mBAA2C,CAClF,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAyB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACR,CACvB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAyB,CACzD,MAAO,KAAI,CACb,CACA,qDAEAtR,iCAAiCA,CAC/BsR,IAA8B,CACP,CACvB,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAyB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAyB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAyB,CACrE,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAyB,CACvD,MAAO,CAAAA,IAAI,CACb,CAEAtO,4BAA4BA,CAACsO,IAAyB,CAAyB,CAC7E,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAAC2N,IAAyB,CAAyB,CAC7E,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACR,CACvB,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAAyB,CACvD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAAyB,CACjF,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAyB,CACjD,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAyB,CACvE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAyB,CAC/C,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAyB,CAC/C,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACX,CACvB,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAAyB,CACnD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAyB,CAC/D,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAyB,CACzE,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAAyB,CACzD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAyB,CACzE,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAAyB,CAC3D,MAAO,CAAAA,IAAI,CACb,CAEAtG,2BAA2BA,CAACsG,IAAwB,CAAyB,CAC3E,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAyB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAyB,CAC7C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAyB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAyB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAyB,CAC7D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACR,CACvB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAyB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAyB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAyB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CAClB,CACvB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACd,CACvB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACf,CACvB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACR,CACvB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAkB,6BAA6B,CAAG,GAAI,CAAAD,0BAA0B,EAAE,CAEtE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,eAAeA,CAACnB,IAAW,CAAyB,CAClE,MAAO,CAAAkB,6BAA6B,CAAC1V,SAAS,CAACwU,IAAI,CAAC,CACtD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoB,eAAeA,CAACpB,IAAW,CAA0B,CACnE,MAAO,CAAAmB,eAAe,CAACnB,IAAI,CAAC,GAAK,IAAI,CACvC,CAEA;AACA;AACA,GACA,KAAM,CAAAqB,sBAAsB,QAAS,CAAAf,mBAAuC,CAC1E,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAqB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACZ,CACnB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAqB,CACrD,MAAO,KAAI,CACb,CACA,qDAEAtR,iCAAiCA,CAACsR,IAA8B,CAAqB,CACnF,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAqB,CACnE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAqB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAqB,CACjE,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAqB,CACnD,MAAO,CAAAA,IAAI,CACb,CAEAtO,4BAA4BA,CAACsO,IAAyB,CAAqB,CACzE,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAAC2N,IAAyB,CAAqB,CACzE,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACZ,CACnB,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAAqB,CACnD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAAqB,CAC7E,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAqB,CAC7C,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAqB,CACnE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAqB,CAC3C,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAqB,CAC3C,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACf,CACnB,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAAqB,CAC/C,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAqB,CAC3D,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAqB,CACrE,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAAqB,CACrD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAqB,CACrE,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAAqB,CACvD,MAAO,CAAAA,IAAI,CACb,CAEAtG,2BAA2BA,CAACsG,IAAwB,CAAqB,CACvE,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAqB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAqB,CACzC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAqB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAqB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAqB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACZ,CACnB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAqB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAqB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAqB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACtB,CACnB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CAClB,CACnB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACnB,CACnB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACZ,CACnB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAsB,wBAAwB,CAAG,GAAI,CAAAD,sBAAsB,EAAE,CAE7D;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,WAAWA,CAACvB,IAAW,CAAqB,CAC1D,MAAO,CAAAsB,wBAAwB,CAAC9V,SAAS,CAACwU,IAAI,CAAC,CACjD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwB,WAAWA,CAACxB,IAAW,CAAsB,CAC3D,MAAO,CAAAuB,WAAW,CAACvB,IAAI,CAAC,GAAK,IAAI,CACnC,CAEA;AACA;AACA,GACA,KAAM,CAAAyB,yBAAyB,QAAS,CAAAnB,mBAA0C,CAChF,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,qDAEAtR,iCAAiCA,CAC/BsR,IAA8B,CACR,CACtB,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAwB,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAwB,CACpE,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAwB,CACtD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtO,4BAA4BA,CAACsO,IAAyB,CAAwB,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAAwB,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAACyM,IAA2B,CAAwB,CAChF,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAAwB,CAChD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAAwB,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAAwB,CAC9C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAAwB,CAC9C,MAAO,KAAI,CACb,CACA,sDAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACZ,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAAwB,CAClD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAwB,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CAACyI,IAAuB,CAAwB,CACxE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAwB,CACxE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAAwB,CAC1D,MAAO,KAAI,CACb,CACA,qDAEAtG,2BAA2BA,CAACsG,IAAwB,CAAwB,CAC1E,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAwB,CAC5C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAwB,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACnB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACf,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CAChB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAA0B,2BAA2B,CAAG,GAAI,CAAAD,yBAAyB,EAAE,CAEnE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,cAAcA,CAAC3B,IAAW,CAAwB,CAChE,MAAO,CAAA0B,2BAA2B,CAAClW,SAAS,CAACwU,IAAI,CAAC,CACpD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4B,cAAcA,CAAC5B,IAAW,CAAyB,CACjE,MAAO,CAAA2B,cAAc,CAAC3B,IAAI,CAAC,GAAK,IAAI,CACtC,CAEA;AACA;AACA,GACA,KAAM,CAAA6B,oBAAoB,QAAS,CAAAvB,mBAAqC,CACtE,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAACwT,IAA+B,CAAmB,CACnF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAACsR,IAA8B,CAAmB,CACjF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAmB,CACjE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAmB,CACjD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAmB,CAC/D,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAmB,CACjD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtO,4BAA4BA,CAACsO,IAAyB,CAAmB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAAmB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAACoN,IAA+B,CAAmB,CACnF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAAmB,CACjD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAACyM,IAA2B,CAAmB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAAmB,CAC3C,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAAmB,CACjE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAAmB,CACzC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAAmB,CACzC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACjB,CACjB,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAAmB,CAC7C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAmB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CAACyI,IAAuB,CAAmB,CACnE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAmB,CACnE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAAmB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAAmB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAmB,CACvC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAmB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAmB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAmB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAACyD,IAA+B,CAAmB,CACnF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAmB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAmB,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACxB,CACjB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACpB,CACjB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACrB,CACjB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAACS,IAA+B,CAAmB,CACnF,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAA8B,uBAAuB,CAAG,GAAI,CAAAD,oBAAoB,EAAE,CAE1D;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,SAASA,CAAC/B,IAAW,CAAmB,CACtD,MAAO,CAAA8B,uBAAuB,CAACtW,SAAS,CAACwU,IAAI,CAAC,CAChD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgC,SAASA,CAAChC,IAAW,CAAoB,CACvD,MAAO,CAAA+B,SAAS,CAAC/B,IAAI,CAAC,GAAK,IAAI,CACjC,CAEA;AACA;AACA,GACA,KAAM,CAAAiC,iCAAiC,QAAS,CAAA3B,mBAAkD,CAChG,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAgC,CAChE,MAAO,KAAI,CACb,CACA,qDAEAxT,kCAAkCA,CAChCwT,IAA+B,CACD,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAgC,CAChE,MAAO,KAAI,CACb,CACA,qDAEAtR,iCAAiCA,CAC/BsR,IAA8B,CACA,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAgC,CAC9E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAgC,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAgC,CAC5E,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAgC,CAC9D,MAAO,CAAAA,IAAI,CACb,CAEAtO,4BAA4BA,CAC1BsO,IAAyB,CACK,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAC1B2N,IAAyB,CACK,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACD,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAAgC,CAC9D,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAC5ByM,IAA2B,CACG,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAgC,CACxD,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAgC,CAC9E,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAgC,CACtD,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAgC,CACtD,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACJ,CAC9B,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAAgC,CAC1D,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAgC,CACtE,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAgC,CAChF,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAAgC,CAChE,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAgC,CAChF,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAAgC,CAClE,MAAO,CAAAA,IAAI,CACb,CAEAtG,2BAA2BA,CAACsG,IAAwB,CAAgC,CAClF,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAgC,CAChE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAgC,CACpD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAgC,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAgC,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAgC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACD,CAC9B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAgC,CAChE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAgC,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAgC,CAChE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACX,CAC9B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACP,CAC9B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACR,CAC9B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACD,CAC9B,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAkC,qCAAqC,CAAG,GAAI,CAAAD,iCAAiC,EAAE,CAErF;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,sBAAsBA,CAACnC,IAAW,CAAgC,CAChF,MAAO,CAAAkC,qCAAqC,CAAC1W,SAAS,CAACwU,IAAI,CAAC,CAC9D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoC,sBAAsBA,CAACpC,IAAW,CAAiC,CACjF,MAAO,CAAAmC,sBAAsB,CAACnC,IAAI,CAAC,GAAK,IAAI,CAC9C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAqC,2BAA2BA,CACzCrC,IAAW,CACuB,CAClC,MAAO,CAAAA,IAAI,WAAY,CAAA9T,yBAAyB,CACjB8T,IAAI,CAC/B,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsC,2BAA2BA,CACzCtC,IAAW,CACwB,CACnC,MAAO,CAAAA,IAAI,WAAY,CAAA9T,yBAAyB,CAClD,CAEA;AACA;AACA,GACA,KAAM,CAAAqW,wBAAwB,QAAS,CAAAjC,mBAAyC,CAC9E,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACT,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAuB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAuB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAuB,CACnE,MAAO,KAAI,CACb,CACA,qDAEA7O,iBAAiBA,CAAC6O,IAAc,CAAuB,CACrD,MAAO,CAAAA,IAAI,CACb,CAEAtO,4BAA4BA,CAACsO,IAAyB,CAAuB,CAC3E,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAAC2N,IAAyB,CAAuB,CAC3E,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACV,CACrB,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAAuB,CACrD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAAuB,CAC/E,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAuB,CAC/C,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAuB,CACrE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAuB,CAC7C,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAuB,CAC7C,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACb,CACrB,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAAuB,CACjD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAuB,CAC7D,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAuB,CACvE,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAAuB,CACvD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAuB,CACvE,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAAuB,CACzD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAuB,CAC3C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAuB,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACpB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CAChB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACjB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAwC,0BAA0B,CAAG,GAAI,CAAAD,wBAAwB,EAAE,CAEjE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,aAAaA,CAACzC,IAAW,CAAuB,CAC9D,MAAO,CAAAwC,0BAA0B,CAAChX,SAAS,CAACwU,IAAI,CAAC,CACnD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0C,aAAaA,CAAC1C,IAAW,CAAwB,CAC/D,MAAO,CAAAyC,aAAa,CAACzC,IAAI,CAAC,GAAK,IAAI,CACrC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA2C,WAAWA,CAAC3C,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAAjT,SAAS,CAAciT,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4C,WAAWA,CAAC5C,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAAjT,SAAS,CAClC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8V,0BAA0BA,CACxC7C,IAAW,CACsB,CACjC,MAAO,CAAAA,IAAI,WAAY,CAAAvS,wBAAwB,CACjBuS,IAAI,CAC9B,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8C,0BAA0BA,CACxC9C,IAAW,CACuB,CAClC,MAAO,CAAAA,IAAI,WAAY,CAAAvS,wBAAwB,CACjD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsV,kBAAkBA,CAAC/C,IAAW,CAA2B,CACvE,MAAO,CAAAA,IAAI,WAAY,CAAAjR,gBAAgB,CAAqBiR,IAAI,CAAG,IAAI,CACzE,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgD,kBAAkBA,CAAChD,IAAW,CAA4B,CACxE,MAAO,CAAAA,IAAI,WAAY,CAAAjR,gBAAgB,CACzC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkU,UAAUA,CAACjD,IAAW,CAAmB,CACvD,MAAO,CAAAA,IAAI,WAAY,CAAAtQ,QAAQ,CAAasQ,IAAI,CAAG,IAAI,CACzD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkD,UAAUA,CAAClD,IAAW,CAAoB,CACxD,MAAO,CAAAA,IAAI,WAAY,CAAAtQ,QAAQ,CACjC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAyT,iBAAiBA,CAACnD,IAAW,CAA0B,CACrE,MAAO,CAAAA,IAAI,WAAY,CAAA7P,eAAe,CAAoB6P,IAAI,CAAG,IAAI,CACvE,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoD,iBAAiBA,CAACpD,IAAW,CAA2B,CACtE,MAAO,CAAAA,IAAI,WAAY,CAAA7P,eAAe,CACxC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkT,UAAUA,CAACrD,IAAW,CAAmB,CACvD,MAAO,CAAAA,IAAI,WAAY,CAAAvP,QAAQ,CAAauP,IAAI,CAAG,IAAI,CACzD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsD,UAAUA,CAACtD,IAAW,CAAoB,CACxD,MAAO,CAAAA,IAAI,WAAY,CAAAvP,QAAQ,CACjC,CAEA;AACA;AACA,GACA,KAAM,CAAA8S,4BAA4B,QAAS,CAAAjD,mBAA6C,CACtF,sDACA5U,kBAAkBA,CAACsU,IAAe,CAA2B,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACN,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAA2B,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACL,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAA2B,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAA2B,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAA2B,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAA2B,CACzD,MAAO,KAAI,CACb,CACA,qDAEAtO,4BAA4BA,CAACsO,IAAyB,CAA2B,CAC/E,MAAO,CAAAA,IAAI,CACb,CAEA3N,4BAA4BA,CAAC2N,IAAyB,CAA2B,CAC/E,MAAO,CAAAA,IAAI,CACb,CAEApN,kCAAkCA,CAChCoN,IAA+B,CACN,CACzB,MAAO,CAAAA,IAAI,CACb,CAEA9M,iBAAiBA,CAAC8M,IAAc,CAA2B,CACzD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAA2B,CACnF,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAA2B,CACnD,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAA2B,CACzE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAA2B,CACjD,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAA2B,CACjD,MAAO,CAAAA,IAAI,CACb,CAEA5K,qCAAqCA,CACnC4K,IAAkC,CACT,CACzB,MAAO,CAAAA,IAAI,CACb,CAEApK,eAAeA,CAACoK,IAAY,CAA2B,CACrD,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAA2B,CACjE,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAA2B,CAC3E,MAAO,CAAAA,IAAI,CACb,CAEAvH,kBAAkBA,CAACuH,IAAe,CAA2B,CAC3D,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAA2B,CAC3E,MAAO,KAAI,CACb,CACA,qDAEA7G,mBAAmBA,CAAC6G,IAAgB,CAA2B,CAC7D,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAA2B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAA2B,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAA2B,CAC/C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAA2B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAA2B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAA2B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACN,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAA2B,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAA2B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAA2B,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CAChB,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACZ,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACb,CACzB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACN,CACzB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAwD,+BAA+B,CAAG,GAAI,CAAAD,4BAA4B,EAAE,CAE1E;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,iBAAiBA,CAACzD,IAAW,CAA2B,CACtE,MAAO,CAAAwD,+BAA+B,CAAChY,SAAS,CAACwU,IAAI,CAAC,CACxD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0D,iBAAiBA,CAAC1D,IAAW,CAA4B,CACvE,MAAO,CAAAyD,iBAAiB,CAACzD,IAAI,CAAC,GAAK,IAAI,CACzC,CAEA;AACA;AACA,GACA,KAAM,CAAA2D,gCAAgC,QAAS,CAAArD,mBAAiD,CAC9F,sDACA5U,kBAAkBA,CAACsU,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACF,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACD,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAA+B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAA+B,CAC7D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAA+B,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAA+B,CAC7D,MAAO,KAAI,CACb,CACA,qDAEAtO,4BAA4BA,CAACsO,IAAyB,CAA+B,CACnF,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAA+B,CACnF,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACF,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAA+B,CAC7D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAC5ByM,IAA2B,CACE,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAA+B,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAA+B,CAC7E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAA+B,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAA+B,CACrD,MAAO,KAAI,CACb,CACA,qDAEA5K,qCAAqCA,CACnC4K,IAAkC,CACL,CAC7B,MAAO,CAAAA,IAAI,CACb,CAEA,sDACApK,eAAeA,CAACoK,IAAY,CAA+B,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAA+B,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CAACyI,IAAuB,CAA+B,CAC/E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAA+B,CAC/E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAA+B,CACjE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAA+B,CACjF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAA+B,CACnD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAA+B,CACjF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAA+B,CACjF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAA+B,CACnE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACF,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAA+B,CACjF,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAA+B,CAC/D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACZ,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACR,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACT,CAC7B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACF,CAC7B,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAA4D,mCAAmC,CAAG,GAAI,CAAAD,gCAAgC,EAAE,CAElF;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,qBAAqBA,CAAC7D,IAAW,CAA+B,CAC9E,MAAO,CAAA4D,mCAAmC,CAACpY,SAAS,CAACwU,IAAI,CAAC,CAC5D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8D,qBAAqBA,CAAC9D,IAAW,CAAgC,CAC/E,MAAO,CAAA6D,qBAAqB,CAAC7D,IAAI,CAAC,GAAK,IAAI,CAC7C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA+D,qBAAqBA,CAAC/D,IAAW,CAA8B,CAC7E,MAAO,CAAAA,IAAI,WAAY,CAAAlO,mBAAmB,CAAwBkO,IAAI,CAAG,IAAI,CAC/E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgE,qBAAqBA,CAAChE,IAAW,CAA+B,CAC9E,MAAO,CAAAA,IAAI,WAAY,CAAAlO,mBAAmB,CAC5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAmS,2BAA2BA,CACzCjE,IAAW,CACuB,CAClC,MAAO,CAAAA,IAAI,WAAY,CAAAvN,yBAAyB,CACjBuN,IAAI,CAC/B,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkE,2BAA2BA,CACzClE,IAAW,CACwB,CACnC,MAAO,CAAAA,IAAI,WAAY,CAAAvN,yBAAyB,CAClD,CAEA;AACA;AACA,GACA,KAAM,CAAA0R,wBAAwB,QAAS,CAAA7D,mBAAyC,CAC9E,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACT,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAuB,CACrE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAuB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAuB,CACnE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAAuB,CACrD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtO,4BAA4BA,CAACsO,IAAyB,CAAuB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAAuB,CAC3E,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,qDAEA9M,iBAAiBA,CAAC8M,IAAc,CAAuB,CACrD,MAAO,CAAAA,IAAI,CACb,CAEAzM,8BAA8BA,CAACyM,IAA2B,CAAuB,CAC/E,MAAO,CAAAA,IAAI,CACb,CAEApM,cAAcA,CAACoM,IAAW,CAAuB,CAC/C,MAAO,CAAAA,IAAI,CACb,CAEA7L,yBAAyBA,CAAC6L,IAAsB,CAAuB,CACrE,MAAO,CAAAA,IAAI,CACb,CAEAxL,aAAaA,CAACwL,IAAU,CAAuB,CAC7C,MAAO,CAAAA,IAAI,CACb,CAEAnL,aAAaA,CAACmL,IAAU,CAAuB,CAC7C,MAAO,CAAAA,IAAI,CACb,CAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACb,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAAuB,CACjD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAuB,CAC7D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CAACyI,IAAuB,CAAuB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAuB,CACvE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAAuB,CACzD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAuB,CAC3C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAuB,CAC3D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAuB,CACzE,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAuB,CACvD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACpB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CAChB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACjB,CACrB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACV,CACrB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAAoE,2BAA2B,CAAG,GAAI,CAAAD,wBAAwB,EAAE,CAElE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,aAAaA,CAACrE,IAAW,CAAuB,CAC9D,MAAO,CAAAoE,2BAA2B,CAAC5Y,SAAS,CAACwU,IAAI,CAAC,CACpD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsE,aAAaA,CAACtE,IAAW,CAAwB,CAC/D,MAAO,CAAAqE,aAAa,CAACrE,IAAI,CAAC,GAAK,IAAI,CACrC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAuE,UAAUA,CAACvE,IAAW,CAAmB,CACvD,MAAO,CAAAA,IAAI,WAAY,CAAAlN,QAAQ,CAAakN,IAAI,CAAG,IAAI,CACzD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwE,UAAUA,CAACxE,IAAW,CAAoB,CACxD,MAAO,CAAAA,IAAI,WAAY,CAAAlN,QAAQ,CACjC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA2R,uBAAuBA,CAACzE,IAAW,CAAgC,CACjF,MAAO,CAAAA,IAAI,WAAY,CAAA5M,qBAAqB,CAA0B4M,IAAI,CAAG,IAAI,CACnF,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0E,uBAAuBA,CAAC1E,IAAW,CAAiC,CAClF,MAAO,CAAAA,IAAI,WAAY,CAAA5M,qBAAqB,CAC9C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAuR,OAAOA,CAAC3E,IAAW,CAAgB,CACjD,MAAO,CAAAA,IAAI,WAAY,CAAAvM,KAAK,CAAUuM,IAAI,CAAG,IAAI,CACnD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4E,OAAOA,CAAC5E,IAAW,CAAiB,CAClD,MAAO,CAAAA,IAAI,WAAY,CAAAvM,KAAK,CAC9B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoR,kBAAkBA,CAAC7E,IAAW,CAA2B,CACvE,MAAO,CAAAA,IAAI,WAAY,CAAAhM,gBAAgB,CAAqBgM,IAAI,CAAG,IAAI,CACzE,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8E,kBAAkBA,CAAC9E,IAAW,CAA4B,CACxE,MAAO,CAAAA,IAAI,WAAY,CAAAhM,gBAAgB,CACzC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA+Q,MAAMA,CAAC/E,IAAW,CAAe,CAC/C,MAAO,CAAAA,IAAI,WAAY,CAAA3L,IAAI,CAAS2L,IAAI,CAAG,IAAI,CACjD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgF,MAAMA,CAAChF,IAAW,CAAgB,CAChD,MAAO,CAAAA,IAAI,WAAY,CAAA3L,IAAI,CAC7B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4Q,MAAMA,CAACjF,IAAW,CAAe,CAC/C,MAAO,CAAAA,IAAI,WAAY,CAAAtL,IAAI,CAASsL,IAAI,CAAG,IAAI,CACjD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkF,MAAMA,CAAClF,IAAW,CAAgB,CAChD,MAAO,CAAAA,IAAI,WAAY,CAAAtL,IAAI,CAC7B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAyQ,8BAA8BA,CAC5CnF,IAAW,CAC0B,CACrC,MAAO,CAAAA,IAAI,WAAY,CAAAjL,4BAA4B,CACjBiL,IAAI,CAClC,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoF,8BAA8BA,CAC5CpF,IAAW,CAC2B,CACtC,MAAO,CAAAA,IAAI,WAAY,CAAAjL,4BAA4B,CACrD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsQ,QAAQA,CAACrF,IAAW,CAAiB,CACnD,MAAO,CAAAA,IAAI,WAAY,CAAA1K,MAAM,CAAW0K,IAAI,CAAG,IAAI,CACrD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsF,QAAQA,CAACtF,IAAW,CAAkB,CACpD,MAAO,CAAAA,IAAI,WAAY,CAAA1K,MAAM,CAC/B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAiQ,cAAcA,CAACvF,IAAW,CAAuB,CAC/D,MAAO,CAAAA,IAAI,WAAY,CAAA3J,YAAY,CAAiB2J,IAAI,CAAG,IAAI,CACjE,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwF,cAAcA,CAACxF,IAAW,CAAwB,CAChE,MAAO,CAAAA,IAAI,WAAY,CAAA3J,YAAY,CACrC,CAEA;AACA;AACA,GACA,KAAM,CAAAoP,yBAAyB,QAAS,CAAAnF,mBAA0C,CAChF,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACR,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAwB,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAwB,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtO,4BAA4BA,CAACsO,IAAyB,CAAwB,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAAwB,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAAwB,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAACyM,IAA2B,CAAwB,CAChF,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAAwB,CAChD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAAwB,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAAwB,CAC9C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAAwB,CAC9C,MAAO,KAAI,CACb,CACA,sDAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACZ,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAAwB,CAClD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAwB,CAC9D,MAAO,KAAI,CACb,CACA,qDAEAzI,0BAA0BA,CAACyI,IAAuB,CAAwB,CACxE,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAAwB,CACxE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAAwB,CAC1D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAwB,CAC5C,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CAACgF,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CAACyE,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAwB,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAAwB,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAwB,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACnB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACf,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CAChB,CACtB,MAAO,KAAI,CACb,CACA,sDAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACT,CACtB,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAA0F,4BAA4B,CAAG,GAAI,CAAAD,yBAAyB,EAAE,CAEpE;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,cAAcA,CAAC3F,IAAW,CAAwB,CAChE,MAAO,CAAA0F,4BAA4B,CAACla,SAAS,CAACwU,IAAI,CAAC,CACrD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4F,cAAcA,CAAC5F,IAAW,CAAyB,CACjE,MAAO,CAAA2F,cAAc,CAAC3F,IAAI,CAAC,GAAK,IAAI,CACtC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA6F,mBAAmBA,CAAC7F,IAAW,CAA4B,CACzE,MAAO,CAAAA,IAAI,WAAY,CAAA9I,iBAAiB,CAAsB8I,IAAI,CAAG,IAAI,CAC3E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8F,mBAAmBA,CAAC9F,IAAW,CAA6B,CAC1E,MAAO,CAAAA,IAAI,WAAY,CAAA9I,iBAAiB,CAC1C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA6O,WAAWA,CAAC/F,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAAjI,SAAS,CAAciI,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgG,WAAWA,CAAChG,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAAjI,SAAS,CAClC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkO,mBAAmBA,CAACjG,IAAW,CAA4B,CACzE,MAAO,CAAAA,IAAI,WAAY,CAAArH,iBAAiB,CAAsBqH,IAAI,CAAG,IAAI,CAC3E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkG,mBAAmBA,CAAClG,IAAW,CAA6B,CAC1E,MAAO,CAAAA,IAAI,WAAY,CAAArH,iBAAiB,CAC1C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwN,YAAYA,CAACnG,IAAW,CAAqB,CAC3D,MAAO,CAAAA,IAAI,WAAY,CAAAhH,UAAU,CAAegH,IAAI,CAAG,IAAI,CAC7D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoG,YAAYA,CAACpG,IAAW,CAAsB,CAC5D,MAAO,CAAAA,IAAI,WAAY,CAAAhH,UAAU,CACnC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAqN,oBAAoBA,CAACrG,IAAW,CAA6B,CAC3E,MAAO,CAAAA,IAAI,WAAY,CAAA3G,kBAAkB,CAAuB2G,IAAI,CAAG,IAAI,CAC7E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsG,oBAAoBA,CAACtG,IAAW,CAA8B,CAC5E,MAAO,CAAAA,IAAI,WAAY,CAAA3G,kBAAkB,CAC3C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkN,WAAWA,CAACvG,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAAlG,SAAS,CAAckG,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwG,WAAWA,CAACxG,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAAlG,SAAS,CAClC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA2M,KAAKA,CAACzG,IAAW,CAAc,CAC7C,MAAO,CAAAA,IAAI,WAAY,CAAA3F,GAAG,CAAQ2F,IAAI,CAAG,IAAI,CAC/C,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0G,KAAKA,CAAC1G,IAAW,CAAe,CAC9C,MAAO,CAAAA,IAAI,WAAY,CAAA3F,GAAG,CAC5B,CAEA;AACA;AACA,GACA,KAAM,CAAAsM,+BAA+B,QAAS,CAAArG,mBAAgD,CAC5F,sDACA5U,kBAAkBA,CAACsU,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACH,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACF,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAA8B,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAA8B,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAA8B,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAA8B,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtO,4BAA4BA,CAACsO,IAAyB,CAA8B,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAAC2N,IAAyB,CAA8B,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACH,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAA8B,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAC5ByM,IAA2B,CACC,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAA8B,CACtD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAA8B,CAC5E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAA8B,CACpD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAA8B,CACpD,MAAO,KAAI,CACb,CACA,sDAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACN,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAA8B,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAA8B,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CAACyI,IAAuB,CAA8B,CAC9E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CAACkH,IAAuB,CAA8B,CAC9E,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAA8B,CAChE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CAACsG,IAAwB,CAA8B,CAChF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAA8B,CAClD,MAAO,KAAI,CACb,CACA,qDAEAhF,2BAA2BA,CAACgF,IAAwB,CAA8B,CAChF,MAAO,CAAAA,IAAI,CACb,CAEAzE,2BAA2BA,CAACyE,IAAwB,CAA8B,CAChF,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAA8B,CAClE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACH,CAC5B,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CAAC2C,IAAwB,CAA8B,CAChF,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAA8B,CAC9D,MAAO,KAAI,CACb,CACA,qDAEAhC,4CAA4CA,CAC1CgC,IAAyC,CACb,CAC5B,MAAO,CAAAA,IAAI,CACb,CAEA3B,wCAAwCA,CACtC2B,IAAqC,CACT,CAC5B,MAAO,CAAAA,IAAI,CACb,CAEAtB,yCAAyCA,CACvCsB,IAAsC,CACV,CAC5B,MAAO,CAAAA,IAAI,CACb,CAEA,sDACAT,kCAAkCA,CAChCS,IAA+B,CACH,CAC5B,MAAO,KAAI,CACb,CACA,qDACF,CAEA,KAAM,CAAA4G,mCAAmC,CAAG,GAAI,CAAAD,+BAA+B,EAAE,CAEjF;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,oBAAoBA,CAAC7G,IAAW,CAA8B,CAC5E,MAAO,CAAA4G,mCAAmC,CAACpb,SAAS,CAACwU,IAAI,CAAC,CAC5D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8G,oBAAoBA,CAAC9G,IAAW,CAA+B,CAC7E,MAAO,CAAA6G,oBAAoB,CAAC7G,IAAI,CAAC,GAAK,IAAI,CAC5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA+G,oBAAoBA,CAAC/G,IAAW,CAA6B,CAC3E,MAAO,CAAAA,IAAI,WAAY,CAAAnF,kBAAkB,CAAuBmF,IAAI,CAAG,IAAI,CAC7E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgH,oBAAoBA,CAAChH,IAAW,CAA8B,CAC5E,MAAO,CAAAA,IAAI,WAAY,CAAAnF,kBAAkB,CAC3C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoM,oBAAoBA,CAACjH,IAAW,CAA6B,CAC3E,MAAO,CAAAA,IAAI,WAAY,CAAA5E,kBAAkB,CAAuB4E,IAAI,CAAG,IAAI,CAC7E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkH,oBAAoBA,CAAClH,IAAW,CAA8B,CAC5E,MAAO,CAAAA,IAAI,WAAY,CAAA5E,kBAAkB,CAC3C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA+L,aAAaA,CAACnH,IAAW,CAAsB,CAC7D,MAAO,CAAAA,IAAI,WAAY,CAAAvE,WAAW,CAAgBuE,IAAI,CAAG,IAAI,CAC/D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoH,aAAaA,CAACpH,IAAW,CAAuB,CAC9D,MAAO,CAAAA,IAAI,WAAY,CAAAvE,WAAW,CACpC,CAEA;AACA;AACA,GACA,KAAM,CAAA4L,qCAAqC,QAAS,CAAA/G,mBAAsD,CACxG,sDACA5U,kBAAkBA,CAACsU,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxT,kCAAkCA,CAChCwT,IAA+B,CACG,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA1S,kBAAkBA,CAAC0S,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtR,iCAAiCA,CAC/BsR,IAA8B,CACI,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3Q,yBAAyBA,CAAC2Q,IAAsB,CAAoC,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnQ,iBAAiBA,CAACmQ,IAAc,CAAoC,CAClE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzP,wBAAwBA,CAACyP,IAAqB,CAAoC,CAChF,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7O,iBAAiBA,CAAC6O,IAAc,CAAoC,CAClE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtO,4BAA4BA,CAC1BsO,IAAyB,CACS,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3N,4BAA4BA,CAC1B2N,IAAyB,CACS,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACApN,kCAAkCA,CAChCoN,IAA+B,CACG,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA9M,iBAAiBA,CAAC8M,IAAc,CAAoC,CAClE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzM,8BAA8BA,CAC5ByM,IAA2B,CACO,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACApM,cAAcA,CAACoM,IAAW,CAAoC,CAC5D,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7L,yBAAyBA,CAAC6L,IAAsB,CAAoC,CAClF,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxL,aAAaA,CAACwL,IAAU,CAAoC,CAC1D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnL,aAAaA,CAACmL,IAAU,CAAoC,CAC1D,MAAO,KAAI,CACb,CACA,sDAEA,sDACA5K,qCAAqCA,CACnC4K,IAAkC,CACA,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACApK,eAAeA,CAACoK,IAAY,CAAoC,CAC9D,MAAO,KAAI,CACb,CACA,sDAEA,sDACAnJ,qBAAqBA,CAACmJ,IAAkB,CAAoC,CAC1E,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzI,0BAA0BA,CACxByI,IAAuB,CACW,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAvH,kBAAkBA,CAACuH,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlH,0BAA0BA,CACxBkH,IAAuB,CACW,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7G,mBAAmBA,CAAC6G,IAAgB,CAAoC,CACtE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtG,2BAA2BA,CACzBsG,IAAwB,CACU,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA7F,kBAAkBA,CAAC6F,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAxF,YAAYA,CAACwF,IAAS,CAAoC,CACxD,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhF,2BAA2BA,CACzBgF,IAAwB,CACU,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzE,2BAA2BA,CACzByE,IAAwB,CACU,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhE,oBAAoBA,CAACgE,IAAiB,CAAoC,CACxE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAzD,kCAAkCA,CAChCyD,IAA+B,CACG,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAlD,kBAAkBA,CAACkD,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3C,2BAA2BA,CACzB2C,IAAwB,CACU,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACArC,kBAAkBA,CAACqC,IAAe,CAAoC,CACpE,MAAO,KAAI,CACb,CACA,sDAEA,sDACAhC,4CAA4CA,CAC1CgC,IAAyC,CACP,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACA3B,wCAAwCA,CACtC2B,IAAqC,CACH,CAClC,MAAO,KAAI,CACb,CACA,sDAEA,sDACAtB,yCAAyCA,CACvCsB,IAAsC,CACJ,CAClC,MAAO,KAAI,CACb,CACA,qDAEAT,kCAAkCA,CAChCS,IAA+B,CACG,CAClC,MAAO,CAAAA,IAAI,CACb,CACF,CAEA,KAAM,CAAAsH,yCAAyC,CAC7C,GAAI,CAAAD,qCAAqC,EAAE,CAE7C;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,0BAA0BA,CACxCvH,IAAW,CACuB,CAClC,MAAO,CAAAsH,yCAAyC,CAAC9b,SAAS,CAACwU,IAAI,CAAC,CAClE,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwH,0BAA0BA,CACxCxH,IAAW,CACwB,CACnC,MAAO,CAAAuH,0BAA0B,CAACvH,IAAI,CAAC,GAAK,IAAI,CAClD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAyH,2BAA2BA,CACzCzH,IAAW,CACuB,CAClC,MAAO,CAAAA,IAAI,WAAY,CAAA9D,yBAAyB,CACjB8D,IAAI,CAC/B,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0H,2BAA2BA,CACzC1H,IAAW,CACwB,CACnC,MAAO,CAAAA,IAAI,WAAY,CAAA9D,yBAAyB,CAClD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAyL,WAAWA,CAAC3H,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAArD,SAAS,CAAcqD,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA4H,WAAWA,CAAC5H,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAArD,SAAS,CAClC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkL,oBAAoBA,CAAC7H,IAAW,CAA6B,CAC3E,MAAO,CAAAA,IAAI,WAAY,CAAA9C,kBAAkB,CAAuB8C,IAAI,CAAG,IAAI,CAC7E,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA8H,oBAAoBA,CAAC9H,IAAW,CAA8B,CAC5E,MAAO,CAAAA,IAAI,WAAY,CAAA9C,kBAAkB,CAC3C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA6K,WAAWA,CAAC/H,IAAW,CAAoB,CACzD,MAAO,CAAAA,IAAI,WAAY,CAAAzC,SAAS,CAAcyC,IAAI,CAAG,IAAI,CAC3D,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgI,WAAWA,CAAChI,IAAW,CAAqB,CAC1D,MAAO,CAAAA,IAAI,WAAY,CAAAzC,SAAS,CAClC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA0K,qCAAqCA,CACnDjI,IAAW,CACiC,CAC5C,MAAO,CAAAA,IAAI,WAAY,CAAAnC,mCAAmC,CACjBmC,IAAI,CACzC,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAkI,qCAAqCA,CACnDlI,IAAW,CACkC,CAC7C,MAAO,CAAAA,IAAI,WAAY,CAAAnC,mCAAmC,CAC5D,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsK,iCAAiCA,CAC/CnI,IAAW,CAC6B,CACxC,MAAO,CAAAA,IAAI,WAAY,CAAA9B,+BAA+B,CACjB8B,IAAI,CACrC,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAoI,iCAAiCA,CAC/CpI,IAAW,CAC8B,CACzC,MAAO,CAAAA,IAAI,WAAY,CAAA9B,+BAA+B,CACxD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAmK,kCAAkCA,CAChDrI,IAAW,CAC8B,CACzC,MAAO,CAAAA,IAAI,WAAY,CAAAzB,gCAAgC,CACjByB,IAAI,CACtC,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAsI,kCAAkCA,CAChDtI,IAAW,CAC+B,CAC1C,MAAO,CAAAA,IAAI,WAAY,CAAAzB,gCAAgC,CACzD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAgK,2BAA2BA,CACzCvI,IAAW,CACuB,CAClC,MAAO,CAAAA,IAAI,WAAY,CAAApB,yBAAyB,CACjBoB,IAAI,CAC/B,IAAI,CACV,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAwI,2BAA2BA,CACzCxI,IAAW,CACwB,CACnC,MAAO,CAAAA,IAAI,WAAY,CAAApB,yBAAyB,CAClD,CAEA,KAAM,CAAA6J,WAAW,QAAS,CAAAlI,8BAAyD,CACjF,sDACA3U,6BAA6BA,CAACoU,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAA1H,WAAW,CAAC0H,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACAjc,6CAA6CA,CAC3CuT,IAA+B,CAC/B0I,KAAY,CACH,CACT,MAAO,CAAApG,2BAA2B,CAACoG,KAAK,CAAC,CAC3C,CACA,sDAEA,sDACAnb,6BAA6BA,CAACyS,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAA9F,WAAW,CAAC8F,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACA/Z,4CAA4CA,CAC1CqR,IAA8B,CAC9B0I,KAAY,CACH,CACT,MAAO,CAAA5F,0BAA0B,CAAC4F,KAAK,CAAC,CAC1C,CACA,sDAEA,sDACApZ,oCAAoCA,CAAC0Q,IAAsB,CAAE0I,KAAY,CAAW,CAClF,MAAO,CAAA1F,kBAAkB,CAAC0F,KAAK,CAAC,CAClC,CACA,sDAEA,sDACA5Y,4BAA4BA,CAACkQ,IAAc,CAAE0I,KAAY,CAAW,CAClE,MAAO,CAAAxF,UAAU,CAACwF,KAAK,CAAC,CAC1B,CACA,sDAEA,sDACAlY,mCAAmCA,CAACwP,IAAqB,CAAE0I,KAAY,CAAW,CAChF,MAAO,CAAAtF,iBAAiB,CAACsF,KAAK,CAAC,CACjC,CACA,sDAEA,sDACAtX,4BAA4BA,CAAC4O,IAAc,CAAE0I,KAAY,CAAW,CAClE,MAAO,CAAApF,UAAU,CAACoF,KAAK,CAAC,CAC1B,CACA,sDAEA,sDACA/W,uCAAuCA,CACrCqO,IAAyB,CACzB0I,KAAY,CACH,CACT,MAAO,CAAA5E,qBAAqB,CAAC4E,KAAK,CAAC,CACrC,CACA,sDAEA,sDACApW,uCAAuCA,CACrC0N,IAAyB,CACzB0I,KAAY,CACH,CACT,MAAO,CAAA1E,qBAAqB,CAAC0E,KAAK,CAAC,CACrC,CACA,sDAEA,sDACA7V,6CAA6CA,CAC3CmN,IAA+B,CAC/B0I,KAAY,CACH,CACT,MAAO,CAAAxE,2BAA2B,CAACwE,KAAK,CAAC,CAC3C,CACA,sDAEA,sDACAvV,4BAA4BA,CAAC6M,IAAc,CAAE0I,KAAY,CAAW,CAClE,MAAO,CAAAlE,UAAU,CAACkE,KAAK,CAAC,CAC1B,CACA,sDAEA,sDACAlV,yCAAyCA,CACvCwM,IAA2B,CAC3B0I,KAAY,CACH,CACT,MAAO,CAAAhE,uBAAuB,CAACgE,KAAK,CAAC,CACvC,CACA,sDAEA,sDACA7U,yBAAyBA,CAACmM,IAAW,CAAE0I,KAAY,CAAW,CAC5D,MAAO,CAAA9D,OAAO,CAAC8D,KAAK,CAAC,CACvB,CACA,sDAEA,sDACAtU,oCAAoCA,CAAC4L,IAAsB,CAAE0I,KAAY,CAAW,CAClF,MAAO,CAAA5D,kBAAkB,CAAC4D,KAAK,CAAC,CAClC,CACA,sDAEA,sDACAjU,wBAAwBA,CAACuL,IAAU,CAAE0I,KAAY,CAAW,CAC1D,MAAO,CAAA1D,MAAM,CAAC0D,KAAK,CAAC,CACtB,CACA,sDAEA,sDACA5T,wBAAwBA,CAACkL,IAAU,CAAE0I,KAAY,CAAW,CAC1D,MAAO,CAAAxD,MAAM,CAACwD,KAAK,CAAC,CACtB,CACA,sDAEA,sDACArT,gDAAgDA,CAC9C2K,IAAkC,CAClC0I,KAAY,CACH,CACT,MAAO,CAAAtD,8BAA8B,CAACsD,KAAK,CAAC,CAC9C,CACA,sDAEA,sDACA7S,0BAA0BA,CAACmK,IAAY,CAAE0I,KAAY,CAAW,CAC9D,MAAO,CAAApD,QAAQ,CAACoD,KAAK,CAAC,CACxB,CACA,sDAEA,sDACA5R,gCAAgCA,CAACkJ,IAAkB,CAAE0I,KAAY,CAAW,CAC1E,MAAO,CAAAlD,cAAc,CAACkD,KAAK,CAAC,CAC9B,CACA,sDAEA,sDACAlR,qCAAqCA,CACnCwI,IAAuB,CACvB0I,KAAY,CACH,CACT,MAAO,CAAA5C,mBAAmB,CAAC4C,KAAK,CAAC,CACnC,CACA,sDAEA,sDACAhQ,6BAA6BA,CAACsH,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAA1C,WAAW,CAAC0C,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACA3P,qCAAqCA,CACnCiH,IAAuB,CACvB0I,KAAY,CACH,CACT,MAAO,CAAAxC,mBAAmB,CAACwC,KAAK,CAAC,CACnC,CACA,sDAEA,sDACAtP,8BAA8BA,CAAC4G,IAAgB,CAAE0I,KAAY,CAAW,CACtE,MAAO,CAAAtC,YAAY,CAACsC,KAAK,CAAC,CAC5B,CACA,sDAEA,sDACA/O,sCAAsCA,CACpCqG,IAAwB,CACxB0I,KAAY,CACH,CACT,MAAO,CAAApC,oBAAoB,CAACoC,KAAK,CAAC,CACpC,CACA,sDAEA,sDACAtO,6BAA6BA,CAAC4F,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAAlC,WAAW,CAACkC,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACAjO,uBAAuBA,CAACuF,IAAS,CAAE0I,KAAY,CAAW,CACxD,MAAO,CAAAhC,KAAK,CAACgC,KAAK,CAAC,CACrB,CACA,sDAEA,sDACAzN,sCAAsCA,CACpC+E,IAAwB,CACxB0I,KAAY,CACH,CACT,MAAO,CAAA1B,oBAAoB,CAAC0B,KAAK,CAAC,CACpC,CACA,sDAEA,sDACAlN,sCAAsCA,CACpCwE,IAAwB,CACxB0I,KAAY,CACH,CACT,MAAO,CAAAxB,oBAAoB,CAACwB,KAAK,CAAC,CACpC,CACA,sDAEA,sDACAzM,+BAA+BA,CAAC+D,IAAiB,CAAE0I,KAAY,CAAW,CACxE,MAAO,CAAAtB,aAAa,CAACsB,KAAK,CAAC,CAC7B,CACA,sDAEA,sDACAlM,6CAA6CA,CAC3CwD,IAA+B,CAC/B0I,KAAY,CACH,CACT,MAAO,CAAAhB,2BAA2B,CAACgB,KAAK,CAAC,CAC3C,CACA,sDAEA,sDACA3L,6BAA6BA,CAACiD,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAAd,WAAW,CAACc,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACApL,sCAAsCA,CACpC0C,IAAwB,CACxB0I,KAAY,CACH,CACT,MAAO,CAAAZ,oBAAoB,CAACY,KAAK,CAAC,CACpC,CACA,sDAEA,sDACA9K,6BAA6BA,CAACoC,IAAe,CAAE0I,KAAY,CAAW,CACpE,MAAO,CAAAV,WAAW,CAACU,KAAK,CAAC,CAC3B,CACA,sDAEA,sDACAzK,uDAAuDA,CACrD+B,IAAyC,CACzC0I,KAAY,CACH,CACT,MAAO,CAAAR,qCAAqC,CAACQ,KAAK,CAAC,CACrD,CACA,sDAEA,sDACApK,mDAAmDA,CACjD0B,IAAqC,CACrC0I,KAAY,CACH,CACT,MAAO,CAAAN,iCAAiC,CAACM,KAAK,CAAC,CACjD,CACA,sDAEA,sDACA/J,oDAAoDA,CAClDqB,IAAsC,CACtC0I,KAAY,CACH,CACT,MAAO,CAAAJ,kCAAkC,CAACI,KAAK,CAAC,CAClD,CACA,sDAEA,sDACAlJ,6CAA6CA,CAC3CQ,IAA+B,CAC/B0I,KAAY,CACH,CACT,MAAO,CAAAF,2BAA2B,CAACE,KAAK,CAAC,CAC3C,CACA,qDACF,CAEA,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAF,WAAW,EAAE,CAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAG,UAAUA,CACxB5I,IAAY,CACZ0I,KAAY,CACK,CACjB,MAAO,CAAAC,YAAY,CAAChd,oBAAoB,CAACqU,IAAI,CAAE0I,KAAK,CAAC,CACvD,CAEA;AACA"}