{"version":3,"file":"common.js","names":["range","start","end","i","at","array","index","length","every","iterable","item","some","map","mappingFunction","Either","mustValue","value","Error","constructor","error","BASE64_CHARS","BASE64_LOOKUP","Uint8Array","charCodeAt","base64Encode","bytes","encoded","len","substring","base64Decode","text","lenWoPad","bytesLength","base64LookupLen","pointer","charCode0","encoded0","charCode1","encoded1","charCode2","encoded2","charCode3","encoded3"],"sources":["../../../src/common.ts"],"sourcesContent":["/**\n * Provide common functions shared among the modules.\n */\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n\n/**\n * Create an iterator over the given range of numbers.\n *\n * @param start - inclusive start of the range\n * @param end - exclusive end of the range\n * @returns iterator over the range\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function* range(start: number, end: number): IterableIterator<number> {\n  for (let i = start; i < end; i++) {\n    yield i;\n  }\n}\n\n/**\n * Retrieve the `index`-th item from the `array`.\n *\n * @remarks\n * This is a fill for `Array.prototype.at`.\n * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n *\n * @param array - to get the element from\n * @param index - zero-based index of the `array`. Negative index counts back.\n * @returns item, or `undefined` if `index` out-of-bound\n * @typeParam T - type of the array items\n */\nexport function at<T>(array: Array<T>, index: number) {\n  if (index < 0) {\n    return array[array.length + index];\n  } else {\n    return array[index];\n  }\n}\n\n/**\n * Check that all the values of the iterable are `true`.\n *\n * @param iterable - to iterate over\n * @returns `true` if all values in `iterable` are set\n */\nexport function every<T>(iterable: Iterable<T>): boolean {\n  // NOTE (mristin, 2022-11-24):\n  // We introduce this function so that we can keep the constraint verification\n  // purely functional. Unfortunately, `every` and `some` are only available\n  // in arrays and not in `IterableIterator`.\n\n  for (const item of iterable) {\n    if (!item) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that at least one value of the iterable is `true`.\n *\n * @param iterable - to iterate over\n * @returns `true` if at least one value in `iterable` is set\n */\nexport function some<T>(iterable: Iterable<T>): boolean {\n  // NOTE (mristin, 2022-11-24):\n  // We introduce this function so that we can keep the constraint verification\n  // purely functional. Unfortunately, `every` and `some` are only available\n  // in arrays and not in `IterableIterator`.\n\n  for (const item of iterable) {\n    if (item) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Map the items of an iterable.\n *\n * @param iterable - to be mapped\n * @param mappingFunction - to be applied on `iterable`\n * @returns mapped items of `iterable`\n * @typeParam S - type of an item of the `iterable`\n * @typeParam T - type of the transformed item of the `iterable`\n */\nexport function* map<S, T>(\n  iterable: Iterable<S>,\n  mappingFunction: (item: S) => T\n): IterableIterator<T> {\n  // NOTE (mristin, 2022-11-24):\n  // We introduce this function so that we can keep the constraint verification\n  // purely functional.\n\n  for (const item of iterable) {\n    yield mappingFunction(item);\n  }\n}\n\n/**\n * Represent either a result, or an error.\n *\n * @typeParam ValueT - type of the resulting value\n * @typeParam ErrorT - type of the error\n */\nexport class Either<ValueT, ErrorT> {\n  /**\n   * value if something successful\n   */\n  readonly value: ValueT | null;\n\n  /**\n   * error if something failed\n   */\n  readonly error: ErrorT | null;\n\n  /**\n   * Assert that value is set and return it.\n   *\n   * @returns {@link value}, or throw if `null`\n   */\n  mustValue(): ValueT {\n    if (this.value === null) {\n      throw new Error(\"Expected value to be set, but it was null\");\n    }\n    return this.value;\n  }\n\n  constructor(value: ValueT | null, error: ErrorT | null) {\n    if (value === null && error === null) {\n      throw new Error(\"Unexpected both value and error null in an Either\");\n    }\n\n    if (value !== null && error !== null) {\n      throw new Error(\"Unexpected both value and error non-null in an Either\");\n    }\n\n    this.value = value;\n    this.error = error;\n  }\n}\n\nconst BASE64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst BASE64_LOOKUP = new Uint8Array(256);\n\n// NOTE (mristin, 2022-11-25):\n// Initialize to 255 so that we can detect invalid values in the input during decoding.\nfor (let i = 0; i < BASE64_LOOKUP.length; i++) {\n  BASE64_LOOKUP[i] = 255;\n}\n\n// NOTE (mristin, 2022-11-25):\n// Initialize valid values to the corresponding decoding points.\nfor (let i = 0; i < BASE64_CHARS.length; i++) {\n  BASE64_LOOKUP[BASE64_CHARS.charCodeAt(i)] = i;\n}\n\n/**\n * Encode a byte array in base64.\n *\n * @remarks\n * We provide our own implementation so that we do not run into compatibility\n * issues with node.js, different browsers etc.\n * See:\n * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer\n *\n * @param bytes - to be encoded\n * @returns `bytes` encoded as base64 text\n */\nexport function base64Encode(bytes: Uint8Array): string {\n  // NOTE (mristin, 2022-11-25):\n  // This implementation is vaguely based on:\n  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,\n  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and\n  // https://github.com/beatgammit/base64-js/blob/master/index.js.\n\n  // NOTE (mristin, 2022-11-25):\n  // We assume that string concatenation is actually *faster* than joining an array\n  // of strings, see:\n  // https://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-javascript\n\n  if (bytes.length === 0) {\n    return \"\";\n  }\n\n  let encoded = \"\";\n  const len = bytes.length;\n\n  for (let i = 0; i < len; i += 3) {\n    encoded += BASE64_CHARS[bytes[i] >> 2];\n    encoded += BASE64_CHARS[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n    encoded += BASE64_CHARS[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n    encoded += BASE64_CHARS[bytes[i + 2] & 63];\n  }\n\n  // NOTE (mristin, 2022-11-25):\n  // We assume here that `substring` will be optimized for cases where we do not keep\n  // the original reference to the string. We tested a bit with\n  // https://www.measurethat.net/.\n\n  if (len % 3 === 2) {\n    encoded = encoded.substring(0, encoded.length - 1) + \"=\";\n  } else if (len % 3 === 1) {\n    encoded = encoded.substring(0, encoded.length - 2) + \"==\";\n  } else {\n    // No padding is necessary.\n  }\n\n  return encoded;\n}\n\n/**\n * Decode a base64-encoded byte array.\n *\n * @remarks\n * We provide our own implementation so that we do not run into compatibility\n * issues with node.js, different browsers etc.\n * See:\n * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer\n *\n * @param text - to be decoded\n * @returns either the array or an error, if `text` is not a valid base64 encoding\n */\nexport function base64Decode(text: string): Either<Uint8Array, string> {\n  // NOTE (mristin, 2022-11-25):\n  // This implementation is vaguely based on:\n  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,\n  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and\n  // https://github.com/beatgammit/base64-js/blob/master/index.js.\n\n  const len = text.length;\n  let lenWoPad = len;\n\n  // NOTE (mristin, 2022-11-25):\n  // Some implementations forget the padding, so we try to be robust and check\n  // for the padding manually.\n  let bytesLength = text.length * 0.75;\n  if (text[len - 1] === \"=\") {\n    bytesLength--;\n    lenWoPad--;\n    if (text[len - 2] === \"=\") {\n      bytesLength--;\n      lenWoPad--;\n    }\n  }\n\n  const bytes = new Uint8Array(bytesLength);\n\n  const base64LookupLen = BASE64_LOOKUP.length;\n\n  let pointer = 0;\n\n  for (let i = 0; i < len; i += 4) {\n    // NOTE (mristin, 2022-11-25):\n    // Admittedly, this is very verbose code, but we want to be efficient, so we\n    // opted for performance over readability here.\n\n    const charCode0 = text.charCodeAt(i);\n    if (charCode0 >= base64LookupLen) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i}: ${text[i]} (code: ${charCode0})`\n      );\n    }\n    const encoded0 = BASE64_LOOKUP[charCode0];\n    if (encoded0 === 255) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i}: ${text[i]} (code: ${charCode0})`\n      );\n    }\n\n    const charCode1 = text.charCodeAt(i + 1);\n    if (charCode1 >= base64LookupLen) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 1}: ${text[i + 1]} (code: ${charCode1})`\n      );\n    }\n    const encoded1 = BASE64_LOOKUP[charCode1];\n    if (encoded1 === 255) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 1}: ${text[i + 1]} (code: ${charCode1})`\n      );\n    }\n\n    // We map padding to 65, which is the value of \"A\".\n    const charCode2 = i + 2 < lenWoPad ? text.charCodeAt(i + 2) : 65;\n    if (charCode2 >= base64LookupLen) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 2}: ${text[i + 2]} (code: ${charCode2})`\n      );\n    }\n    const encoded2 = BASE64_LOOKUP[charCode2];\n    if (encoded2 === 255) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 2}: ${text[i + 2]} (code: ${charCode2})`\n      );\n    }\n\n    // We map padding to 65, which is the value of \"A\".\n    const charCode3 = i + 3 < lenWoPad ? text.charCodeAt(i + 3) : 65;\n    if (charCode3 >= base64LookupLen) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 3}: ${text[i + 3]} (code: ${charCode3})`\n      );\n    }\n    const encoded3 = BASE64_LOOKUP[charCode3];\n    if (encoded3 === 255) {\n      return new Either<Uint8Array, string>(\n        null,\n        \"Expected a valid character from base64-encoded string, \" +\n          `but got at index ${i + 3}: ${text[i + 3]} (code: ${charCode3})`\n      );\n    }\n\n    bytes[pointer] = (encoded0 << 2) | (encoded1 >> 4);\n    pointer++;\n\n    bytes[pointer] = ((encoded1 & 15) << 4) | (encoded2 >> 2);\n    pointer++;\n\n    bytes[pointer] = ((encoded2 & 3) << 6) | (encoded3 & 63);\n    pointer++;\n  }\n\n  // NOTE (mristin, 2022-12-02):\n  // We expect Uint8Array to silently ignore writes outside of the buffer,\n  // but we still want to check here in case the underlying platform was flaky about it.\n  if (bytes.length !== bytesLength) {\n    throw new Error(\n      `Expected bytes to have length ${bytesLength}, but got ${bytes.length}`\n    );\n  }\n\n  return new Either<Uint8Array, string>(bytes, null);\n}\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n"],"mappings":"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"}