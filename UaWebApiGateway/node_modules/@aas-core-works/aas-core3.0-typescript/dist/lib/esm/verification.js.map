{"version":3,"file":"verification.js","names":["AasCommon","AasConstants","AasTypes","PropertySegment","constructor","instance","name","toString","IndexSegment","sequence","index","Path","segments","prepend","segment","unshift","join","VerificationError","path","message","constructMatchesIdShort","pattern","RegExp","REGEXP_MATCHES_ID_SHORT","matchesIdShort","text","test","constructMatchesVersionType","REGEXP_MATCHES_VERSION_TYPE","matchesVersionType","constructMatchesRevisionType","REGEXP_MATCHES_REVISION_TYPE","matchesRevisionType","constructMatchesXsDateTimeUtc","digit","yearFrag","monthFrag","dayFrag","hourFrag","minuteFrag","secondFrag","endOfDayFrag","timezoneFrag","dateTimeLexicalRep","REGEXP_MATCHES_XS_DATE_TIME_UTC","matchesXsDateTimeUtc","isXsDateTimeUtc","value","date","split","isXsDate","constructMatchesMimeType","tchar","token","type","subtype","ows","obsText","qdText","quotedPair","quotedString","parameter","mediaType","REGEXP_MATCHES_MIME_TYPE","matchesMimeType","constructMatchesRfc8089Path","h16","decOctet","ipv4address","ls32","ipv6address","unreserved","subDelims","ipvfuture","ipLiteral","pctEncoded","regName","host","fileAuth","pchar","segmentNz","pathAbsolute","authPath","localPath","fileHierPart","fileScheme","fileUri","REGEXP_MATCHES_RFC_8089_PATH","matchesRfc8089Path","constructMatchesBcp47","alphanum","singleton","extension","extlang","irregular","regular","grandfathered","language","script","region","variant","privateuse","langtag","languageTag","REGEXP_MATCHES_BCP_47","matchesBcp47","langStringsHaveUniqueLanguages","langStrings","languageSet","Set","langString","has","add","qualifierTypesAreUnique","qualifiers","typeSet","qualifier","constructMatchesXmlSerializableString","REGEXP_MATCHES_XML_SERIALIZABLE_STRING","matchesXmlSerializableString","constructMatchesXsAnyUri","scheme","ucschar","iunreserved","iuserinfo","iregName","ihost","port","iauthority","ipchar","isegment","ipathAbempty","isegmentNz","ipathAbsolute","ipathRootless","ipathEmpty","ihierPart","iprivate","iquery","ifragment","isegmentNzNc","ipathNoscheme","irelativePart","irelativeRef","iri","iriReference","REGEXP_MATCHES_XS_ANY_URI","matchesXsAnyUri","constructMatchesXsBase64Binary","b04Char","b04","b16Char","b16","b64Char","b64","b64quad","b64FinalQuad","padded8","padded16","b64final","base64Binary","REGEXP_MATCHES_XS_BASE_64_BINARY","matchesXsBase64Binary","constructMatchesXsBoolean","REGEXP_MATCHES_XS_BOOLEAN","matchesXsBoolean","constructMatchesXsDate","dateLexicalRep","REGEXP_MATCHES_XS_DATE","matchesXsDate","constructMatchesXsDateTime","REGEXP_MATCHES_XS_DATE_TIME","matchesXsDateTime","isXsDateTime","constructMatchesXsDecimal","unsignedNoDecimalPtNumeral","noDecimalPtNumeral","fracFrag","unsignedDecimalPtNumeral","decimalPtNumeral","decimalLexicalRep","REGEXP_MATCHES_XS_DECIMAL","matchesXsDecimal","constructMatchesXsDouble","doubleRep","REGEXP_MATCHES_XS_DOUBLE","matchesXsDouble","constructMatchesXsDuration","durationRep","REGEXP_MATCHES_XS_DURATION","matchesXsDuration","constructMatchesXsFloat","floatRep","REGEXP_MATCHES_XS_FLOAT","matchesXsFloat","constructMatchesXsGDay","gDayLexicalRep","REGEXP_MATCHES_XS_G_DAY","matchesXsGDay","constructMatchesXsGMonth","gMonthLexicalRep","REGEXP_MATCHES_XS_G_MONTH","matchesXsGMonth","constructMatchesXsGMonthDay","gMonthDayRep","REGEXP_MATCHES_XS_G_MONTH_DAY","matchesXsGMonthDay","constructMatchesXsGYear","gYearRep","REGEXP_MATCHES_XS_G_YEAR","matchesXsGYear","constructMatchesXsGYearMonth","gYearMonthRep","REGEXP_MATCHES_XS_G_YEAR_MONTH","matchesXsGYearMonth","constructMatchesXsHexBinary","hexBinary","REGEXP_MATCHES_XS_HEX_BINARY","matchesXsHexBinary","constructMatchesXsTime","timeRep","REGEXP_MATCHES_XS_TIME","matchesXsTime","constructMatchesXsInteger","integerRep","REGEXP_MATCHES_XS_INTEGER","matchesXsInteger","constructMatchesXsLong","longRep","REGEXP_MATCHES_XS_LONG","matchesXsLong","constructMatchesXsInt","intRep","REGEXP_MATCHES_XS_INT","matchesXsInt","constructMatchesXsShort","shortRep","REGEXP_MATCHES_XS_SHORT","matchesXsShort","constructMatchesXsByte","byteRep","REGEXP_MATCHES_XS_BYTE","matchesXsByte","constructMatchesXsNonNegativeInteger","nonNegativeIntegerRep","REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER","matchesXsNonNegativeInteger","constructMatchesXsPositiveInteger","positiveIntegerRep","REGEXP_MATCHES_XS_POSITIVE_INTEGER","matchesXsPositiveInteger","constructMatchesXsUnsignedLong","unsignedLongRep","REGEXP_MATCHES_XS_UNSIGNED_LONG","matchesXsUnsignedLong","constructMatchesXsUnsignedInt","unsignedIntRep","REGEXP_MATCHES_XS_UNSIGNED_INT","matchesXsUnsignedInt","constructMatchesXsUnsignedShort","unsignedShortRep","REGEXP_MATCHES_XS_UNSIGNED_SHORT","matchesXsUnsignedShort","constructMatchesXsUnsignedByte","unsignedByteRep","REGEXP_MATCHES_XS_UNSIGNED_BYTE","matchesXsUnsignedByte","constructMatchesXsNonPositiveInteger","nonPositiveIntegerRep","REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER","matchesXsNonPositiveInteger","constructMatchesXsNegativeInteger","negativeIntegerRep","REGEXP_MATCHES_XS_NEGATIVE_INTEGER","matchesXsNegativeInteger","constructMatchesXsString","REGEXP_MATCHES_XS_STRING","matchesXsString","isLeapYear","year","DAYS_IN_MONTH","Map","DATE_PREFIX_RE","match","exec","parseInt","month","day","maxDays","get","isXsDouble","converted","parseFloat","isFinite","isXsFloat","rounded","Math","fround","isXsGMonthDay","substring","LONG_RE","SMALLEST_LONG_WITHOUT_SIGN_AS_STRING","LARGEST_LONG_AS_STRING","isXsLong","numberPart","limit","length","i","thisDigit","charCodeAt","limitDigit","isXsInt","isXsShort","isXsByte","UNSIGNED_LONG_RE","LARGEST_UNSIGNED_LONG_AS_STRING","isXsUnsignedLong","isXsUnsignedInt","isXsUnsignedShort","isXsUnsignedByte","DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY","DataTypeDefXsd","AnyUri","Base64Binary","Boolean","Byte","Date","DateTime","Decimal","Double","Duration","Float","GDay","GMonth","GMonthDay","GYear","GYearMonth","HexBinary","Int","Integer","Long","NegativeInteger","NonNegativeInteger","NonPositiveInteger","PositiveInteger","Short","String","Time","UnsignedByte","UnsignedInt","UnsignedLong","UnsignedShort","assertAllDataTypeDefXsdCovered","literal","overDataTypeDefXsd","Error","valueConsistentWithXsdType","valueType","verifier","undefined","isModelReferenceTo","reference","expectedType","ReferenceTypes","ModelReference","keys","at","isModelReferenceToReferable","AAS_REFERABLES","idShortsAreUnique","referables","idShortSet","referable","idShort","idShortsOfVariablesAreUnique","inputVariables","outputVariables","inoutputVariables","variable","extensionNamesAreUnique","extensions","nameSet","submodelElementsHaveIdenticalSemanticIds","elements","thatSemanticId","element","semanticId","thisSemanticId","AAS_SUBMODEL_ELEMENTS_TO_IS","AasSubmodelElements","AnnotatedRelationshipElement","isAnnotatedRelationshipElement","BasicEventElement","isBasicEventElement","Blob","isBlob","Capability","isCapability","DataElement","isDataElement","Entity","isEntity","EventElement","isEventElement","File","isFile","MultiLanguageProperty","isMultiLanguageProperty","Operation","isOperation","Property","isProperty","Range","isRange","ReferenceElement","isReferenceElement","RelationshipElement","isRelationshipElement","SubmodelElement","isSubmodelElement","SubmodelElementList","isSubmodelElementList","SubmodelElementCollection","isSubmodelElementCollection","assertAllTypesCoveredInAasSubmodelElementsToIs","overAasSubmodelElements","submodelElementIsOfType","isFunc","propertiesOrRangesHaveValueType","referenceKeyValuesEqual","that","other","dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType","embeddedDataSpecifications","embeddedDataSpecification","content","dataSpecificationContent","isDataSpecificationIec61360","dataType","DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE","dataSpecificationIec61360sForReferenceHaveAppropriateDataType","DATA_TYPE_IEC_61360_FOR_REFERENCE","dataSpecificationIec61360sForDocumentHaveAppropriateDataType","DATA_TYPE_IEC_61360_FOR_DOCUMENT","dataSpecificationIec61360sHaveDataType","dataSpecificationIec61360sHaveValue","dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish","definition","noDefinitionInEnglish","isBcp47ForEnglish","constructIsBcp47ForEnglish","REGEXP_IS_BCP_47_FOR_ENGLISH","Verifier","AbstractTransformerWithContext","transformExtensionWithContext","context","supplementalSemanticIds","refersTo","valueTypeOrDefault","error","verifyNameType","verifyValueDataType","transformWithContext","supplementalSemanticIdsIndex","item","refersToIndex","transformAdministrativeInformationWithContext","revision","version","verifyVersionType","verifyRevisionType","templateId","verifyIdentifier","embeddedDataSpecificationsIndex","creator","transformQualifierWithContext","verifyQualifierType","valueId","transformAssetAdministrationShellWithContext","description","displayName","submodels","derivedFrom","KeyTypes","AssetAdministrationShell","every","map","Submodel","category","verifyIdShortType","id","extensionsIndex","displayNameIndex","descriptionIndex","administration","assetInformation","submodelsIndex","transformAssetInformationWithContext","specificAssetIds","specificAssetId","globalAssetId","assetType","specificAssetIdsIndex","defaultThumbnail","transformResourceWithContext","verifyPathType","contentType","verifyContentType","transformSpecificAssetIdWithContext","externalSubjectId","ExternalReference","verifyLabelType","transformSubmodelWithContext","submodelElements","kindOrDefault","ModellingKind","Template","submodelElement","QualifierKind","TemplateQualifier","some","qualifiersIndex","submodelElementsIndex","transformRelationshipElementWithContext","first","second","transformSubmodelElementListWithContext","semanticIdListElement","child","typeValueListElement","valueTypeListElement","valueIndex","transformSubmodelElementCollectionWithContext","transformPropertyWithContext","VALID_CATEGORIES_FOR_DATA_ELEMENT","transformMultiLanguagePropertyWithContext","transformRangeWithContext","max","min","transformReferenceElementWithContext","transformBlobWithContext","verifyBlobType","transformFileWithContext","transformAnnotatedRelationshipElementWithContext","annotations","annotationsIndex","transformEntityWithContext","statements","entityType","EntityType","SelfManagedEntity","statementsIndex","transformEventPayloadWithContext","source","observableReference","topic","verifyMessageTopicType","verifyDateTimeUtc","timeStamp","payload","sourceSemanticId","observableSemanticId","subjectId","transformBasicEventElementWithContext","direction","Direction","Input","maxInterval","observed","messageBroker","messageTopic","lastUpdate","minInterval","verifyDuration","transformOperationWithContext","inputVariablesIndex","outputVariablesIndex","inoutputVariablesIndex","transformOperationVariableWithContext","transformCapabilityWithContext","transformConceptDescriptionWithContext","isCaseOf","isCaseOfIndex","transformReferenceWithContext","GLOBALLY_IDENTIFIABLES","GENERIC_GLOBALLY_IDENTIFIABLES","AAS_IDENTIFIABLES","GENERIC_FRAGMENT_KEYS","range","FRAGMENT_KEYS","FragmentReference","referredSemanticId","keysIndex","transformKeyWithContext","transformLangStringNameTypeWithContext","verifyBcp47LanguageTag","verifyNonEmptyXmlSerializableString","transformLangStringTextTypeWithContext","transformEnvironmentWithContext","conceptDescriptions","assetAdministrationShells","assetAdministrationShellsIndex","conceptDescriptionsIndex","transformEmbeddedDataSpecificationWithContext","dataSpecification","transformLevelTypeWithContext","transformValueReferencePairWithContext","verifyValueTypeIec61360","transformValueListWithContext","valueReferencePairs","valueReferencePairsIndex","transformLangStringPreferredNameTypeIec61360WithContext","transformLangStringShortNameTypeIec61360WithContext","transformLangStringDefinitionTypeIec61360WithContext","transformDataSpecificationIec61360WithContext","valueList","IEC_61360_DATA_TYPES_WITH_UNIT","unit","unitId","shortName","preferredName","sourceOfDefinition","symbol","valueFormat","preferredNameIndex","shortNameIndex","definitionIndex","levelType","VERIFIER","verify","recurse"],"sources":["../../../src/verification.ts"],"sourcesContent":["/**\n * Verify that the instances of the meta-model satisfy the invariants.\n *\n * Here is an example how to verify an instance of {@link types.Extension}:\n *\n * ```ts\n * import * as AasTypes from \"@aas-core-works/aas-core3.0-typescript/types\";\n * import * as AasVerification from \"@aas-core-works/aas-core3.0-typescript/verification\";\n *\n * const anInstance = new AasTypes.Extension(\n *   // ... some constructor arguments ...\n * );\n *\n * for (const error of AasVerification.verify(anInstance)) {\n *   console.log(`${error.message} at: ${error.path}`);\n * }\n * ```\n */\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n\nimport * as AasCommon from \"./common\";\nimport * as AasConstants from \"./constants\";\nimport * as AasTypes from \"./types\";\n\n// The generated code might contain deliberately double negations. For example,\n// when the constraint is formulated as a NAND and we check that the constraint\n// is not fulfilled. Therefore, we disable this linting rule.\n/* eslint no-extra-boolean-cast: 0 */\n\n/**\n * Represent a property access on a path to an erroneous value.\n */\nexport class PropertySegment {\n  /**\n   * Instance containing the property\n   */\n  readonly instance: AasTypes.Class;\n\n  /**\n   * Name of the property\n   */\n  readonly name: string;\n\n  constructor(instance: AasTypes.Class, name: string) {\n    this.instance = instance;\n    this.name = name;\n  }\n\n  toString(): string {\n    return `.${this.name}`;\n  }\n}\n\n/**\n * Represent an index access on a path to an erroneous value.\n */\nexport class IndexSegment {\n  /**\n   * Sequence containing the item at {@link index}\n   */\n  readonly sequence: Array<AasTypes.Class>;\n\n  /**\n   * Index of the item in the {@link sequence}\n   */\n  readonly index: number;\n\n  constructor(sequence: Array<AasTypes.Class>, index: number) {\n    this.sequence = sequence;\n    this.index = index;\n  }\n\n  toString(): string {\n    return `[${this.index}]`;\n  }\n}\n\nexport type Segment = PropertySegment | IndexSegment;\n\n/**\n * Represent the relative path to the erroneous value.\n */\nexport class Path {\n  readonly segments: Array<Segment> = [];\n\n  prepend(segment: Segment): void {\n    this.segments.unshift(segment);\n  }\n\n  toString(): string {\n    return this.segments.join(\"\");\n  }\n}\n\n/**\n * Represent a verification error in the data.\n */\nexport class VerificationError {\n  // NOTE (mristin, 2022-11-12):\n  // The name `VerificationError` is redundant since it lives in `verification` module,\n  // and it would have made more sense to call it simply `Error`. Unfortunately in this case,\n  // `Error` is a reserved name by JavaScript.\n\n  /**\n   * Human-readable description of the error\n   */\n  readonly message: string;\n\n  /**\n   * Path to the erroneous value\n   */\n  readonly path: Path = new Path();\n\n  /**\n   * Initialize with the given `message` and `path`.\n   *\n   * @remarks\n   * If no `path` is specified, initialize with an empty path.\n   */\n  constructor(message: string, path: Path | null = null) {\n    this.message = message;\n    this.path = path !== null ? path : new Path();\n  }\n}\n\nfunction constructMatchesIdShort(): RegExp {\n  const pattern = \"^[a-zA-Z][a-zA-Z0-9_]*$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_ID_SHORT = constructMatchesIdShort();\n\n/**\n * Check that `text` is a valid short ID.\n */\nexport function matchesIdShort(text: string): boolean {\n  return REGEXP_MATCHES_ID_SHORT.test(text);\n}\n\nfunction constructMatchesVersionType(): RegExp {\n  const pattern = \"^(0|[1-9][0-9]*)$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_VERSION_TYPE = constructMatchesVersionType();\n\n/**\n * Check that `text` is a valid version string.\n */\nexport function matchesVersionType(text: string): boolean {\n  return REGEXP_MATCHES_VERSION_TYPE.test(text);\n}\n\nfunction constructMatchesRevisionType(): RegExp {\n  const pattern = \"^(0|[1-9][0-9]*)$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_REVISION_TYPE = constructMatchesRevisionType();\n\n/**\n * Check that `text` is a valid revision string.\n */\nexport function matchesRevisionType(text: string): boolean {\n  return REGEXP_MATCHES_REVISION_TYPE.test(text);\n}\n\nfunction constructMatchesXsDateTimeUtc(): RegExp {\n  const digit = \"[0-9]\";\n  const yearFrag = `-?(([1-9]${digit}${digit}${digit}+)|(0${digit}${digit}${digit}))`;\n  const monthFrag = \"((0[1-9])|(1[0-2]))\";\n  const dayFrag = `((0[1-9])|([12]${digit})|(3[01]))`;\n  const hourFrag = `(([01]${digit})|(2[0-3]))`;\n  const minuteFrag = `[0-5]${digit}`;\n  const secondFrag = `([0-5]${digit})(\\\\.${digit}+)?`;\n  const endOfDayFrag = \"24:00:00(\\\\.0+)?\";\n  const timezoneFrag = \"(Z|\\\\+00:00|-00:00)\";\n  const dateTimeLexicalRep = `${yearFrag}-${monthFrag}-${dayFrag}T((${hourFrag}:${minuteFrag}:${secondFrag})|${endOfDayFrag})${timezoneFrag}`;\n  const pattern = `^${dateTimeLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DATE_TIME_UTC = constructMatchesXsDateTimeUtc();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:dateTime`.\n *\n * @remarks\n *\n * The time zone must be fixed to UTC. We verify only that the `text` matches\n * a pre-defined pattern. We *do not* verify that the day of month is\n * correct nor do we check for leap seconds.\n *\n * See: https://www.w3.org/TR/xmlschema-2/#dateTime\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDateTimeUtc(text: string): boolean {\n  return REGEXP_MATCHES_XS_DATE_TIME_UTC.test(text);\n}\n\n/**\n * Check that `value` is a valid `xs:dateTime` with\n * the time zone set to UTC.\n *\n * @param value - to be checked\n * @returns `true` if `value` is a valid `xs:dateTime` with the UTC time zone\n */\nexport function isXsDateTimeUtc(value: string): boolean {\n  if (!matchesXsDateTimeUtc(value)) {\n    return false;\n  }\n\n  const date = value.split(\"T\", 1)[0];\n  return isXsDate(date);\n}\n\nfunction constructMatchesMimeType(): RegExp {\n  const tchar = \"[!#$%&'*+\\\\-.^_`|~0-9a-zA-Z]\";\n  const token = `(${tchar})+`;\n  const type = `${token}`;\n  const subtype = `${token}`;\n  const ows = \"[ \\\\t]*\";\n  const obsText = \"[\\\\u{80}-\\\\u{ff}]\";\n  const qdText = `([\\\\t !#-\\\\[\\\\]-~]|${obsText})`;\n  const quotedPair = `\\\\\\\\([\\\\t !-~]|${obsText})`;\n  const quotedString = `\"(${qdText}|${quotedPair})*\"`;\n  const parameter = `${token}=(${token}|${quotedString})`;\n  const mediaType = `^${type}/${subtype}(${ows};${ows}${parameter})*$`;\n\n  return new RegExp(mediaType, \"u\");\n}\n\nconst REGEXP_MATCHES_MIME_TYPE = constructMatchesMimeType();\n\n/**\n * Check that `text` conforms to the pattern of MIME type.\n *\n * @remarks\n *\n * The definition has been taken from:\n * https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1,\n * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and\n * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6.\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesMimeType(text: string): boolean {\n  return REGEXP_MATCHES_MIME_TYPE.test(text);\n}\n\nfunction constructMatchesRfc8089Path(): RegExp {\n  const h16 = \"[0-9A-Fa-f]{1,4}\";\n  const decOctet = \"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\";\n  const ipv4address = `${decOctet}\\\\.${decOctet}\\\\.${decOctet}\\\\.${decOctet}`;\n  const ls32 = `(${h16}:${h16}|${ipv4address})`;\n  const ipv6address = `((${h16}:){6}${ls32}|::(${h16}:){5}${ls32}|(${h16})?::(${h16}:){4}${ls32}|((${h16}:)?${h16})?::(${h16}:){3}${ls32}|((${h16}:){0,2}${h16})?::(${h16}:){2}${ls32}|((${h16}:){0,3}${h16})?::${h16}:${ls32}|((${h16}:){0,4}${h16})?::${ls32}|((${h16}:){0,5}${h16})?::${h16}|((${h16}:){0,6}${h16})?::)`;\n  const unreserved = \"[a-zA-Z0-9\\\\-._~]\";\n  const subDelims = \"[!$&'()*+,;=]\";\n  const ipvfuture = `[vV][0-9A-Fa-f]+\\\\.(${unreserved}|${subDelims}|:)+`;\n  const ipLiteral = `\\\\[(${ipv6address}|${ipvfuture})\\\\]`;\n  const pctEncoded = \"%[0-9A-Fa-f][0-9A-Fa-f]\";\n  const regName = `(${unreserved}|${pctEncoded}|${subDelims})*`;\n  const host = `(${ipLiteral}|${ipv4address}|${regName})`;\n  const fileAuth = `(localhost|${host})`;\n  const pchar = `(${unreserved}|${pctEncoded}|${subDelims}|[:@])`;\n  const segmentNz = `(${pchar})+`;\n  const segment = `(${pchar})*`;\n  const pathAbsolute = `/(${segmentNz}(/${segment})*)?`;\n  const authPath = `(${fileAuth})?${pathAbsolute}`;\n  const localPath = `${pathAbsolute}`;\n  const fileHierPart = `(//${authPath}|${localPath})`;\n  const fileScheme = \"file\";\n  const fileUri = `${fileScheme}:${fileHierPart}`;\n  const pattern = `^${fileUri}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_RFC_8089_PATH = constructMatchesRfc8089Path();\n\n/**\n * Check that `text` is a path conforming to the pattern of RFC 8089.\n *\n * @remarks\n *\n * The definition has been taken from:\n * https://datatracker.ietf.org/doc/html/rfc8089\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesRfc8089Path(text: string): boolean {\n  return REGEXP_MATCHES_RFC_8089_PATH.test(text);\n}\n\nfunction constructMatchesBcp47(): RegExp {\n  const alphanum = \"[a-zA-Z0-9]\";\n  const singleton = \"[0-9A-WY-Za-wy-z]\";\n  const extension = `${singleton}(-(${alphanum}){2,8})+`;\n  const extlang = \"[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2}\";\n  const irregular =\n    \"(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)\";\n  const regular =\n    \"(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)\";\n  const grandfathered = `(${irregular}|${regular})`;\n  const language = `([a-zA-Z]{2,3}(-${extlang})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})`;\n  const script = \"[a-zA-Z]{4}\";\n  const region = \"([a-zA-Z]{2}|[0-9]{3})\";\n  const variant = `((${alphanum}){5,8}|[0-9](${alphanum}){3})`;\n  const privateuse = `[xX](-(${alphanum}){1,8})+`;\n  const langtag = `${language}(-${script})?(-${region})?(-${variant})*(-${extension})*(-${privateuse})?`;\n  const languageTag = `(${langtag}|${privateuse}|${grandfathered})`;\n  const pattern = `^${languageTag}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_BCP_47 = constructMatchesBcp47();\n\n/**\n * Check that `text` is a valid BCP 47 language tag.\n *\n * @remarks\n *\n * See: https://en.wikipedia.org/wiki/IETF_language_tag\n */\nexport function matchesBcp47(text: string): boolean {\n  return REGEXP_MATCHES_BCP_47.test(text);\n}\n\n/**\n * Check that `langStrings` are specified each for a unique\n * language.\n *\n * @param langStrings - to be verified\n * @returns `true` if the check passes\n */\nexport function langStringsHaveUniqueLanguages(\n  langStrings: Iterable<AasTypes.IAbstractLangString>\n): boolean {\n  const languageSet = new Set<string>();\n\n  for (const langString of langStrings) {\n    if (languageSet.has(langString.language)) {\n      return false;\n    }\n\n    languageSet.add(langString.language);\n  }\n\n  return true;\n}\n\n/**\n * Check that there are no duplication {@link types.Qualifier.type}'s\n * in the `qualifiers`.\n *\n * @param qualifiers - to be verified\n * @returns `true` if the check passes\n */\nexport function qualifierTypesAreUnique(\n  qualifiers: Iterable<AasTypes.Qualifier>\n): boolean {\n  const typeSet = new Set<string>();\n\n  for (const qualifier of qualifiers) {\n    if (typeSet.has(qualifier.type)) {\n      return false;\n    }\n\n    typeSet.add(qualifier.type);\n  }\n\n  return true;\n}\n\nfunction constructMatchesXmlSerializableString(): RegExp {\n  const pattern =\n    \"^[\\\\u{9}\\\\u{a}\\\\u{d}\\\\u{20}-\\\\u{d7ff}\\\\u{e000}-\\\\u{fffd}\\\\u{10000}-\\\\u{10ffff}]*$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XML_SERIALIZABLE_STRING = constructMatchesXmlSerializableString();\n\n/**\n * Check that `text` conforms to the pattern of the Constraint AASd-130.\n *\n * @remarks\n *\n * Ensures that encoding is possible and interoperability between different\n * serializations is possible.\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXmlSerializableString(text: string): boolean {\n  return REGEXP_MATCHES_XML_SERIALIZABLE_STRING.test(text);\n}\n\nfunction constructMatchesXsAnyUri(): RegExp {\n  const scheme = \"[a-zA-Z][a-zA-Z0-9+\\\\-.]*\";\n  const ucschar =\n    \"[\\\\u{a0}-\\\\u{d7ff}\\\\u{f900}-\\\\u{fdcf}\\\\u{fdf0}-\\\\u{ffef}\\\\u{10000}-\\\\u{1fffd}\\\\u{20000}-\\\\u{2fffd}\\\\u{30000}-\\\\u{3fffd}\\\\u{40000}-\\\\u{4fffd}\\\\u{50000}-\\\\u{5fffd}\\\\u{60000}-\\\\u{6fffd}\\\\u{70000}-\\\\u{7fffd}\\\\u{80000}-\\\\u{8fffd}\\\\u{90000}-\\\\u{9fffd}\\\\u{a0000}-\\\\u{afffd}\\\\u{b0000}-\\\\u{bfffd}\\\\u{c0000}-\\\\u{cfffd}\\\\u{d0000}-\\\\u{dfffd}\\\\u{e1000}-\\\\u{efffd}]\";\n  const iunreserved = `([a-zA-Z0-9\\\\-._~]|${ucschar})`;\n  const pctEncoded = \"%[0-9A-Fa-f][0-9A-Fa-f]\";\n  const subDelims = \"[!$&'()*+,;=]\";\n  const iuserinfo = `(${iunreserved}|${pctEncoded}|${subDelims}|:)*`;\n  const h16 = \"[0-9A-Fa-f]{1,4}\";\n  const decOctet = \"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\";\n  const ipv4address = `${decOctet}\\\\.${decOctet}\\\\.${decOctet}\\\\.${decOctet}`;\n  const ls32 = `(${h16}:${h16}|${ipv4address})`;\n  const ipv6address = `((${h16}:){6}${ls32}|::(${h16}:){5}${ls32}|(${h16})?::(${h16}:){4}${ls32}|((${h16}:)?${h16})?::(${h16}:){3}${ls32}|((${h16}:){0,2}${h16})?::(${h16}:){2}${ls32}|((${h16}:){0,3}${h16})?::${h16}:${ls32}|((${h16}:){0,4}${h16})?::${ls32}|((${h16}:){0,5}${h16})?::${h16}|((${h16}:){0,6}${h16})?::)`;\n  const unreserved = \"[a-zA-Z0-9\\\\-._~]\";\n  const ipvfuture = `[vV][0-9A-Fa-f]+\\\\.(${unreserved}|${subDelims}|:)+`;\n  const ipLiteral = `\\\\[(${ipv6address}|${ipvfuture})\\\\]`;\n  const iregName = `(${iunreserved}|${pctEncoded}|${subDelims})*`;\n  const ihost = `(${ipLiteral}|${ipv4address}|${iregName})`;\n  const port = \"[0-9]*\";\n  const iauthority = `(${iuserinfo}@)?${ihost}(:${port})?`;\n  const ipchar = `(${iunreserved}|${pctEncoded}|${subDelims}|[:@])`;\n  const isegment = `(${ipchar})*`;\n  const ipathAbempty = `(/${isegment})*`;\n  const isegmentNz = `(${ipchar})+`;\n  const ipathAbsolute = `/(${isegmentNz}(/${isegment})*)?`;\n  const ipathRootless = `${isegmentNz}(/${isegment})*`;\n  const ipathEmpty = `(${ipchar}){0}`;\n  const ihierPart = `(//${iauthority}${ipathAbempty}|${ipathAbsolute}|${ipathRootless}|${ipathEmpty})`;\n  const iprivate = \"[\\\\u{e000}-\\\\u{f8ff}\\\\u{f0000}-\\\\u{ffffd}\\\\u{100000}-\\\\u{10fffd}]\";\n  const iquery = `(${ipchar}|${iprivate}|[/?])*`;\n  const ifragment = `(${ipchar}|[/?])*`;\n  const isegmentNzNc = `(${iunreserved}|${pctEncoded}|${subDelims}|@)+`;\n  const ipathNoscheme = `${isegmentNzNc}(/${isegment})*`;\n  const irelativePart = `(//${iauthority}${ipathAbempty}|${ipathAbsolute}|${ipathNoscheme}|${ipathEmpty})`;\n  const irelativeRef = `${irelativePart}(\\\\?${iquery})?(#${ifragment})?`;\n  const iri = `${scheme}:${ihierPart}(\\\\?${iquery})?(#${ifragment})?`;\n  const iriReference = `(${iri}|${irelativeRef})`;\n  const pattern = `^${iriReference}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_ANY_URI = constructMatchesXsAnyUri();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:anyURI`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#anyURI and\n * https://datatracker.ietf.org/doc/html/rfc3987\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsAnyUri(text: string): boolean {\n  return REGEXP_MATCHES_XS_ANY_URI.test(text);\n}\n\nfunction constructMatchesXsBase64Binary(): RegExp {\n  const b04Char = \"[AQgw]\";\n  const b04 = `${b04Char}\\\\u{20}?`;\n  const b16Char = \"[AEIMQUYcgkosw048]\";\n  const b16 = `${b16Char}\\\\u{20}?`;\n  const b64Char = \"[A-Za-z0-9+/]\";\n  const b64 = `${b64Char}\\\\u{20}?`;\n  const b64quad = `(${b64}${b64}${b64}${b64})`;\n  const b64FinalQuad = `(${b64}${b64}${b64}${b64Char})`;\n  const padded8 = `${b64}${b04}= ?=`;\n  const padded16 = `${b64}${b64}${b16}=`;\n  const b64final = `(${b64FinalQuad}|${padded16}|${padded8})`;\n  const base64Binary = `(${b64quad}*${b64final})?`;\n  const pattern = `^${base64Binary}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_BASE_64_BINARY = constructMatchesXsBase64Binary();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:base64Binary`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#base64Binary\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsBase64Binary(text: string): boolean {\n  return REGEXP_MATCHES_XS_BASE_64_BINARY.test(text);\n}\n\nfunction constructMatchesXsBoolean(): RegExp {\n  const pattern = \"^(true|false|1|0)$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_BOOLEAN = constructMatchesXsBoolean();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:boolean`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#boolean\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsBoolean(text: string): boolean {\n  return REGEXP_MATCHES_XS_BOOLEAN.test(text);\n}\n\nfunction constructMatchesXsDate(): RegExp {\n  const digit = \"[0-9]\";\n  const yearFrag = `-?(([1-9]${digit}${digit}${digit}+)|(0${digit}${digit}${digit}))`;\n  const monthFrag = \"((0[1-9])|(1[0-2]))\";\n  const dayFrag = `((0[1-9])|([12]${digit})|(3[01]))`;\n  const minuteFrag = `[0-5]${digit}`;\n  const timezoneFrag = `(Z|(\\\\+|-)((0${digit}|1[0-3]):${minuteFrag}|14:00))`;\n  const dateLexicalRep = `${yearFrag}-${monthFrag}-${dayFrag}${timezoneFrag}?`;\n  const pattern = `^${dateLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DATE = constructMatchesXsDate();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:date`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#date\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDate(text: string): boolean {\n  return REGEXP_MATCHES_XS_DATE.test(text);\n}\n\nfunction constructMatchesXsDateTime(): RegExp {\n  const digit = \"[0-9]\";\n  const yearFrag = `-?(([1-9]${digit}${digit}${digit}+)|(0${digit}${digit}${digit}))`;\n  const monthFrag = \"((0[1-9])|(1[0-2]))\";\n  const dayFrag = `((0[1-9])|([12]${digit})|(3[01]))`;\n  const hourFrag = `(([01]${digit})|(2[0-3]))`;\n  const minuteFrag = `[0-5]${digit}`;\n  const secondFrag = `([0-5]${digit})(\\\\.${digit}+)?`;\n  const endOfDayFrag = \"24:00:00(\\\\.0+)?\";\n  const timezoneFrag = `(Z|(\\\\+|-)((0${digit}|1[0-3]):${minuteFrag}|14:00))`;\n  const dateTimeLexicalRep = `${yearFrag}-${monthFrag}-${dayFrag}T((${hourFrag}:${minuteFrag}:${secondFrag})|${endOfDayFrag})${timezoneFrag}?`;\n  const pattern = `^${dateTimeLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DATE_TIME = constructMatchesXsDateTime();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:dateTime`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#dateTime\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDateTime(text: string): boolean {\n  return REGEXP_MATCHES_XS_DATE_TIME.test(text);\n}\n\n/**\n * Check that `value` is a valid `xs:dateTime`.\n *\n * @remarks\n * Year 1 BCE is the last leap BCE year.\n * See https://www.w3.org/TR/xmlschema-2/#dateTime.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:dateTime`\n */\nexport function isXsDateTime(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We can not use date functions from the standard library as it does not\n  // handle years BCE (*e.g.*, `-0003-01-02`).\n\n  if (!matchesXsDateTime(value)) {\n    return false;\n  }\n\n  const date = value.split(\"T\", 1)[0];\n  return isXsDate(date);\n}\n\nfunction constructMatchesXsDecimal(): RegExp {\n  const digit = \"[0-9]\";\n  const unsignedNoDecimalPtNumeral = `${digit}+`;\n  const noDecimalPtNumeral = `(\\\\+|-)?${unsignedNoDecimalPtNumeral}`;\n  const fracFrag = `${digit}+`;\n  const unsignedDecimalPtNumeral = `(${unsignedNoDecimalPtNumeral}\\\\.${fracFrag}|\\\\.${fracFrag})`;\n  const decimalPtNumeral = `(\\\\+|-)?${unsignedDecimalPtNumeral}`;\n  const decimalLexicalRep = `(${decimalPtNumeral}|${noDecimalPtNumeral})`;\n  const pattern = `^${decimalLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DECIMAL = constructMatchesXsDecimal();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:decimal`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#decimal\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDecimal(text: string): boolean {\n  return REGEXP_MATCHES_XS_DECIMAL.test(text);\n}\n\nfunction constructMatchesXsDouble(): RegExp {\n  const doubleRep =\n    \"((\\\\+|-)?([0-9]+(\\\\.[0-9]*)?|\\\\.[0-9]+)([Ee](\\\\+|-)?[0-9]+)?|-?INF|NaN)\";\n  const pattern = `^${doubleRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DOUBLE = constructMatchesXsDouble();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:double`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#double\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDouble(text: string): boolean {\n  return REGEXP_MATCHES_XS_DOUBLE.test(text);\n}\n\nfunction constructMatchesXsDuration(): RegExp {\n  const durationRep =\n    \"-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\\\.[0-9]+)?S)?|([0-9]+(\\\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\\\.[0-9]+)?S)?|([0-9]+(\\\\.[0-9]+)?S))))\";\n  const pattern = `^${durationRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_DURATION = constructMatchesXsDuration();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:duration`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsDuration(text: string): boolean {\n  return REGEXP_MATCHES_XS_DURATION.test(text);\n}\n\nfunction constructMatchesXsFloat(): RegExp {\n  const floatRep =\n    \"((\\\\+|-)?([0-9]+(\\\\.[0-9]*)?|\\\\.[0-9]+)([Ee](\\\\+|-)?[0-9]+)?|-?INF|NaN)\";\n  const pattern = `^${floatRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_FLOAT = constructMatchesXsFloat();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:float`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#float\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsFloat(text: string): boolean {\n  return REGEXP_MATCHES_XS_FLOAT.test(text);\n}\n\nfunction constructMatchesXsGDay(): RegExp {\n  const gDayLexicalRep =\n    \"---(0[1-9]|[12][0-9]|3[01])(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${gDayLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_G_DAY = constructMatchesXsGDay();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:gDay`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#gDay\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsGDay(text: string): boolean {\n  return REGEXP_MATCHES_XS_G_DAY.test(text);\n}\n\nfunction constructMatchesXsGMonth(): RegExp {\n  const gMonthLexicalRep =\n    \"--(0[1-9]|1[0-2])(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${gMonthLexicalRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_G_MONTH = constructMatchesXsGMonth();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:gMonth`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#gMonth\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsGMonth(text: string): boolean {\n  return REGEXP_MATCHES_XS_G_MONTH.test(text);\n}\n\nfunction constructMatchesXsGMonthDay(): RegExp {\n  const gMonthDayRep =\n    \"--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${gMonthDayRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_G_MONTH_DAY = constructMatchesXsGMonthDay();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:gMonthDay`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#gMonthDay\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsGMonthDay(text: string): boolean {\n  return REGEXP_MATCHES_XS_G_MONTH_DAY.test(text);\n}\n\nfunction constructMatchesXsGYear(): RegExp {\n  const gYearRep =\n    \"-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${gYearRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_G_YEAR = constructMatchesXsGYear();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:gYear`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#gYear\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsGYear(text: string): boolean {\n  return REGEXP_MATCHES_XS_G_YEAR.test(text);\n}\n\nfunction constructMatchesXsGYearMonth(): RegExp {\n  const gYearMonthRep =\n    \"-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${gYearMonthRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_G_YEAR_MONTH = constructMatchesXsGYearMonth();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:gYearMonth`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#gYearMonth\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsGYearMonth(text: string): boolean {\n  return REGEXP_MATCHES_XS_G_YEAR_MONTH.test(text);\n}\n\nfunction constructMatchesXsHexBinary(): RegExp {\n  const hexBinary = \"([0-9a-fA-F]{2})*\";\n  const pattern = `^${hexBinary}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_HEX_BINARY = constructMatchesXsHexBinary();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:hexBinary`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#hexBinary\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsHexBinary(text: string): boolean {\n  return REGEXP_MATCHES_XS_HEX_BINARY.test(text);\n}\n\nfunction constructMatchesXsTime(): RegExp {\n  const timeRep =\n    \"(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\\\.[0-9]+)?|(24:00:00(\\\\.0+)?))(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?\";\n  const pattern = `^${timeRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_TIME = constructMatchesXsTime();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:time`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#time\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsTime(text: string): boolean {\n  return REGEXP_MATCHES_XS_TIME.test(text);\n}\n\nfunction constructMatchesXsInteger(): RegExp {\n  const integerRep = \"[-+]?[0-9]+\";\n  const pattern = `^${integerRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_INTEGER = constructMatchesXsInteger();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:integer`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#integer\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsInteger(text: string): boolean {\n  return REGEXP_MATCHES_XS_INTEGER.test(text);\n}\n\nfunction constructMatchesXsLong(): RegExp {\n  const longRep = \"[-+]?0*[0-9]{1,20}\";\n  const pattern = `^${longRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_LONG = constructMatchesXsLong();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:long`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#long\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsLong(text: string): boolean {\n  return REGEXP_MATCHES_XS_LONG.test(text);\n}\n\nfunction constructMatchesXsInt(): RegExp {\n  const intRep = \"[-+]?0*[0-9]{1,10}\";\n  const pattern = `^${intRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_INT = constructMatchesXsInt();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:int`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#int\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsInt(text: string): boolean {\n  return REGEXP_MATCHES_XS_INT.test(text);\n}\n\nfunction constructMatchesXsShort(): RegExp {\n  const shortRep = \"[-+]?0*[0-9]{1,5}\";\n  const pattern = `^${shortRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_SHORT = constructMatchesXsShort();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:short`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#short\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsShort(text: string): boolean {\n  return REGEXP_MATCHES_XS_SHORT.test(text);\n}\n\nfunction constructMatchesXsByte(): RegExp {\n  const byteRep = \"[-+]?0*[0-9]{1,3}\";\n  const pattern = `^${byteRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_BYTE = constructMatchesXsByte();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:byte`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#byte\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsByte(text: string): boolean {\n  return REGEXP_MATCHES_XS_BYTE.test(text);\n}\n\nfunction constructMatchesXsNonNegativeInteger(): RegExp {\n  const nonNegativeIntegerRep = \"(-0|\\\\+?[0-9]+)\";\n  const pattern = `^${nonNegativeIntegerRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER = constructMatchesXsNonNegativeInteger();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:nonNegativeInteger`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#nonNegativeInteger\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsNonNegativeInteger(text: string): boolean {\n  return REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER.test(text);\n}\n\nfunction constructMatchesXsPositiveInteger(): RegExp {\n  const positiveIntegerRep = \"\\\\+?0*[1-9][0-9]*\";\n  const pattern = `^${positiveIntegerRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_POSITIVE_INTEGER = constructMatchesXsPositiveInteger();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:positiveInteger`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#positiveInteger\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsPositiveInteger(text: string): boolean {\n  return REGEXP_MATCHES_XS_POSITIVE_INTEGER.test(text);\n}\n\nfunction constructMatchesXsUnsignedLong(): RegExp {\n  const unsignedLongRep = \"(-0|\\\\+?0*[0-9]{1,20})\";\n  const pattern = `^${unsignedLongRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_UNSIGNED_LONG = constructMatchesXsUnsignedLong();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:unsignedLong`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#unsignedLong\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsUnsignedLong(text: string): boolean {\n  return REGEXP_MATCHES_XS_UNSIGNED_LONG.test(text);\n}\n\nfunction constructMatchesXsUnsignedInt(): RegExp {\n  const unsignedIntRep = \"(-0|\\\\+?0*[0-9]{1,10})\";\n  const pattern = `^${unsignedIntRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_UNSIGNED_INT = constructMatchesXsUnsignedInt();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:unsignedInt`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#unsignedInt\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsUnsignedInt(text: string): boolean {\n  return REGEXP_MATCHES_XS_UNSIGNED_INT.test(text);\n}\n\nfunction constructMatchesXsUnsignedShort(): RegExp {\n  const unsignedShortRep = \"(-0|\\\\+?0*[0-9]{1,5})\";\n  const pattern = `^${unsignedShortRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_UNSIGNED_SHORT = constructMatchesXsUnsignedShort();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:unsignedShort`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#unsignedShort\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsUnsignedShort(text: string): boolean {\n  return REGEXP_MATCHES_XS_UNSIGNED_SHORT.test(text);\n}\n\nfunction constructMatchesXsUnsignedByte(): RegExp {\n  const unsignedByteRep = \"(-0|\\\\+?0*[0-9]{1,3})\";\n  const pattern = `^${unsignedByteRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_UNSIGNED_BYTE = constructMatchesXsUnsignedByte();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:unsignedByte`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#unsignedByte\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsUnsignedByte(text: string): boolean {\n  return REGEXP_MATCHES_XS_UNSIGNED_BYTE.test(text);\n}\n\nfunction constructMatchesXsNonPositiveInteger(): RegExp {\n  const nonPositiveIntegerRep = \"(\\\\+0|0|-[0-9]+)\";\n  const pattern = `^${nonPositiveIntegerRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER = constructMatchesXsNonPositiveInteger();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:nonPositiveInteger`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#nonPositiveInteger\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsNonPositiveInteger(text: string): boolean {\n  return REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER.test(text);\n}\n\nfunction constructMatchesXsNegativeInteger(): RegExp {\n  const negativeIntegerRep = \"(-0*[1-9][0-9]*)\";\n  const pattern = `^${negativeIntegerRep}$`;\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_NEGATIVE_INTEGER = constructMatchesXsNegativeInteger();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:negativeInteger`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#negativeInteger\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsNegativeInteger(text: string): boolean {\n  return REGEXP_MATCHES_XS_NEGATIVE_INTEGER.test(text);\n}\n\nfunction constructMatchesXsString(): RegExp {\n  const pattern =\n    \"^[\\\\u{9}\\\\u{a}\\\\u{d}\\\\u{20}-\\\\u{d7ff}\\\\u{e000}-\\\\u{fffd}\\\\u{10000}-\\\\u{10ffff}]*$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_MATCHES_XS_STRING = constructMatchesXsString();\n\n/**\n * Check that `text` conforms to the pattern of an `xs:string`.\n *\n * @remarks\n *\n * See: https://www.w3.org/TR/xmlschema-2/#string\n *\n * @param text - Text to be checked\n *\n * @returns True if the `text` conforms to the pattern\n */\nexport function matchesXsString(text: string): boolean {\n  return REGEXP_MATCHES_XS_STRING.test(text);\n}\n\n/**\n * Check if `year` is a leap year.\n *\n * @remarks\n * Year 1 BCE is the last leap BCE year.\n * See https://www.w3.org/TR/xmlschema-2/#dateTime.\n *\n * @param year - to be checked\n * @returns `true` if `year` is a leap year.\n */\nexport function isLeapYear(year: number): boolean {\n  // We consider the years B.C. to be one-off.\n  //\n  // See the note at: https://www.w3.org/TR/xmlschema-2///dateTime:\n  // \"'-0001' is the lexical representation of the year 1 Before Common Era\n  // (1 BCE, sometimes written \"1 BC\").\"\n  //\n  // Hence, -1 year in XML is 1 BCE, which is 0 year in astronomical years.\n  if (year < 0) {\n    year = -year - 1;\n  }\n\n  // See: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n  if (year % 4 > 0) {\n    return false;\n  }\n\n  if (year % 100 > 0) {\n    return true;\n  }\n\n  if (year % 400 > 0) {\n    return false;\n  }\n\n  return true;\n}\n\nconst DAYS_IN_MONTH = new Map<number, number>([\n  [1, 31],\n  // Please use isLeapYear if you need to check\n  // whether a concrete February has 28 or 29 days.\n  [2, 29],\n  [3, 31],\n  [4, 30],\n  [5, 31],\n  [6, 30],\n  [7, 31],\n  [8, 31],\n  [9, 30],\n  [10, 31],\n  [11, 30],\n  [12, 31]\n]);\n\nconst DATE_PREFIX_RE = new RegExp(\"^(-?[0-9]+)-([0-9]{2})-([0-9]{2})\");\n\n/**\n * Check that `value` is a valid `xs:date`.\n *\n * @remarks\n * Year 1 BCE is the last leap BCE year.\n * See https://www.w3.org/TR/xmlschema-2/#dateTime.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:date`\n */\nexport function isXsDate(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We can not use date functions from the standard library as it does not\n  // handle years BCE (*e.g.*, `-0003-01-02`).\n\n  if (!matchesXsDate(value)) {\n    return false;\n  }\n\n  // NOTE (mristin, 2022-11-23):\n  // We need to match the prefix as zone offsets are allowed in the dates. Optimally,\n  // we would re-use the pattern matching from `matchesXsDate`, but this\n  // would make the code generation and constraint inference for schemas much more\n  // difficult. Hence, we sacrifice the efficiency a bit for the clearer code & code\n  // generation.\n\n  const match = DATE_PREFIX_RE.exec(value);\n\n  const year = parseInt(match[1], 10);\n  const month = parseInt(match[2], 10);\n  const day = parseInt(match[3], 10);\n\n  // We do not accept year zero,\n  // see the note at: https://www.w3.org/TR/xmlschema-2/#dateTime\n  if (year === 0) {\n    return false;\n  }\n\n  if (day <= 0) {\n    return false;\n  }\n\n  if (month <= 0 || month >= 13) {\n    return false;\n  }\n\n  const maxDays = month === 2 ? (isLeapYear(year) ? 29 : 28) : DAYS_IN_MONTH.get(month);\n\n  if (day > maxDays) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Check that `value` is a valid `xs:double`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:double`\n */\nexport function isXsDouble(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We need to check explicitly for the regular expression since\n  // `parseFloat` expects `Infinity`  instead of `INF`.\n  if (!matchesXsDouble(value)) {\n    return false;\n  }\n\n  if (value !== \"INF\" && value !== \"-INF\" && value !== \"NaN\") {\n    // NOTE (mristin, 2022-11-23):\n    // Check that the value is not too big to be represented as a double-precision\n    // floating point number.\n    //\n    // For example, `parseFloat(\"1e400\")` gives `Infinity`.\n    const converted = parseFloat(value);\n\n    if (!isFinite(converted)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that `value` is a valid `xs:float`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:float`\n */\nexport function isXsFloat(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We need to check explicitly for the regular expression since\n  // `parseFloat` expects `Infinity`  instead of `INF`.\n  if (!matchesXsFloat(value)) {\n    return false;\n  }\n\n  if (value !== \"INF\" && value !== \"-INF\" && value !== \"NaN\") {\n    // NOTE (mristin, 2022-11-23):\n    // Check that the value is not too big to be represented as a double-precision\n    // floating point number.\n    //\n    // For example, `parseFloat(\"1e400\")` gives `Infinity`.\n    const converted = parseFloat(value);\n\n    if (!isFinite(converted)) {\n      return false;\n    }\n\n    // NOTE (mristin, 2022-11-23):\n    // TypeScript represents numbers as 64-bit floating point numbers. While there\n    // is no easy way to deal with the precision, as precision is silently\n    // gutted during the parsing, we can still check if the number is too large\n    // to fit in a 32-bit float.\n    const rounded = Math.fround(converted);\n    if (!isFinite(rounded)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that `value` is a valid `xs:gMonthDay`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:gMonthDay`\n */\nexport function isXsGMonthDay(value: string): boolean {\n  if (!matchesXsGMonthDay(value)) {\n    return false;\n  }\n\n  const month = parseInt(value.substring(2, 4), 10);\n  const day = parseInt(value.substring(5, 7), 10);\n\n  const maxDays = DAYS_IN_MONTH.get(month);\n  return day <= maxDays;\n}\n\nconst LONG_RE = new RegExp(\"^([-+])?0*([0-9]{1,20})$\");\n\nconst SMALLEST_LONG_WITHOUT_SIGN_AS_STRING = \"9223372036854775808\";\nconst LARGEST_LONG_AS_STRING = \"9223372036854775807\";\n\n/**\n * Check that `value` is a valid `xs:long`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:long`\n */\nexport function isXsLong(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We need to operate on the value as string since TypeScript represents numbers as\n  // 64-bit floating-point numbers which can not capture 64-bit integers.\n\n  const match = value.match(LONG_RE);\n  if (!match) {\n    return false;\n  }\n\n  const numberPart = match[2];\n\n  const limit =\n    match[1] === \"-\" ? SMALLEST_LONG_WITHOUT_SIGN_AS_STRING : LARGEST_LONG_AS_STRING;\n\n  if (numberPart.length < limit.length) {\n    return true;\n  }\n\n  if (numberPart.length > limit.length) {\n    return false;\n  }\n\n  for (let i = numberPart.length - 1; i >= 0; i--) {\n    const thisDigit = numberPart.charCodeAt(i);\n    const limitDigit = limit.charCodeAt(i);\n\n    if (thisDigit > limitDigit) {\n      return false;\n    } else if (thisDigit < limitDigit) {\n      return true;\n    } else {\n      // Pass, we have to compare against the next digit from the left.\n    }\n  }\n\n  // The number is exactly the limit.\n  return true;\n}\n\n/**\n * Check that `value` is a valid `xs:int`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:int`\n */\nexport function isXsInt(value: string): boolean {\n  if (!matchesXsInt(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return -2147483648 <= converted && converted <= 2147483647;\n}\n\n/**\n * Check that `value` is a valid `xs:short`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:short`\n */\nexport function isXsShort(value: string): boolean {\n  if (!matchesXsShort(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return -32768 <= converted && converted <= 32767;\n}\n\n/**\n * Check that `value` is a valid `xs:byte`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:byte`\n */\nexport function isXsByte(value: string): boolean {\n  if (!matchesXsByte(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return -128 <= converted && converted <= 127;\n}\n\nconst UNSIGNED_LONG_RE = new RegExp(\"^(-0|\\\\+?0*([0-9]{1,20}))$\");\n\nconst LARGEST_UNSIGNED_LONG_AS_STRING = \"18446744073709551615\";\n\n/**\n * Check that `value` is a valid `xs:unsignedLong`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:unsignedLong`\n */\nexport function isXsUnsignedLong(value: string): boolean {\n  // NOTE (mristin, 2022-11-23):\n  // We need to operate on the value as string since TypeScript represents numbers as\n  // 64-bit floating-point numbers which can not capture 64-bit integers.\n\n  const match = value.match(UNSIGNED_LONG_RE);\n  if (!match) {\n    return false;\n  }\n\n  const numberPart = match[2];\n\n  if (numberPart.length < LARGEST_UNSIGNED_LONG_AS_STRING.length) {\n    return true;\n  }\n\n  if (numberPart.length > LARGEST_UNSIGNED_LONG_AS_STRING.length) {\n    return false;\n  }\n\n  for (let i = numberPart.length - 1; i >= 0; i--) {\n    const thisDigit = numberPart.charCodeAt(i);\n    const limitDigit = LARGEST_UNSIGNED_LONG_AS_STRING.charCodeAt(i);\n\n    if (thisDigit > limitDigit) {\n      return false;\n    } else if (thisDigit < limitDigit) {\n      return true;\n    } else {\n      // Pass, we have to compare against the next digit from the left.\n    }\n  }\n\n  // The number is exactly the limit.\n  return true;\n}\n\n/**\n * Check that `value` is a valid `xs:unsignedInt`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:unsignedInt`\n */\nexport function isXsUnsignedInt(value: string): boolean {\n  if (!matchesXsUnsignedInt(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return 0 <= converted && converted <= 4294967295;\n}\n\n/**\n * Check that `value` is a valid `xs:unsignedShort`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:unsignedShort`\n */\nexport function isXsUnsignedShort(value: string): boolean {\n  if (!matchesXsUnsignedShort(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return 0 <= converted && converted <= 65535;\n}\n\n/**\n * Check that `value` is a valid `xs:unsignedByte`.\n *\n * @param value - to be be checked\n * @returns `true` if `value` is a valid `xs:unsignedByte`\n */\nexport function isXsUnsignedByte(value: string): boolean {\n  if (!matchesXsUnsignedByte(value)) {\n    return false;\n  }\n\n  const converted = parseInt(value, 10);\n  return 0 <= converted && converted <= 255;\n}\n\nconst DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY = new Map<\n  AasTypes.DataTypeDefXsd,\n  (string) => boolean\n>([\n  [AasTypes.DataTypeDefXsd.AnyUri, matchesXsAnyUri],\n  [AasTypes.DataTypeDefXsd.Base64Binary, matchesXsBase64Binary],\n  [AasTypes.DataTypeDefXsd.Boolean, matchesXsBoolean],\n  [AasTypes.DataTypeDefXsd.Byte, isXsByte],\n  [AasTypes.DataTypeDefXsd.Date, isXsDate],\n  [AasTypes.DataTypeDefXsd.DateTime, isXsDateTime],\n  [AasTypes.DataTypeDefXsd.Decimal, matchesXsDecimal],\n  [AasTypes.DataTypeDefXsd.Double, isXsDouble],\n  [AasTypes.DataTypeDefXsd.Duration, matchesXsDuration],\n  [AasTypes.DataTypeDefXsd.Float, isXsFloat],\n  [AasTypes.DataTypeDefXsd.GDay, matchesXsGDay],\n  [AasTypes.DataTypeDefXsd.GMonth, matchesXsGMonth],\n  [AasTypes.DataTypeDefXsd.GMonthDay, isXsGMonthDay],\n  [AasTypes.DataTypeDefXsd.GYear, matchesXsGYear],\n  [AasTypes.DataTypeDefXsd.GYearMonth, matchesXsGYearMonth],\n  [AasTypes.DataTypeDefXsd.HexBinary, matchesXsHexBinary],\n  [AasTypes.DataTypeDefXsd.Int, isXsInt],\n  [AasTypes.DataTypeDefXsd.Integer, matchesXsInteger],\n  [AasTypes.DataTypeDefXsd.Long, isXsLong],\n  [AasTypes.DataTypeDefXsd.NegativeInteger, matchesXsNegativeInteger],\n  [AasTypes.DataTypeDefXsd.NonNegativeInteger, matchesXsNonNegativeInteger],\n  [AasTypes.DataTypeDefXsd.NonPositiveInteger, matchesXsNonPositiveInteger],\n  [AasTypes.DataTypeDefXsd.PositiveInteger, matchesXsPositiveInteger],\n  [AasTypes.DataTypeDefXsd.Short, isXsShort],\n  [AasTypes.DataTypeDefXsd.String, matchesXsString],\n  [AasTypes.DataTypeDefXsd.Time, matchesXsTime],\n  [AasTypes.DataTypeDefXsd.UnsignedByte, isXsUnsignedByte],\n  [AasTypes.DataTypeDefXsd.UnsignedInt, isXsUnsignedInt],\n  [AasTypes.DataTypeDefXsd.UnsignedLong, isXsUnsignedLong],\n  [AasTypes.DataTypeDefXsd.UnsignedShort, isXsUnsignedShort]\n]);\n\nfunction assertAllDataTypeDefXsdCovered() {\n  for (const literal of AasTypes.overDataTypeDefXsd()) {\n    if (!DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.has(literal)) {\n      throw new Error(\n        `The enumeration key ${literal} of AasTypes.DataTypeDefXsd ` +\n          \"is not covered in DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY\"\n      );\n    }\n  }\n}\nassertAllDataTypeDefXsdCovered();\n\n/**\n * Check that `value` is consistent with the given `valueType`.\n *\n * @param value - expected to be consistent with `valueType`\n * @param valueType - expected XSD type of `value`\n * @returns `true` if `value` consistent with `valueType`\n */\nexport function valueConsistentWithXsdType(\n  value: string,\n  valueType: AasTypes.DataTypeDefXsd\n): boolean {\n  const verifier = DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.get(valueType);\n  if (verifier === undefined) {\n    throw new Error(\n      \"The value type is invalid. Expected a literal of DataTypeDefXsd, \" +\n        `but got: ${valueType}`\n    );\n  }\n  return verifier(value);\n}\n\n/**\n * Check that the target of the model reference matches the `expectedType`.\n */\nexport function isModelReferenceTo(\n  reference: AasTypes.Reference,\n  expectedType: AasTypes.KeyTypes\n): boolean {\n  return (\n    reference.type == AasTypes.ReferenceTypes.ModelReference &&\n    reference.keys.length != 0 &&\n    AasCommon.at(reference.keys, -1).type == expectedType\n  );\n}\n\n/**\n * Check that the target of the reference matches a {@link constants!AAS_REFERABLES}.\n */\nexport function isModelReferenceToReferable(reference: AasTypes.Reference): boolean {\n  return (\n    reference.type == AasTypes.ReferenceTypes.ModelReference &&\n    reference.keys.length != 0 &&\n    AasConstants.AAS_REFERABLES.has(AasCommon.at(reference.keys, -1).type)\n  );\n}\n\n/**\n * Check that all {@link types.IReferable.idShort}'s are unique\n * among `referables`.\n *\n * @param referables - to be verified\n * @returns `true` if the check passes\n */\nexport function idShortsAreUnique(referables: Iterable<AasTypes.IReferable>): boolean {\n  const idShortSet = new Set<string>();\n  for (const referable of referables) {\n    if (idShortSet.has(referable.idShort)) {\n      return false;\n    }\n\n    idShortSet.add(referable.idShort);\n  }\n\n  return true;\n}\n\n/**\n * Check that all {@link types.IReferable.idShort}'s are unique\n * among values of `inputVariables`, `outputVariables`\n * and `inoutputVariables`.\n *\n * @param inputVariables - to be verified\n * @param outputVariables - to be verified\n * @param inoutputVariables - to be verified\n * @returns `true` if the check passes\n */\nexport function idShortsOfVariablesAreUnique(\n  inputVariables: Iterable<AasTypes.OperationVariable> | null,\n  outputVariables: Iterable<AasTypes.OperationVariable> | null,\n  inoutputVariables: Iterable<AasTypes.OperationVariable> | null\n): boolean {\n  const idShortSet = new Set<string>();\n\n  if (inputVariables !== null) {\n    for (const variable of inputVariables) {\n      if (variable.value.idShort !== null) {\n        if (idShortSet.has(variable.value.idShort)) {\n          return false;\n        }\n\n        idShortSet.add(variable.value.idShort);\n      }\n    }\n  }\n\n  if (outputVariables !== null) {\n    for (const variable of outputVariables) {\n      if (variable.value.idShort !== null) {\n        if (idShortSet.has(variable.value.idShort)) {\n          return false;\n        }\n\n        idShortSet.add(variable.value.idShort);\n      }\n    }\n  }\n\n  if (inoutputVariables !== null) {\n    for (const variable of inoutputVariables) {\n      if (variable.value.idShort !== null) {\n        if (idShortSet.has(variable.value.idShort)) {\n          return false;\n        }\n\n        idShortSet.add(variable.value.idShort);\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that all {@link types.Extension.name} are unique\n * among `extensions`.\n *\n * @param extensions - to be verified\n * @returns `true` if the check passes\n */\nexport function extensionNamesAreUnique(\n  extensions: Iterable<AasTypes.Extension>\n): boolean {\n  const nameSet = new Set<string>();\n  for (const extension of extensions) {\n    if (nameSet.has(extension.name)) {\n      return false;\n    }\n\n    nameSet.add(extension.name);\n  }\n\n  return true;\n}\n\n/**\n * Check that all `elements` have the identical\n * {@link types.ISubmodelElement.semanticId}.\n *\n * @param elements - to be checked\n * @returns `true` if all the semantic IDs are identical\n */\nexport function submodelElementsHaveIdenticalSemanticIds(\n  elements: Iterable<AasTypes.ISubmodelElement>\n): boolean {\n  let thatSemanticId: AasTypes.Reference | null = null;\n  for (const element of elements) {\n    if (element.semanticId === null) {\n      continue;\n    }\n\n    if (thatSemanticId === null) {\n      thatSemanticId = element.semanticId;\n      continue;\n    }\n\n    const thisSemanticId = element.semanticId;\n\n    if (thisSemanticId.keys.length != thatSemanticId.keys.length) {\n      return false;\n    }\n\n    for (let i = 0; i < thatSemanticId.keys.length; i++) {\n      if (thisSemanticId.keys[i].value !== thatSemanticId.keys[i].value) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nconst AAS_SUBMODEL_ELEMENTS_TO_IS = new Map<\n  AasTypes.AasSubmodelElements,\n  (that: AasTypes.Class) => boolean\n>([\n  [\n    AasTypes.AasSubmodelElements.AnnotatedRelationshipElement,\n    AasTypes.isAnnotatedRelationshipElement\n  ],\n  [AasTypes.AasSubmodelElements.BasicEventElement, AasTypes.isBasicEventElement],\n  [AasTypes.AasSubmodelElements.Blob, AasTypes.isBlob],\n  [AasTypes.AasSubmodelElements.Capability, AasTypes.isCapability],\n  [AasTypes.AasSubmodelElements.DataElement, AasTypes.isDataElement],\n  [AasTypes.AasSubmodelElements.Entity, AasTypes.isEntity],\n  [AasTypes.AasSubmodelElements.EventElement, AasTypes.isEventElement],\n  [AasTypes.AasSubmodelElements.File, AasTypes.isFile],\n  [\n    AasTypes.AasSubmodelElements.MultiLanguageProperty,\n    AasTypes.isMultiLanguageProperty\n  ],\n  [AasTypes.AasSubmodelElements.Operation, AasTypes.isOperation],\n  [AasTypes.AasSubmodelElements.Property, AasTypes.isProperty],\n  [AasTypes.AasSubmodelElements.Range, AasTypes.isRange],\n  [AasTypes.AasSubmodelElements.ReferenceElement, AasTypes.isReferenceElement],\n  [AasTypes.AasSubmodelElements.RelationshipElement, AasTypes.isRelationshipElement],\n  [AasTypes.AasSubmodelElements.SubmodelElement, AasTypes.isSubmodelElement],\n  [AasTypes.AasSubmodelElements.SubmodelElementList, AasTypes.isSubmodelElementList],\n  [\n    AasTypes.AasSubmodelElements.SubmodelElementCollection,\n    AasTypes.isSubmodelElementCollection\n  ]\n]);\n\nfunction assertAllTypesCoveredInAasSubmodelElementsToIs() {\n  for (const literal of AasTypes.overAasSubmodelElements()) {\n    if (!AAS_SUBMODEL_ELEMENTS_TO_IS.has(literal)) {\n      throw new Error(\n        `The enumeration literal ${literal} of AasTypes.AasSubmodelElements ` +\n          \"is not covered in AAS_SUBMODEL_ELEMENTS_TO_IS\"\n      );\n    }\n  }\n}\nassertAllTypesCoveredInAasSubmodelElementsToIs();\n\n/**\n * Check that `element` is an instance of class corresponding to\n * `expectedType`.\n *\n * @param element - to be checked for type\n * @param expectedType - in the check\n * @returns `true` if `element` corresponds to `expectedType`\n */\nexport function submodelElementIsOfType(\n  element: AasTypes.ISubmodelElement,\n  expectedType: AasTypes.AasSubmodelElements\n): boolean {\n  const isFunc = AAS_SUBMODEL_ELEMENTS_TO_IS.get(expectedType);\n  return isFunc(element);\n}\n\n/**\n * Check that `elements` which are {@link types.Property} or {@link types.Range}\n * have the given `valueType`.\n *\n * @param elements - to be verified\n * @returns `true` if the check passes\n */\nexport function propertiesOrRangesHaveValueType(\n  elements: Iterable<AasTypes.ISubmodelElement>,\n  valueType: AasTypes.DataTypeDefXsd\n): boolean {\n  for (const element of elements) {\n    if (AasTypes.isProperty(element) || AasTypes.isRange(element)) {\n      if (element.valueType !== valueType) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that the two references, `that` and `other`,\n * are equal by comparing their {@link types.Reference.keys}\n * by {@link types.Key.value}'s.\n *\n * @param that - reference to be compared\n * @param other - to be compared against\n * @returns `true` if the key values are are equal\n */\nexport function referenceKeyValuesEqual(\n  that: AasTypes.Reference,\n  other: AasTypes.Reference\n): boolean {\n  if (that.keys.length != other.keys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < that.keys.length; i++) {\n    if (that.keys[i].value !== other.keys[i].value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.dataType}\n * is defined appropriately for all data specifications whose content is given\n * as IEC 61360.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (\n        content.dataType === null ||\n        !AasConstants.DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE.has(content.dataType)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.dataType}\n * is defined appropriately for all data specifications whose content is given as\n * IEC 61360.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sForReferenceHaveAppropriateDataType(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (\n        content.dataType === null ||\n        !AasConstants.DATA_TYPE_IEC_61360_FOR_REFERENCE.has(content.dataType)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.dataType}\n * is defined appropriately for all data specifications whose content is given as\n * IEC 61360.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sForDocumentHaveAppropriateDataType(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (\n        content.dataType === null ||\n        !AasConstants.DATA_TYPE_IEC_61360_FOR_DOCUMENT.has(content.dataType)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.dataType}\n * is defined for all data specifications whose content is given as\n * IEC 61360.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sHaveDataType(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (content.dataType === null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.value}\n * is defined for all data specifications whose content is given as\n * IEC 61360.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sHaveValue(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (content.value === null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check that {@link types.DataSpecificationIec61360.definition}\n * is defined for all data specifications whose content is given as\n * IEC 61360 at least in English.\n *\n * @param embeddedDataSpecifications - to be verified\n * @returns `true` if the check passes\n */\nexport function dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(\n  embeddedDataSpecifications: Iterable<AasTypes.EmbeddedDataSpecification>\n): boolean {\n  for (const embeddedDataSpecification of embeddedDataSpecifications) {\n    const content = embeddedDataSpecification.dataSpecificationContent;\n    if (AasTypes.isDataSpecificationIec61360(content)) {\n      if (content.definition === null) {\n        return false;\n      }\n\n      let noDefinitionInEnglish = true;\n      for (const langString of content.definition) {\n        if (isBcp47ForEnglish(langString.language)) {\n          noDefinitionInEnglish = false;\n          break;\n        }\n      }\n\n      if (noDefinitionInEnglish === true) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction constructIsBcp47ForEnglish(): RegExp {\n  const pattern = \"^(en|EN)(-.*)?$\";\n\n  return new RegExp(pattern, \"u\");\n}\n\nconst REGEXP_IS_BCP_47_FOR_ENGLISH = constructIsBcp47ForEnglish();\n\n/**\n * Check that the `text` corresponds to a BCP47 code for english.\n */\nexport function isBcp47ForEnglish(text: string): boolean {\n  return REGEXP_IS_BCP_47_FOR_ENGLISH.test(text);\n}\n\n/**\n * Verify an instance of the model recursively or non-recursively (depending on the context).\n */\nclass Verifier extends AasTypes.AbstractTransformerWithContext<\n  boolean,\n  IterableIterator<VerificationError>\n> {\n  *transformExtensionWithContext(\n    that: AasTypes.Extension,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.refersTo !== null) || that.refersTo.length >= 1)) {\n      yield new VerificationError(\n        \"Refers-to must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) ||\n        valueConsistentWithXsdType(that.value, that.valueTypeOrDefault())\n      )\n    ) {\n      yield new VerificationError(\"The value must match the value type.\");\n    }\n\n    for (const error of verifyNameType(that.name)) {\n      error.path.prepend(new PropertySegment(that, \"name\"));\n      yield error;\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyValueDataType(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.refersTo !== null) {\n        let refersToIndex = 0;\n        for (const item of that.refersTo) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.refersTo, refersToIndex));\n            error.path.prepend(new PropertySegment(that, \"refersTo\"));\n            yield error;\n          }\n          refersToIndex++;\n        }\n      }\n    }\n  }\n\n  *transformAdministrativeInformationWithContext(\n    that: AasTypes.AdministrativeInformation,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.revision !== null) || that.version !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-005: If version is not specified then also \" +\n          \"revision shall be unspecified. This means, a revision \" +\n          \"requires a version. If there is no version there is no \" +\n          \"revision either. Revision is optional.\"\n      );\n    }\n\n    if (that.version !== null) {\n      for (const error of verifyVersionType(that.version)) {\n        error.path.prepend(new PropertySegment(that, \"version\"));\n        yield error;\n      }\n    }\n\n    if (that.revision !== null) {\n      for (const error of verifyRevisionType(that.revision)) {\n        error.path.prepend(new PropertySegment(that, \"revision\"));\n        yield error;\n      }\n    }\n\n    if (that.templateId !== null) {\n      for (const error of verifyIdentifier(that.templateId)) {\n        error.path.prepend(new PropertySegment(that, \"templateId\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.creator !== null) {\n        for (const error of this.transformWithContext(that.creator, context)) {\n          error.path.prepend(new PropertySegment(that, \"creator\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformQualifierWithContext(\n    that: AasTypes.Qualifier,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-020: The value shall be consistent to \" +\n          \"the data type as defined in value type.\"\n      );\n    }\n\n    for (const error of verifyQualifierType(that.type)) {\n      error.path.prepend(new PropertySegment(that, \"type\"));\n      yield error;\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyValueDataType(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.valueId !== null) {\n        for (const error of this.transformWithContext(that.valueId, context)) {\n          error.path.prepend(new PropertySegment(that, \"valueId\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformAssetAdministrationShellWithContext(\n    that: AasTypes.AssetAdministrationShell,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.submodels !== null) || that.submodels.length >= 1)) {\n      yield new VerificationError(\n        \"Submodels must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.derivedFrom !== null) ||\n        isModelReferenceTo(that.derivedFrom, AasTypes.KeyTypes.AssetAdministrationShell)\n      )\n    ) {\n      yield new VerificationError(\n        \"Derived-from must be a model reference to an asset \" + \"administration shell.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.submodels !== null) ||\n        AasCommon.every(\n          AasCommon.map(that.submodels, (reference) =>\n            isModelReferenceTo(reference, AasTypes.KeyTypes.Submodel)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"All submodels must be model references to a submodel.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyIdentifier(that.id)) {\n      error.path.prepend(new PropertySegment(that, \"id\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.administration !== null) {\n        for (const error of this.transformWithContext(that.administration, context)) {\n          error.path.prepend(new PropertySegment(that, \"administration\"));\n          yield error;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.derivedFrom !== null) {\n        for (const error of this.transformWithContext(that.derivedFrom, context)) {\n          error.path.prepend(new PropertySegment(that, \"derivedFrom\"));\n          yield error;\n        }\n      }\n\n      for (const error of this.transformWithContext(that.assetInformation, context)) {\n        error.path.prepend(new PropertySegment(that, \"assetInformation\"));\n        yield error;\n      }\n\n      if (that.submodels !== null) {\n        let submodelsIndex = 0;\n        for (const item of that.submodels) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.submodels, submodelsIndex));\n            error.path.prepend(new PropertySegment(that, \"submodels\"));\n            yield error;\n          }\n          submodelsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformAssetInformationWithContext(\n    that: AasTypes.AssetInformation,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        !(that.specificAssetIds !== null) ||\n        AasCommon.every(\n          AasCommon.map(\n            that.specificAssetIds,\n            (specificAssetId) =>\n              specificAssetId.name != \"globalAssetId\" ||\n              (that.globalAssetId !== null &&\n                specificAssetId.name == \"globalAssetId\" &&\n                specificAssetId.value == that.globalAssetId)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-116: ``globalAssetId`` is a reserved key. \" +\n          \"If used as value for the name of specific asset ID then \" +\n          \"the value of specific asset ID shall be identical to \" +\n          \"the global asset ID.\"\n      );\n    }\n\n    if (\n      !(\n        (that.globalAssetId !== null || that.specificAssetIds !== null) &&\n        (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-131: Either the global asset ID shall be \" +\n          \"defined or at least one specific asset ID.\"\n      );\n    }\n\n    if (!(!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1)) {\n      yield new VerificationError(\n        \"Specific asset IDs must be either not set or have at least \" + \"one item.\"\n      );\n    }\n\n    if (that.globalAssetId !== null) {\n      for (const error of verifyIdentifier(that.globalAssetId)) {\n        error.path.prepend(new PropertySegment(that, \"globalAssetId\"));\n        yield error;\n      }\n    }\n\n    if (that.assetType !== null) {\n      for (const error of verifyIdentifier(that.assetType)) {\n        error.path.prepend(new PropertySegment(that, \"assetType\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.specificAssetIds !== null) {\n        let specificAssetIdsIndex = 0;\n        for (const item of that.specificAssetIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.specificAssetIds, specificAssetIdsIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"specificAssetIds\"));\n            yield error;\n          }\n          specificAssetIdsIndex++;\n        }\n      }\n\n      if (that.defaultThumbnail !== null) {\n        for (const error of this.transformWithContext(that.defaultThumbnail, context)) {\n          error.path.prepend(new PropertySegment(that, \"defaultThumbnail\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformResourceWithContext(\n    that: AasTypes.Resource,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    for (const error of verifyPathType(that.path)) {\n      error.path.prepend(new PropertySegment(that, \"path\"));\n      yield error;\n    }\n\n    if (that.contentType !== null) {\n      for (const error of verifyContentType(that.contentType)) {\n        error.path.prepend(new PropertySegment(that, \"contentType\"));\n        yield error;\n      }\n    }\n  }\n\n  *transformSpecificAssetIdWithContext(\n    that: AasTypes.SpecificAssetId,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.externalSubjectId !== null) ||\n        that.externalSubjectId.type == AasTypes.ReferenceTypes.ExternalReference\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-133: External subject ID shall be \" + \"an external reference.\"\n      );\n    }\n\n    for (const error of verifyLabelType(that.name)) {\n      error.path.prepend(new PropertySegment(that, \"name\"));\n      yield error;\n    }\n\n    for (const error of verifyIdentifier(that.value)) {\n      error.path.prepend(new PropertySegment(that, \"value\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.externalSubjectId !== null) {\n        for (const error of this.transformWithContext(\n          that.externalSubjectId,\n          context\n        )) {\n          error.path.prepend(new PropertySegment(that, \"externalSubjectId\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformSubmodelWithContext(\n    that: AasTypes.Submodel,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.submodelElements !== null) || that.submodelElements.length >= 1)) {\n      yield new VerificationError(\n        \"Submodel elements must be either not set or have at least \" + \"one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.submodelElements !== null) ||\n        AasCommon.every(\n          AasCommon.map(that.submodelElements, (item) => item.idShort !== null)\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"ID-shorts need to be defined for all the items of submodel \" +\n          \"elements according to AASd-117 (ID-short of Referables not \" +\n          \"being a direct child of a Submodel element list shall be \" +\n          \"specified).\"\n      );\n    }\n\n    if (\n      !(!(that.submodelElements !== null) || idShortsAreUnique(that.submodelElements))\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-022: ID-short of non-identifiable \" +\n          \"referables within the same name space shall be unique \" +\n          \"(case-sensitive).\"\n      );\n    }\n\n    if (\n      !(\n        !(that.submodelElements !== null) ||\n        !(that.kindOrDefault() != AasTypes.ModellingKind.Template) ||\n        AasCommon.every(\n          AasCommon.map(\n            that.submodelElements,\n            (submodelElement) =>\n              !(submodelElement.qualifiers !== null) ||\n              AasCommon.every(\n                AasCommon.map(\n                  submodelElement.qualifiers,\n                  (qualifier) =>\n                    qualifier.kindOrDefault() !=\n                    AasTypes.QualifierKind.TemplateQualifier\n                )\n              )\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-129: If any qualifier kind value of \" +\n          \"a Submodel element qualifier (attribute qualifier inherited \" +\n          \"via Qualifiable) is equal to Template Qualifier then \" +\n          \"the submodel element shall be part of a submodel template, \" +\n          \"i.e. a Submodel with submodel kind (attribute kind \" +\n          \"inherited via Has-Kind) value is equal to Template.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.qualifiers !== null) ||\n        !AasCommon.some(\n          AasCommon.map(\n            that.qualifiers,\n            (qualifier) =>\n              qualifier.kindOrDefault() == AasTypes.QualifierKind.TemplateQualifier\n          )\n        ) ||\n        that.kindOrDefault() == AasTypes.ModellingKind.Template\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-119: If any qualifier kind value of \" +\n          \"a qualifiable qualifier is equal to template qualifier and \" +\n          \"the qualified element has kind then the qualified element \" +\n          \"shall be of kind template.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyIdentifier(that.id)) {\n      error.path.prepend(new PropertySegment(that, \"id\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.administration !== null) {\n        for (const error of this.transformWithContext(that.administration, context)) {\n          error.path.prepend(new PropertySegment(that, \"administration\"));\n          yield error;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.submodelElements !== null) {\n        let submodelElementsIndex = 0;\n        for (const item of that.submodelElements) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.submodelElements, submodelElementsIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"submodelElements\"));\n            yield error;\n          }\n          submodelElementsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformRelationshipElementWithContext(\n    that: AasTypes.RelationshipElement,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      for (const error of this.transformWithContext(that.first, context)) {\n        error.path.prepend(new PropertySegment(that, \"first\"));\n        yield error;\n      }\n\n      for (const error of this.transformWithContext(that.second, context)) {\n        error.path.prepend(new PropertySegment(that, \"second\"));\n        yield error;\n      }\n    }\n  }\n\n  *transformSubmodelElementListWithContext(\n    that: AasTypes.SubmodelElementList,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.value !== null) || that.value.length >= 1)) {\n      yield new VerificationError(\n        \"Value must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null && that.semanticIdListElement !== null) ||\n        AasCommon.every(\n          AasCommon.map(\n            that.value,\n            (child) =>\n              !(child.semanticId !== null) ||\n              referenceKeyValuesEqual(child.semanticId, that.semanticIdListElement)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-107: If a first level child element has \" +\n          \"a semantic ID it shall be identical to semantic ID list \" +\n          \"element.\"\n      );\n    }\n\n    if (\n      !(!(that.value !== null) || submodelElementsHaveIdenticalSemanticIds(that.value))\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-114: If two first level child elements have \" +\n          \"a semantic ID then they shall be identical.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) ||\n        AasCommon.every(\n          AasCommon.map(that.value, (element) =>\n            submodelElementIsOfType(element, that.typeValueListElement)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-108: All first level child elements shall \" +\n          \"have the same submodel element type as specified in type \" +\n          \"value list element.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.value !== null &&\n          (that.typeValueListElement == AasTypes.AasSubmodelElements.Property ||\n            that.typeValueListElement == AasTypes.AasSubmodelElements.Range)\n        ) ||\n        (that.valueTypeListElement !== null &&\n          propertiesOrRangesHaveValueType(that.value, that.valueTypeListElement))\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-109: If type value list element is equal to \" +\n          \"Property or Range value type list element shall be set and \" +\n          \"all first level child elements shall have the value type as \" +\n          \"specified in value type list element.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) ||\n        AasCommon.every(\n          AasCommon.map(that.value, (element) => element.idShort === null)\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-120: ID-short of submodel elements being \" +\n          \"a direct child of a  Submodel element list shall not be \" +\n          \"specified.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.semanticIdListElement !== null) {\n        for (const error of this.transformWithContext(\n          that.semanticIdListElement,\n          context\n        )) {\n          error.path.prepend(new PropertySegment(that, \"semanticIdListElement\"));\n          yield error;\n        }\n      }\n\n      if (that.value !== null) {\n        let valueIndex = 0;\n        for (const item of that.value) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.value, valueIndex));\n            error.path.prepend(new PropertySegment(that, \"value\"));\n            yield error;\n          }\n          valueIndex++;\n        }\n      }\n    }\n  }\n\n  *transformSubmodelElementCollectionWithContext(\n    that: AasTypes.SubmodelElementCollection,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.value !== null) || that.value.length >= 1)) {\n      yield new VerificationError(\n        \"Value must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) ||\n        AasCommon.every(AasCommon.map(that.value, (item) => item.idShort !== null))\n      )\n    ) {\n      yield new VerificationError(\n        \"ID-shorts need to be defined for all the items of value \" +\n          \"according to AASd-117 (ID-short of Referables not being \" +\n          \"a direct child of a Submodel element list shall be \" +\n          \"specified).\"\n      );\n    }\n\n    if (!(!(that.value !== null) || idShortsAreUnique(that.value))) {\n      yield new VerificationError(\"ID-shorts of the value must be unique.\");\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.value !== null) {\n        let valueIndex = 0;\n        for (const item of that.value) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.value, valueIndex));\n            error.path.prepend(new PropertySegment(that, \"value\"));\n            yield error;\n          }\n          valueIndex++;\n        }\n      }\n    }\n  }\n\n  *transformPropertyWithContext(\n    that: AasTypes.Property,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)\n      )\n    ) {\n      yield new VerificationError(\"Value must be consistent with the value type.\");\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyValueDataType(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.valueId !== null) {\n        for (const error of this.transformWithContext(that.valueId, context)) {\n          error.path.prepend(new PropertySegment(that, \"valueId\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformMultiLanguagePropertyWithContext(\n    that: AasTypes.MultiLanguageProperty,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (!(!(that.value !== null) || langStringsHaveUniqueLanguages(that.value))) {\n      yield new VerificationError(\"Value must specify unique languages.\");\n    }\n\n    if (!(!(that.value !== null) || that.value.length >= 1)) {\n      yield new VerificationError(\n        \"Value must be either not set or have at least one item.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.value !== null) {\n        let valueIndex = 0;\n        for (const item of that.value) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.value, valueIndex));\n            error.path.prepend(new PropertySegment(that, \"value\"));\n            yield error;\n          }\n          valueIndex++;\n        }\n      }\n\n      if (that.valueId !== null) {\n        for (const error of this.transformWithContext(that.valueId, context)) {\n          error.path.prepend(new PropertySegment(that, \"valueId\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformRangeWithContext(\n    that: AasTypes.Range,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (\n      !(!(that.max !== null) || valueConsistentWithXsdType(that.max, that.valueType))\n    ) {\n      yield new VerificationError(\"Max must be consistent with the value type.\");\n    }\n\n    if (\n      !(!(that.min !== null) || valueConsistentWithXsdType(that.min, that.valueType))\n    ) {\n      yield new VerificationError(\"Min must be consistent with the value type.\");\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.min !== null) {\n      for (const error of verifyValueDataType(that.min)) {\n        error.path.prepend(new PropertySegment(that, \"min\"));\n        yield error;\n      }\n    }\n\n    if (that.max !== null) {\n      for (const error of verifyValueDataType(that.max)) {\n        error.path.prepend(new PropertySegment(that, \"max\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformReferenceElementWithContext(\n    that: AasTypes.ReferenceElement,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.value !== null) {\n        for (const error of this.transformWithContext(that.value, context)) {\n          error.path.prepend(new PropertySegment(that, \"value\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformBlobWithContext(\n    that: AasTypes.Blob,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyBlobType(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyContentType(that.contentType)) {\n      error.path.prepend(new PropertySegment(that, \"contentType\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformFileWithContext(\n    that: AasTypes.File,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.category !== null) ||\n        AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-090: For data elements category shall be \" +\n          \"one of the following values: CONSTANT, PARAMETER or \" +\n          \"VARIABLE.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyPathType(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyContentType(that.contentType)) {\n      error.path.prepend(new PropertySegment(that, \"contentType\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformAnnotatedRelationshipElementWithContext(\n    that: AasTypes.AnnotatedRelationshipElement,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.annotations !== null) || that.annotations.length >= 1)) {\n      yield new VerificationError(\n        \"Annotations must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.annotations !== null) ||\n        AasCommon.every(\n          AasCommon.map(that.annotations, (item) => item.idShort !== null)\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"ID-shorts need to be defined for all the items of \" +\n          \"annotations according to AASd-117 (ID-short of Referables \" +\n          \"not being a direct child of a Submodel element list shall \" +\n          \"be specified).\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      for (const error of this.transformWithContext(that.first, context)) {\n        error.path.prepend(new PropertySegment(that, \"first\"));\n        yield error;\n      }\n\n      for (const error of this.transformWithContext(that.second, context)) {\n        error.path.prepend(new PropertySegment(that, \"second\"));\n        yield error;\n      }\n\n      if (that.annotations !== null) {\n        let annotationsIndex = 0;\n        for (const item of that.annotations) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.annotations, annotationsIndex));\n            error.path.prepend(new PropertySegment(that, \"annotations\"));\n            yield error;\n          }\n          annotationsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformEntityWithContext(\n    that: AasTypes.Entity,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.statements !== null) || that.statements.length >= 1)) {\n      yield new VerificationError(\n        \"Statements must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.statements !== null) ||\n        AasCommon.every(AasCommon.map(that.statements, (item) => item.idShort !== null))\n      )\n    ) {\n      yield new VerificationError(\n        \"ID-shorts need to be defined for all the items of \" +\n          \"statements according to AASd-117 (ID-short of Referables \" +\n          \"not being a direct child of a Submodel element list shall \" +\n          \"be specified).\"\n      );\n    }\n\n    if (\n      !(\n        (that.entityType == AasTypes.EntityType.SelfManagedEntity &&\n          ((that.globalAssetId !== null && that.specificAssetIds === null) ||\n            (that.globalAssetId === null &&\n              that.specificAssetIds !== null &&\n              that.specificAssetIds.length >= 1))) ||\n        (that.entityType != AasTypes.EntityType.SelfManagedEntity &&\n          that.globalAssetId === null &&\n          that.specificAssetIds === null)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-014: Either the attribute global asset ID \" +\n          \"or specific asset ID must be set if entity type is set to \" +\n          \"self-managed entity. They are not existing otherwise.\"\n      );\n    }\n\n    if (!(!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1)) {\n      yield new VerificationError(\n        \"Specific asset IDs must be either not set or have at least \" + \"one item.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.globalAssetId !== null) {\n      for (const error of verifyIdentifier(that.globalAssetId)) {\n        error.path.prepend(new PropertySegment(that, \"globalAssetId\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.statements !== null) {\n        let statementsIndex = 0;\n        for (const item of that.statements) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.statements, statementsIndex));\n            error.path.prepend(new PropertySegment(that, \"statements\"));\n            yield error;\n          }\n          statementsIndex++;\n        }\n      }\n\n      if (that.specificAssetIds !== null) {\n        let specificAssetIdsIndex = 0;\n        for (const item of that.specificAssetIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.specificAssetIds, specificAssetIdsIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"specificAssetIds\"));\n            yield error;\n          }\n          specificAssetIdsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformEventPayloadWithContext(\n    that: AasTypes.EventPayload,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(\n        isModelReferenceTo(that.source, AasTypes.KeyTypes.EventElement) ||\n        isModelReferenceTo(that.source, AasTypes.KeyTypes.BasicEventElement)\n      )\n    ) {\n      yield new VerificationError(\n        \"Source must be a model reference to an Event element.\"\n      );\n    }\n\n    if (!isModelReferenceToReferable(that.observableReference)) {\n      yield new VerificationError(\n        \"Observable reference must be a model reference to \" + \"a referable.\"\n      );\n    }\n\n    if (that.topic !== null) {\n      for (const error of verifyMessageTopicType(that.topic)) {\n        error.path.prepend(new PropertySegment(that, \"topic\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyDateTimeUtc(that.timeStamp)) {\n      error.path.prepend(new PropertySegment(that, \"timeStamp\"));\n      yield error;\n    }\n\n    if (that.payload !== null) {\n      for (const error of verifyBlobType(that.payload)) {\n        error.path.prepend(new PropertySegment(that, \"payload\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      for (const error of this.transformWithContext(that.source, context)) {\n        error.path.prepend(new PropertySegment(that, \"source\"));\n        yield error;\n      }\n\n      if (that.sourceSemanticId !== null) {\n        for (const error of this.transformWithContext(that.sourceSemanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"sourceSemanticId\"));\n          yield error;\n        }\n      }\n\n      for (const error of this.transformWithContext(\n        that.observableReference,\n        context\n      )) {\n        error.path.prepend(new PropertySegment(that, \"observableReference\"));\n        yield error;\n      }\n\n      if (that.observableSemanticId !== null) {\n        for (const error of this.transformWithContext(\n          that.observableSemanticId,\n          context\n        )) {\n          error.path.prepend(new PropertySegment(that, \"observableSemanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.subjectId !== null) {\n        for (const error of this.transformWithContext(that.subjectId, context)) {\n          error.path.prepend(new PropertySegment(that, \"subjectId\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformBasicEventElementWithContext(\n    that: AasTypes.BasicEventElement,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.direction == AasTypes.Direction.Input) || that.maxInterval === null)) {\n      yield new VerificationError(\n        \"Max. interval is not applicable for input direction.\"\n      );\n    }\n\n    if (!isModelReferenceToReferable(that.observed)) {\n      yield new VerificationError(\"Observed must be a model reference to a referable.\");\n    }\n\n    if (\n      !(\n        !(that.messageBroker !== null) ||\n        isModelReferenceToReferable(that.messageBroker)\n      )\n    ) {\n      yield new VerificationError(\n        \"Message broker must be a model reference to a referable.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (that.messageTopic !== null) {\n      for (const error of verifyMessageTopicType(that.messageTopic)) {\n        error.path.prepend(new PropertySegment(that, \"messageTopic\"));\n        yield error;\n      }\n    }\n\n    if (that.lastUpdate !== null) {\n      for (const error of verifyDateTimeUtc(that.lastUpdate)) {\n        error.path.prepend(new PropertySegment(that, \"lastUpdate\"));\n        yield error;\n      }\n    }\n\n    if (that.minInterval !== null) {\n      for (const error of verifyDuration(that.minInterval)) {\n        error.path.prepend(new PropertySegment(that, \"minInterval\"));\n        yield error;\n      }\n    }\n\n    if (that.maxInterval !== null) {\n      for (const error of verifyDuration(that.maxInterval)) {\n        error.path.prepend(new PropertySegment(that, \"maxInterval\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      for (const error of this.transformWithContext(that.observed, context)) {\n        error.path.prepend(new PropertySegment(that, \"observed\"));\n        yield error;\n      }\n\n      if (that.messageBroker !== null) {\n        for (const error of this.transformWithContext(that.messageBroker, context)) {\n          error.path.prepend(new PropertySegment(that, \"messageBroker\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformOperationWithContext(\n    that: AasTypes.Operation,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (\n      !idShortsOfVariablesAreUnique(\n        that.inputVariables,\n        that.outputVariables,\n        that.inoutputVariables\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-134: For an Operation the ID-short of all \" +\n          \"values of input, output and in/output variables.\"\n      );\n    }\n\n    if (!(!(that.inputVariables !== null) || that.inputVariables.length >= 1)) {\n      yield new VerificationError(\n        \"Input variables must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (!(!(that.outputVariables !== null) || that.outputVariables.length >= 1)) {\n      yield new VerificationError(\n        \"Output variables must be either not set or have at least \" + \"one item.\"\n      );\n    }\n\n    if (!(!(that.inoutputVariables !== null) || that.inoutputVariables.length >= 1)) {\n      yield new VerificationError(\n        \"Inoutput variables must be either not set or have at least \" + \"one item.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.inputVariables !== null) {\n        let inputVariablesIndex = 0;\n        for (const item of that.inputVariables) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.inputVariables, inputVariablesIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"inputVariables\"));\n            yield error;\n          }\n          inputVariablesIndex++;\n        }\n      }\n\n      if (that.outputVariables !== null) {\n        let outputVariablesIndex = 0;\n        for (const item of that.outputVariables) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.outputVariables, outputVariablesIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"outputVariables\"));\n            yield error;\n          }\n          outputVariablesIndex++;\n        }\n      }\n\n      if (that.inoutputVariables !== null) {\n        let inoutputVariablesIndex = 0;\n        for (const item of that.inoutputVariables) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.inoutputVariables, inoutputVariablesIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"inoutputVariables\"));\n            yield error;\n          }\n          inoutputVariablesIndex++;\n        }\n      }\n    }\n  }\n\n  *transformOperationVariableWithContext(\n    that: AasTypes.OperationVariable,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.value.idShort !== null)) {\n      yield new VerificationError(\n        \"Value must have the ID-short specified according to \" +\n          \"Constraint AASd-117 (ID-short of Referables not being \" +\n          \"a direct child of a Submodel element list shall be \" +\n          \"specified).\"\n      );\n    }\n\n    if (context === true) {\n      for (const error of this.transformWithContext(that.value, context)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n  }\n\n  *transformCapabilityWithContext(\n    that: AasTypes.Capability,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.supplementalSemanticIds !== null) ||\n        that.supplementalSemanticIds.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Supplemental semantic IDs must be either not set or have at \" +\n          \"least one item.\"\n      );\n    }\n\n    if (!(!(that.supplementalSemanticIds !== null) || that.semanticId !== null)) {\n      yield new VerificationError(\n        \"Constraint AASd-118: If there are supplemental semantic IDs \" +\n          \"defined then there shall be also a main semantic ID.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || that.qualifiers.length >= 1)) {\n      yield new VerificationError(\n        \"Qualifiers must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers))) {\n      yield new VerificationError(\n        \"Constraint AASd-021: Every qualifiable can only have one \" +\n          \"qualifier with the same type.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.semanticId !== null) {\n        for (const error of this.transformWithContext(that.semanticId, context)) {\n          error.path.prepend(new PropertySegment(that, \"semanticId\"));\n          yield error;\n        }\n      }\n\n      if (that.supplementalSemanticIds !== null) {\n        let supplementalSemanticIdsIndex = 0;\n        for (const item of that.supplementalSemanticIds) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.supplementalSemanticIds,\n                supplementalSemanticIdsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"supplementalSemanticIds\"));\n            yield error;\n          }\n          supplementalSemanticIdsIndex++;\n        }\n      }\n\n      if (that.qualifiers !== null) {\n        let qualifiersIndex = 0;\n        for (const item of that.qualifiers) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));\n            error.path.prepend(new PropertySegment(that, \"qualifiers\"));\n            yield error;\n          }\n          qualifiersIndex++;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformConceptDescriptionWithContext(\n    that: AasTypes.ConceptDescription,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(!(that.extensions !== null) || that.extensions.length >= 1)) {\n      yield new VerificationError(\n        \"Extensions must be either not set or have at least one item.\"\n      );\n    }\n\n    if (!(!(that.extensions !== null) || extensionNamesAreUnique(that.extensions))) {\n      yield new VerificationError(\n        \"Constraint AASd-077: The name of an extension within \" +\n          \"Has-Extensions needs to be unique.\"\n      );\n    }\n\n    if (!(!(that.description !== null) || that.description.length >= 1)) {\n      yield new VerificationError(\n        \"Description must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.description !== null) || langStringsHaveUniqueLanguages(that.description)\n      )\n    ) {\n      yield new VerificationError(\"Description must specify unique languages.\");\n    }\n\n    if (!(!(that.displayName !== null) || that.displayName.length >= 1)) {\n      yield new VerificationError(\n        \"Display name must be either not set or have at least one \" + \"item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)\n      )\n    ) {\n      yield new VerificationError(\"Display name must specify unique languages.\");\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        that.embeddedDataSpecifications.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Embedded data specifications must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (!(!(that.isCaseOf !== null) || that.isCaseOf.length >= 1)) {\n      yield new VerificationError(\n        \"Is-case-of must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.embeddedDataSpecifications !== null) ||\n        dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(\n          that.embeddedDataSpecifications\n        ) ||\n        dataSpecificationIec61360sHaveValue(that.embeddedDataSpecifications)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-008: For a concept description using \" +\n          \"data specification template IEC 61360, the definition is \" +\n          \"mandatory and shall be defined at least in English. \" +\n          \"Exception: The concept description describes a value.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.category !== null &&\n          that.category == \"QUALIFIER_TYPE\" &&\n          that.embeddedDataSpecifications !== null\n        ) || dataSpecificationIec61360sHaveDataType(that.embeddedDataSpecifications)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-007: For a concept description with \" +\n          \"category QUALIFIER_TYPE using data specification IEC 61360, \" +\n          \"the data type of the data specification is mandatory and \" +\n          \"shall be defined.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.category !== null &&\n          that.category == \"DOCUMENT\" &&\n          that.embeddedDataSpecifications !== null\n        ) ||\n        dataSpecificationIec61360sForDocumentHaveAppropriateDataType(\n          that.embeddedDataSpecifications\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-006: For a concept description with \" +\n          \"category DOCUMENT using data specification IEC 61360, \" +\n          \"the data type of the data specification shall be one of: \" +\n          \"FILE, BLOB, HTML.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.category !== null &&\n          that.category == \"REFERENCE\" &&\n          that.embeddedDataSpecifications !== null\n        ) ||\n        dataSpecificationIec61360sForReferenceHaveAppropriateDataType(\n          that.embeddedDataSpecifications\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-005: For a concept description with \" +\n          \"category REFERENCE using data specification IEC 61360, \" +\n          \"the data type of the data specification shall be one of: \" +\n          \"STRING, IRI, IRDI.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.category !== null &&\n          (that.category == \"PROPERTY\" || that.category == \"VALUE\") &&\n          that.embeddedDataSpecifications !== null\n        ) ||\n        dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(\n          that.embeddedDataSpecifications\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-004: For a concept description with \" +\n          \"category PROPERTY or VALUE using data specification IEC \" +\n          \"61360, the data type of the data specification is mandatory \" +\n          \"and shall be one of: DATE, STRING, STRING_TRANSLATABLE, \" +\n          \"INTEGER_MEASURE, INTEGER_COUNT, INTEGER_CURRENCY, \" +\n          \"REAL_MEASURE, REAL_COUNT, REAL_CURRENCY, BOOLEAN, RATIONAL, \" +\n          \"RATIONAL_MEASURE, TIME, TIMESTAMP.\"\n      );\n    }\n\n    if (that.category !== null) {\n      for (const error of verifyNameType(that.category)) {\n        error.path.prepend(new PropertySegment(that, \"category\"));\n        yield error;\n      }\n    }\n\n    if (that.idShort !== null) {\n      for (const error of verifyIdShortType(that.idShort)) {\n        error.path.prepend(new PropertySegment(that, \"idShort\"));\n        yield error;\n      }\n    }\n\n    for (const error of verifyIdentifier(that.id)) {\n      error.path.prepend(new PropertySegment(that, \"id\"));\n      yield error;\n    }\n\n    if (context === true) {\n      if (that.extensions !== null) {\n        let extensionsIndex = 0;\n        for (const item of that.extensions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.extensions, extensionsIndex));\n            error.path.prepend(new PropertySegment(that, \"extensions\"));\n            yield error;\n          }\n          extensionsIndex++;\n        }\n      }\n\n      if (that.displayName !== null) {\n        let displayNameIndex = 0;\n        for (const item of that.displayName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.displayName, displayNameIndex));\n            error.path.prepend(new PropertySegment(that, \"displayName\"));\n            yield error;\n          }\n          displayNameIndex++;\n        }\n      }\n\n      if (that.description !== null) {\n        let descriptionIndex = 0;\n        for (const item of that.description) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.description, descriptionIndex));\n            error.path.prepend(new PropertySegment(that, \"description\"));\n            yield error;\n          }\n          descriptionIndex++;\n        }\n      }\n\n      if (that.administration !== null) {\n        for (const error of this.transformWithContext(that.administration, context)) {\n          error.path.prepend(new PropertySegment(that, \"administration\"));\n          yield error;\n        }\n      }\n\n      if (that.embeddedDataSpecifications !== null) {\n        let embeddedDataSpecificationsIndex = 0;\n        for (const item of that.embeddedDataSpecifications) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.embeddedDataSpecifications,\n                embeddedDataSpecificationsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"embeddedDataSpecifications\"));\n            yield error;\n          }\n          embeddedDataSpecificationsIndex++;\n        }\n      }\n\n      if (that.isCaseOf !== null) {\n        let isCaseOfIndex = 0;\n        for (const item of that.isCaseOf) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.isCaseOf, isCaseOfIndex));\n            error.path.prepend(new PropertySegment(that, \"isCaseOf\"));\n            yield error;\n          }\n          isCaseOfIndex++;\n        }\n      }\n    }\n  }\n\n  *transformReferenceWithContext(\n    that: AasTypes.Reference,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.keys.length >= 1)) {\n      yield new VerificationError(\"Keys must contain at least one item.\");\n    }\n\n    if (\n      !(\n        !(that.keys.length >= 1) ||\n        AasConstants.GLOBALLY_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-121: For References the value of type of \" +\n          \"the first key of keys shall be one of Globally \" +\n          \"Identifiables.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ExternalReference &&\n          that.keys.length >= 1\n        ) ||\n        AasConstants.GENERIC_GLOBALLY_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-122: For external references the value of \" +\n          \"type of the first key of keys shall be one of Generic \" +\n          \"Globally Identifiables.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length >= 1\n        ) || AasConstants.AAS_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-123: For model references the value of type \" +\n          \"of the first key of keys shall be one of AAS identifiables.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ExternalReference &&\n          that.keys.length >= 1\n        ) ||\n        AasConstants.GENERIC_GLOBALLY_IDENTIFIABLES.has(\n          AasCommon.at(that.keys, -1).type\n        ) ||\n        AasConstants.GENERIC_FRAGMENT_KEYS.has(AasCommon.at(that.keys, -1).type)\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-124: For external references the last key \" +\n          \"of keys shall be either one of Generic Globally \" +\n          \"Identifiables or one of Generic Fragment Keys.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 1\n        ) ||\n        AasCommon.every(\n          AasCommon.map(AasCommon.range(1, that.keys.length), (i) =>\n            AasConstants.FRAGMENT_KEYS.has(AasCommon.at(that.keys, i).type)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-125: For model references with more than \" +\n          \"one key in keys the value of type of each of the keys \" +\n          \"following the first key of keys shall be one of Fragment \" +\n          \"Keys.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 1\n        ) ||\n        AasCommon.every(\n          AasCommon.map(\n            AasCommon.range(0, that.keys.length - 1),\n            (i) =>\n              !AasConstants.GENERIC_FRAGMENT_KEYS.has(AasCommon.at(that.keys, i).type)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-126: For model references with more than \" +\n          \"one key in keys the value of type of the last key in \" +\n          \"the reference key chain may be one of Generic Fragment Keys \" +\n          \"or no key at all shall have a value out of Generic Fragment \" +\n          \"Keys.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ModelReference &&\n          that.keys.length > 1 &&\n          AasCommon.at(that.keys, -1).type == AasTypes.KeyTypes.FragmentReference\n        ) ||\n        AasCommon.at(that.keys, -2).type == AasTypes.KeyTypes.File ||\n        AasCommon.at(that.keys, -2).type == AasTypes.KeyTypes.Blob\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-127: For model references, with more than \" +\n          \"one key in keys a key with type Fragment Reference shall be \" +\n          \"preceded by a key with type File or Blob.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 2\n        ) ||\n        AasCommon.every(\n          AasCommon.map(\n            AasCommon.range(0, that.keys.length - 1),\n            (i) =>\n              !(\n                AasCommon.at(that.keys, i).type == AasTypes.KeyTypes.SubmodelElementList\n              ) || matchesXsPositiveInteger(AasCommon.at(that.keys, i + 1).value)\n          )\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASd-128: For model references, the value of \" +\n          \"a key preceded by a key with type Submodel element list is \" +\n          \"an integer number denoting the position in the array of \" +\n          \"the submodel element list.\"\n      );\n    }\n\n    if (context === true) {\n      if (that.referredSemanticId !== null) {\n        for (const error of this.transformWithContext(\n          that.referredSemanticId,\n          context\n        )) {\n          error.path.prepend(new PropertySegment(that, \"referredSemanticId\"));\n          yield error;\n        }\n      }\n\n      let keysIndex = 0;\n      for (const item of that.keys) {\n        for (const error of this.transformWithContext(item, context)) {\n          error.path.prepend(new IndexSegment(that.keys, keysIndex));\n          error.path.prepend(new PropertySegment(that, \"keys\"));\n          yield error;\n        }\n        keysIndex++;\n      }\n    }\n  }\n\n  *transformKeyWithContext(\n    that: AasTypes.Key,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    for (const error of verifyIdentifier(that.value)) {\n      error.path.prepend(new PropertySegment(that, \"value\"));\n      yield error;\n    }\n  }\n\n  *transformLangStringNameTypeWithContext(\n    that: AasTypes.LangStringNameType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.text.length <= 128)) {\n      yield new VerificationError(\n        \"String shall have a maximum length of 128 characters.\"\n      );\n    }\n\n    for (const error of verifyBcp47LanguageTag(that.language)) {\n      error.path.prepend(new PropertySegment(that, \"language\"));\n      yield error;\n    }\n\n    for (const error of verifyNonEmptyXmlSerializableString(that.text)) {\n      error.path.prepend(new PropertySegment(that, \"text\"));\n      yield error;\n    }\n  }\n\n  *transformLangStringTextTypeWithContext(\n    that: AasTypes.LangStringTextType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.text.length <= 1023)) {\n      yield new VerificationError(\n        \"String shall have a maximum length of 1023 characters.\"\n      );\n    }\n\n    for (const error of verifyBcp47LanguageTag(that.language)) {\n      error.path.prepend(new PropertySegment(that, \"language\"));\n      yield error;\n    }\n\n    for (const error of verifyNonEmptyXmlSerializableString(that.text)) {\n      error.path.prepend(new PropertySegment(that, \"text\"));\n      yield error;\n    }\n  }\n\n  *transformEnvironmentWithContext(\n    that: AasTypes.Environment,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (\n      !(!(that.conceptDescriptions !== null) || that.conceptDescriptions.length >= 1)\n    ) {\n      yield new VerificationError(\n        \"Concept descriptions must be either not set or have at \" + \"least one item.\"\n      );\n    }\n\n    if (!(!(that.submodels !== null) || that.submodels.length >= 1)) {\n      yield new VerificationError(\n        \"Submodels must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(\n        !(that.assetAdministrationShells !== null) ||\n        that.assetAdministrationShells.length >= 1\n      )\n    ) {\n      yield new VerificationError(\n        \"Asset administration shells must be either not set or have \" +\n          \"at least one item.\"\n      );\n    }\n\n    if (context === true) {\n      if (that.assetAdministrationShells !== null) {\n        let assetAdministrationShellsIndex = 0;\n        for (const item of that.assetAdministrationShells) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(\n                that.assetAdministrationShells,\n                assetAdministrationShellsIndex\n              )\n            );\n            error.path.prepend(new PropertySegment(that, \"assetAdministrationShells\"));\n            yield error;\n          }\n          assetAdministrationShellsIndex++;\n        }\n      }\n\n      if (that.submodels !== null) {\n        let submodelsIndex = 0;\n        for (const item of that.submodels) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.submodels, submodelsIndex));\n            error.path.prepend(new PropertySegment(that, \"submodels\"));\n            yield error;\n          }\n          submodelsIndex++;\n        }\n      }\n\n      if (that.conceptDescriptions !== null) {\n        let conceptDescriptionsIndex = 0;\n        for (const item of that.conceptDescriptions) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(\n              new IndexSegment(that.conceptDescriptions, conceptDescriptionsIndex)\n            );\n            error.path.prepend(new PropertySegment(that, \"conceptDescriptions\"));\n            yield error;\n          }\n          conceptDescriptionsIndex++;\n        }\n      }\n    }\n  }\n\n  *transformEmbeddedDataSpecificationWithContext(\n    that: AasTypes.EmbeddedDataSpecification,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (context === true) {\n      for (const error of this.transformWithContext(\n        that.dataSpecificationContent,\n        context\n      )) {\n        error.path.prepend(new PropertySegment(that, \"dataSpecificationContent\"));\n        yield error;\n      }\n\n      if (that.dataSpecification !== null) {\n        for (const error of this.transformWithContext(\n          that.dataSpecification,\n          context\n        )) {\n          error.path.prepend(new PropertySegment(that, \"dataSpecification\"));\n          yield error;\n        }\n      }\n    }\n  }\n\n  *transformLevelTypeWithContext(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    that: AasTypes.LevelType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    // No verification has been defined for LevelType.\n  }\n\n  *transformValueReferencePairWithContext(\n    that: AasTypes.ValueReferencePair,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    for (const error of verifyValueTypeIec61360(that.value)) {\n      error.path.prepend(new PropertySegment(that, \"value\"));\n      yield error;\n    }\n\n    if (context === true) {\n      for (const error of this.transformWithContext(that.valueId, context)) {\n        error.path.prepend(new PropertySegment(that, \"valueId\"));\n        yield error;\n      }\n    }\n  }\n\n  *transformValueListWithContext(\n    that: AasTypes.ValueList,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.valueReferencePairs.length >= 1)) {\n      yield new VerificationError(\n        \"Value reference pair types must contain at least one item.\"\n      );\n    }\n\n    if (context === true) {\n      let valueReferencePairsIndex = 0;\n      for (const item of that.valueReferencePairs) {\n        for (const error of this.transformWithContext(item, context)) {\n          error.path.prepend(\n            new IndexSegment(that.valueReferencePairs, valueReferencePairsIndex)\n          );\n          error.path.prepend(new PropertySegment(that, \"valueReferencePairs\"));\n          yield error;\n        }\n        valueReferencePairsIndex++;\n      }\n    }\n  }\n\n  *transformLangStringPreferredNameTypeIec61360WithContext(\n    that: AasTypes.LangStringPreferredNameTypeIec61360,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.text.length <= 255)) {\n      yield new VerificationError(\n        \"String shall have a maximum length of 255 characters.\"\n      );\n    }\n\n    for (const error of verifyBcp47LanguageTag(that.language)) {\n      error.path.prepend(new PropertySegment(that, \"language\"));\n      yield error;\n    }\n\n    for (const error of verifyNonEmptyXmlSerializableString(that.text)) {\n      error.path.prepend(new PropertySegment(that, \"text\"));\n      yield error;\n    }\n  }\n\n  *transformLangStringShortNameTypeIec61360WithContext(\n    that: AasTypes.LangStringShortNameTypeIec61360,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.text.length <= 18)) {\n      yield new VerificationError(\n        \"String shall have a maximum length of 18 characters.\"\n      );\n    }\n\n    for (const error of verifyBcp47LanguageTag(that.language)) {\n      error.path.prepend(new PropertySegment(that, \"language\"));\n      yield error;\n    }\n\n    for (const error of verifyNonEmptyXmlSerializableString(that.text)) {\n      error.path.prepend(new PropertySegment(that, \"text\"));\n      yield error;\n    }\n  }\n\n  *transformLangStringDefinitionTypeIec61360WithContext(\n    that: AasTypes.LangStringDefinitionTypeIec61360,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!(that.text.length <= 1023)) {\n      yield new VerificationError(\n        \"String shall have a maximum length of 1023 characters.\"\n      );\n    }\n\n    for (const error of verifyBcp47LanguageTag(that.language)) {\n      error.path.prepend(new PropertySegment(that, \"language\"));\n      yield error;\n    }\n\n    for (const error of verifyNonEmptyXmlSerializableString(that.text)) {\n      error.path.prepend(new PropertySegment(that, \"text\"));\n      yield error;\n    }\n  }\n\n  *transformDataSpecificationIec61360WithContext(\n    that: AasTypes.DataSpecificationIec61360,\n    context: boolean\n  ): IterableIterator<VerificationError> {\n    if (!!(that.value !== null && that.valueList !== null)) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-010: If value is not empty then value \" +\n          \"list shall be empty and vice versa.\"\n      );\n    }\n\n    if (\n      !(\n        !(\n          that.dataType !== null &&\n          AasConstants.IEC_61360_DATA_TYPES_WITH_UNIT.has(that.dataType)\n        ) ||\n        that.unit !== null ||\n        that.unitId !== null\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-3a-009: If data type is a an integer, real \" +\n          \"or rational with a measure or currency, unit or unit ID \" +\n          \"shall be defined.\"\n      );\n    }\n\n    if (!(!(that.definition !== null) || that.definition.length >= 1)) {\n      yield new VerificationError(\n        \"Definition must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(!(that.definition !== null) || langStringsHaveUniqueLanguages(that.definition))\n    ) {\n      yield new VerificationError(\"Definition must specify unique languages.\");\n    }\n\n    if (!(!(that.shortName !== null) || that.shortName.length >= 1)) {\n      yield new VerificationError(\n        \"Short name must be either not set or have at least one item.\"\n      );\n    }\n\n    if (\n      !(!(that.shortName !== null) || langStringsHaveUniqueLanguages(that.shortName))\n    ) {\n      yield new VerificationError(\"Short name must specify unique languages.\");\n    }\n\n    if (!(that.preferredName.length >= 1)) {\n      yield new VerificationError(\"Preferred name must have at least one item.\");\n    }\n\n    if (!langStringsHaveUniqueLanguages(that.preferredName)) {\n      yield new VerificationError(\"Preferred name must specify unique languages.\");\n    }\n\n    if (\n      !AasCommon.some(\n        AasCommon.map(that.preferredName, (langString) =>\n          isBcp47ForEnglish(langString.language)\n        )\n      )\n    ) {\n      yield new VerificationError(\n        \"Constraint AASc-002: preferred name shall be provided at \" +\n          \"least in English.\"\n      );\n    }\n\n    if (that.unit !== null) {\n      for (const error of verifyNonEmptyXmlSerializableString(that.unit)) {\n        error.path.prepend(new PropertySegment(that, \"unit\"));\n        yield error;\n      }\n    }\n\n    if (that.sourceOfDefinition !== null) {\n      for (const error of verifyNonEmptyXmlSerializableString(\n        that.sourceOfDefinition\n      )) {\n        error.path.prepend(new PropertySegment(that, \"sourceOfDefinition\"));\n        yield error;\n      }\n    }\n\n    if (that.symbol !== null) {\n      for (const error of verifyNonEmptyXmlSerializableString(that.symbol)) {\n        error.path.prepend(new PropertySegment(that, \"symbol\"));\n        yield error;\n      }\n    }\n\n    if (that.valueFormat !== null) {\n      for (const error of verifyNonEmptyXmlSerializableString(that.valueFormat)) {\n        error.path.prepend(new PropertySegment(that, \"valueFormat\"));\n        yield error;\n      }\n    }\n\n    if (that.value !== null) {\n      for (const error of verifyValueTypeIec61360(that.value)) {\n        error.path.prepend(new PropertySegment(that, \"value\"));\n        yield error;\n      }\n    }\n\n    if (context === true) {\n      let preferredNameIndex = 0;\n      for (const item of that.preferredName) {\n        for (const error of this.transformWithContext(item, context)) {\n          error.path.prepend(new IndexSegment(that.preferredName, preferredNameIndex));\n          error.path.prepend(new PropertySegment(that, \"preferredName\"));\n          yield error;\n        }\n        preferredNameIndex++;\n      }\n\n      if (that.shortName !== null) {\n        let shortNameIndex = 0;\n        for (const item of that.shortName) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.shortName, shortNameIndex));\n            error.path.prepend(new PropertySegment(that, \"shortName\"));\n            yield error;\n          }\n          shortNameIndex++;\n        }\n      }\n\n      if (that.unitId !== null) {\n        for (const error of this.transformWithContext(that.unitId, context)) {\n          error.path.prepend(new PropertySegment(that, \"unitId\"));\n          yield error;\n        }\n      }\n\n      if (that.definition !== null) {\n        let definitionIndex = 0;\n        for (const item of that.definition) {\n          for (const error of this.transformWithContext(item, context)) {\n            error.path.prepend(new IndexSegment(that.definition, definitionIndex));\n            error.path.prepend(new PropertySegment(that, \"definition\"));\n            yield error;\n          }\n          definitionIndex++;\n        }\n      }\n\n      if (that.valueList !== null) {\n        for (const error of this.transformWithContext(that.valueList, context)) {\n          error.path.prepend(new PropertySegment(that, \"valueList\"));\n          yield error;\n        }\n      }\n\n      if (that.levelType !== null) {\n        for (const error of this.transformWithContext(that.levelType, context)) {\n          error.path.prepend(new PropertySegment(that, \"levelType\"));\n          yield error;\n        }\n      }\n    }\n  }\n}\n\nconst VERIFIER = new Verifier();\n\n/**\n * Verify the constraints of `that`.\n *\n * @param that - instance to be verified\n * @param recurse - if set, continue the verification recursively\n * @returns a stream of verification errors\n */\nexport function* verify(\n  that: AasTypes.Class,\n  recurse = true\n): IterableIterator<VerificationError> {\n  yield* VERIFIER.transformWithContext(that, recurse);\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyNonEmptyXmlSerializableString(\n  that: string\n): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyDateTimeUtc(that: string): IterableIterator<VerificationError> {\n  if (!matchesXsDateTimeUtc(that)) {\n    yield new VerificationError(\n      \"The value must match the pattern of xs:dateTime with \" +\n        \"the time zone fixed to UTC.\"\n    );\n  }\n\n  if (!isXsDateTimeUtc(that)) {\n    yield new VerificationError(\n      \"The value must represent a valid xs:dateTime with the time \" +\n        \"zone fixed to UTC.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyDuration(that: string): IterableIterator<VerificationError> {\n  if (!matchesXsDuration(that)) {\n    yield new VerificationError(\"The value must match the pattern of xs:duration.\");\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyBlobType(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  that: Uint8Array\n): IterableIterator<VerificationError> {\n  // There is no verification specified.\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyIdentifier(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 2000)) {\n    yield new VerificationError(\n      \"Identifier shall have a maximum length of 2000 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyValueTypeIec61360(\n  that: string\n): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 2000)) {\n    yield new VerificationError(\n      \"Value type IEC 61360 shall have a maximum length of 2000 \" + \"characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyNameType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 128)) {\n    yield new VerificationError(\n      \"Name type shall have a maximum length of 128 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyVersionType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!matchesVersionType(that)) {\n    yield new VerificationError(\"Version type shall match the version pattern.\");\n  }\n\n  if (!(that.length <= 4)) {\n    yield new VerificationError(\n      \"Version type shall have a maximum length of 4 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyRevisionType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!matchesRevisionType(that)) {\n    yield new VerificationError(\"Revision type shall match the revision pattern.\");\n  }\n\n  if (!(that.length <= 4)) {\n    yield new VerificationError(\n      \"Revision type shall have a maximum length of 4 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyLabelType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 64)) {\n    yield new VerificationError(\n      \"Label type shall have a maximum length of 64 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyMessageTopicType(\n  that: string\n): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 255)) {\n    yield new VerificationError(\n      \"Message topic type shall have a maximum length of 255 \" + \"characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyBcp47LanguageTag(\n  that: string\n): IterableIterator<VerificationError> {\n  if (!matchesBcp47(that)) {\n    yield new VerificationError(\n      \"The value must represent a value language tag conformant to \" + \"BCP 47.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyContentType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 100)) {\n    yield new VerificationError(\n      \"Content type shall have a maximum length of 100 characters.\"\n    );\n  }\n\n  if (!matchesMimeType(that)) {\n    yield new VerificationError(\n      \"The value must represent a valid content MIME type \" + \"according to RFC 2046.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyPathType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 2000)) {\n    yield new VerificationError(\n      \"Identifier shall have a maximum length of 2000 characters.\"\n    );\n  }\n\n  if (!matchesRfc8089Path(that)) {\n    yield new VerificationError(\n      \"The value must represent a valid file URI scheme according \" + \"to RFC 8089.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyQualifierType(\n  that: string\n): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 128)) {\n    yield new VerificationError(\n      \"Name type shall have a maximum length of 128 characters.\"\n    );\n  }\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyValueDataType(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  that: string\n): IterableIterator<VerificationError> {\n  // There is no verification specified.\n}\n\n/**\n * Verify the constraints of `that` value.\n *\n * @param that - to be verified\n * @returns errors, if any\n */\nexport function* verifyIdShortType(that: string): IterableIterator<VerificationError> {\n  if (!matchesXmlSerializableString(that)) {\n    yield new VerificationError(\n      \"Constraint AASd-130: An attribute with data type 'string' \" +\n        \"shall consist of these characters only: \" +\n        \"^[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\U00010000-\\\\U0010FFFF]*$.\"\n    );\n  }\n\n  if (!(that.length >= 1)) {\n    yield new VerificationError(\"The value must not be empty.\");\n  }\n\n  if (!(that.length <= 128)) {\n    yield new VerificationError(\n      \"Name type shall have a maximum length of 128 characters.\"\n    );\n  }\n\n  if (!matchesIdShort(that)) {\n    yield new VerificationError(\n      \"ID-short of Referables shall only feature letters, digits, \" +\n        \"underscore (``_``); starting mandatory with a letter. \" +\n        \"*I.e.* ``[a-zA-Z][a-zA-Z0-9_]*``.\"\n    );\n  }\n}\n\n// This code has been automatically generated by aas-core-codegen.\n// Do NOT edit or append.\n"],"mappings":"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"}